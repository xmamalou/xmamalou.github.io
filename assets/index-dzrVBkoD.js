(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const r of s)if(r.type==="childList")for(const o of r.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&i(o)}).observe(document,{childList:!0,subtree:!0});function t(s){const r={};return s.integrity&&(r.integrity=s.integrity),s.referrerPolicy&&(r.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?r.credentials="include":s.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function i(s){if(s.ep)return;s.ep=!0;const r=t(s);fetch(s.href,r)}})();/**
* @vue/shared v3.4.14
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function Yu(n,e){const t=new Set(n.split(","));return e?i=>t.has(i.toLowerCase()):i=>t.has(i)}const bt={},Mr=[],Dn=()=>{},Av=()=>!1,ql=n=>n.charCodeAt(0)===111&&n.charCodeAt(1)===110&&(n.charCodeAt(2)>122||n.charCodeAt(2)<97),ju=n=>n.startsWith("onUpdate:"),jt=Object.assign,Zu=(n,e)=>{const t=n.indexOf(e);t>-1&&n.splice(t,1)},Cv=Object.prototype.hasOwnProperty,it=(n,e)=>Cv.call(n,e),ze=Array.isArray,Sr=n=>Xl(n)==="[object Map]",Zm=n=>Xl(n)==="[object Set]",je=n=>typeof n=="function",Vt=n=>typeof n=="string",Br=n=>typeof n=="symbol",Mt=n=>n!==null&&typeof n=="object",Km=n=>(Mt(n)||je(n))&&je(n.then)&&je(n.catch),Jm=Object.prototype.toString,Xl=n=>Jm.call(n),Rv=n=>Xl(n).slice(8,-1),Qm=n=>Xl(n)==="[object Object]",Ku=n=>Vt(n)&&n!=="NaN"&&n[0]!=="-"&&""+parseInt(n,10)===n,yl=Yu(",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),$l=n=>{const e=Object.create(null);return t=>e[t]||(e[t]=n(t))},Pv=/-(\w)/g,si=$l(n=>n.replace(Pv,(e,t)=>t?t.toUpperCase():"")),Iv=/\B([A-Z])/g,zr=$l(n=>n.replace(Iv,"-$1").toLowerCase()),Yl=$l(n=>n.charAt(0).toUpperCase()+n.slice(1)),Gc=$l(n=>n?`on${Yl(n)}`:""),Zi=(n,e)=>!Object.is(n,e),Wc=(n,e)=>{for(let t=0;t<n.length;t++)n[t](e)},Rl=(n,e,t)=>{Object.defineProperty(n,e,{configurable:!0,enumerable:!1,value:t})},Lv=n=>{const e=parseFloat(n);return isNaN(e)?n:e};let bf;const eg=()=>bf||(bf=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});function jl(n){if(ze(n)){const e={};for(let t=0;t<n.length;t++){const i=n[t],s=Vt(i)?Ov(i):jl(i);if(s)for(const r in s)e[r]=s[r]}return e}else if(Vt(n)||Mt(n))return n}const Dv=/;(?![^(]*\))/g,Uv=/:([^]+)/,Nv=/\/\*[^]*?\*\//g;function Ov(n){const e={};return n.replace(Nv,"").split(Dv).forEach(t=>{if(t){const i=t.split(Uv);i.length>1&&(e[i[0].trim()]=i[1].trim())}}),e}function Zl(n){let e="";if(Vt(n))e=n;else if(ze(n))for(let t=0;t<n.length;t++){const i=Zl(n[t]);i&&(e+=i+" ")}else if(Mt(n))for(const t in n)n[t]&&(e+=t+" ");return e.trim()}const Fv="itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly",kv=Yu(Fv);function tg(n){return!!n||n===""}const Rt=n=>Vt(n)?n:n==null?"":ze(n)||Mt(n)&&(n.toString===Jm||!je(n.toString))?JSON.stringify(n,ng,2):String(n),ng=(n,e)=>e&&e.__v_isRef?ng(n,e.value):Sr(e)?{[`Map(${e.size})`]:[...e.entries()].reduce((t,[i,s],r)=>(t[qc(i,r)+" =>"]=s,t),{})}:Zm(e)?{[`Set(${e.size})`]:[...e.values()].map(t=>qc(t))}:Br(e)?qc(e):Mt(e)&&!ze(e)&&!Qm(e)?String(e):e,qc=(n,e="")=>{var t;return Br(n)?`Symbol(${(t=n.description)!=null?t:e})`:n};/**
* @vue/reactivity v3.4.14
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/let An;class ig{constructor(e=!1){this.detached=e,this._active=!0,this.effects=[],this.cleanups=[],this.parent=An,!e&&An&&(this.index=(An.scopes||(An.scopes=[])).push(this)-1)}get active(){return this._active}run(e){if(this._active){const t=An;try{return An=this,e()}finally{An=t}}}on(){An=this}off(){An=this.parent}stop(e){if(this._active){let t,i;for(t=0,i=this.effects.length;t<i;t++)this.effects[t].stop();for(t=0,i=this.cleanups.length;t<i;t++)this.cleanups[t]();if(this.scopes)for(t=0,i=this.scopes.length;t<i;t++)this.scopes[t].stop(!0);if(!this.detached&&this.parent&&!e){const s=this.parent.scopes.pop();s&&s!==this&&(this.parent.scopes[this.index]=s,s.index=this.index)}this.parent=void 0,this._active=!1}}}function Bv(n){return new ig(n)}function zv(n,e=An){e&&e.active&&e.effects.push(n)}function sg(){return An}function Vv(n){An&&An.cleanups.push(n)}let Cs;class Ju{constructor(e,t,i,s){this.fn=e,this.trigger=t,this.scheduler=i,this.active=!0,this.deps=[],this._dirtyLevel=2,this._trackId=0,this._runnings=0,this._shouldSchedule=!1,this._depsLength=0,zv(this,s)}get dirty(){if(this._dirtyLevel===1){Gs();for(let e=0;e<this._depsLength;e++){const t=this.deps[e];if(t.computed&&(Hv(t.computed),this._dirtyLevel>=2))break}this._dirtyLevel<2&&(this._dirtyLevel=0),Ws()}return this._dirtyLevel>=2}set dirty(e){this._dirtyLevel=e?2:0}run(){if(this._dirtyLevel=0,!this.active)return this.fn();let e=qi,t=Cs;try{return qi=!0,Cs=this,this._runnings++,wf(this),this.fn()}finally{Mf(this),this._runnings--,Cs=t,qi=e}}stop(){var e;this.active&&(wf(this),Mf(this),(e=this.onStop)==null||e.call(this),this.active=!1)}}function Hv(n){return n.value}function wf(n){n._trackId++,n._depsLength=0}function Mf(n){if(n.deps&&n.deps.length>n._depsLength){for(let e=n._depsLength;e<n.deps.length;e++)rg(n.deps[e],n);n.deps.length=n._depsLength}}function rg(n,e){const t=n.get(e);t!==void 0&&e._trackId!==t&&(n.delete(e),n.size===0&&n.cleanup())}let qi=!0,kh=0;const og=[];function Gs(){og.push(qi),qi=!1}function Ws(){const n=og.pop();qi=n===void 0?!0:n}function Qu(){kh++}function ed(){for(kh--;!kh&&Bh.length;)Bh.shift()()}function ag(n,e,t){if(e.get(n)!==n._trackId){e.set(n,n._trackId);const i=n.deps[n._depsLength];i!==e?(i&&rg(i,n),n.deps[n._depsLength++]=e):n._depsLength++}}const Bh=[];function lg(n,e,t){Qu();for(const i of n.keys())if(n.get(i)===i._trackId){if(i._dirtyLevel<e&&!(i._runnings&&!i.allowRecurse)){const s=i._dirtyLevel;i._dirtyLevel=e,s===0&&(i._shouldSchedule=!0,i.trigger())}i.scheduler&&i._shouldSchedule&&(!i._runnings||i.allowRecurse)&&(i._shouldSchedule=!1,Bh.push(i.scheduler))}ed()}const cg=(n,e)=>{const t=new Map;return t.cleanup=n,t.computed=e,t},Pl=new WeakMap,Rs=Symbol(""),zh=Symbol("");function wn(n,e,t){if(qi&&Cs){let i=Pl.get(n);i||Pl.set(n,i=new Map);let s=i.get(t);s||i.set(t,s=cg(()=>i.delete(t))),ag(Cs,s)}}function vi(n,e,t,i,s,r){const o=Pl.get(n);if(!o)return;let a=[];if(e==="clear")a=[...o.values()];else if(t==="length"&&ze(n)){const l=Number(i);o.forEach((c,h)=>{(h==="length"||!Br(h)&&h>=l)&&a.push(c)})}else switch(t!==void 0&&a.push(o.get(t)),e){case"add":ze(n)?Ku(t)&&a.push(o.get("length")):(a.push(o.get(Rs)),Sr(n)&&a.push(o.get(zh)));break;case"delete":ze(n)||(a.push(o.get(Rs)),Sr(n)&&a.push(o.get(zh)));break;case"set":Sr(n)&&a.push(o.get(Rs));break}Qu();for(const l of a)l&&lg(l,2);ed()}function Gv(n,e){var t;return(t=Pl.get(n))==null?void 0:t.get(e)}const Wv=Yu("__proto__,__v_isRef,__isVue"),hg=new Set(Object.getOwnPropertyNames(Symbol).filter(n=>n!=="arguments"&&n!=="caller").map(n=>Symbol[n]).filter(Br)),Sf=qv();function qv(){const n={};return["includes","indexOf","lastIndexOf"].forEach(e=>{n[e]=function(...t){const i=at(this);for(let r=0,o=this.length;r<o;r++)wn(i,"get",r+"");const s=i[e](...t);return s===-1||s===!1?i[e](...t.map(at)):s}}),["push","pop","shift","unshift","splice"].forEach(e=>{n[e]=function(...t){Gs(),Qu();const i=at(this)[e].apply(this,t);return ed(),Ws(),i}}),n}function Xv(n){const e=at(this);return wn(e,"has",n),e.hasOwnProperty(n)}class ug{constructor(e=!1,t=!1){this._isReadonly=e,this._shallow=t}get(e,t,i){const s=this._isReadonly,r=this._shallow;if(t==="__v_isReactive")return!s;if(t==="__v_isReadonly")return s;if(t==="__v_isShallow")return r;if(t==="__v_raw")return i===(s?r?r0:mg:r?pg:fg).get(e)||Object.getPrototypeOf(e)===Object.getPrototypeOf(i)?e:void 0;const o=ze(e);if(!s){if(o&&it(Sf,t))return Reflect.get(Sf,t,i);if(t==="hasOwnProperty")return Xv}const a=Reflect.get(e,t,i);return(Br(t)?hg.has(t):Wv(t))||(s||wn(e,"get",t),r)?a:Zt(a)?o&&Ku(t)?a:a.value:Mt(a)?s?Jl(a):Vr(a):a}}class dg extends ug{constructor(e=!1){super(!1,e)}set(e,t,i,s){let r=e[t];if(!this._shallow){const l=Cr(r);if(!Il(i)&&!Cr(i)&&(r=at(r),i=at(i)),!ze(e)&&Zt(r)&&!Zt(i))return l?!1:(r.value=i,!0)}const o=ze(e)&&Ku(t)?Number(t)<e.length:it(e,t),a=Reflect.set(e,t,i,s);return e===at(s)&&(o?Zi(i,r)&&vi(e,"set",t,i):vi(e,"add",t,i)),a}deleteProperty(e,t){const i=it(e,t);e[t];const s=Reflect.deleteProperty(e,t);return s&&i&&vi(e,"delete",t,void 0),s}has(e,t){const i=Reflect.has(e,t);return(!Br(t)||!hg.has(t))&&wn(e,"has",t),i}ownKeys(e){return wn(e,"iterate",ze(e)?"length":Rs),Reflect.ownKeys(e)}}class $v extends ug{constructor(e=!1){super(!0,e)}set(e,t){return!0}deleteProperty(e,t){return!0}}const Yv=new dg,jv=new $v,Zv=new dg(!0),td=n=>n,Kl=n=>Reflect.getPrototypeOf(n);function ya(n,e,t=!1,i=!1){n=n.__v_raw;const s=at(n),r=at(e);t||(Zi(e,r)&&wn(s,"get",e),wn(s,"get",r));const{has:o}=Kl(s),a=i?td:t?rd:So;if(o.call(s,e))return a(n.get(e));if(o.call(s,r))return a(n.get(r));n!==s&&n.get(e)}function _a(n,e=!1){const t=this.__v_raw,i=at(t),s=at(n);return e||(Zi(n,s)&&wn(i,"has",n),wn(i,"has",s)),n===s?t.has(n):t.has(n)||t.has(s)}function va(n,e=!1){return n=n.__v_raw,!e&&wn(at(n),"iterate",Rs),Reflect.get(n,"size",n)}function Ef(n){n=at(n);const e=at(this);return Kl(e).has.call(e,n)||(e.add(n),vi(e,"add",n,n)),this}function Tf(n,e){e=at(e);const t=at(this),{has:i,get:s}=Kl(t);let r=i.call(t,n);r||(n=at(n),r=i.call(t,n));const o=s.call(t,n);return t.set(n,e),r?Zi(e,o)&&vi(t,"set",n,e):vi(t,"add",n,e),this}function Af(n){const e=at(this),{has:t,get:i}=Kl(e);let s=t.call(e,n);s||(n=at(n),s=t.call(e,n)),i&&i.call(e,n);const r=e.delete(n);return s&&vi(e,"delete",n,void 0),r}function Cf(){const n=at(this),e=n.size!==0,t=n.clear();return e&&vi(n,"clear",void 0,void 0),t}function xa(n,e){return function(i,s){const r=this,o=r.__v_raw,a=at(o),l=e?td:n?rd:So;return!n&&wn(a,"iterate",Rs),o.forEach((c,h)=>i.call(s,l(c),l(h),r))}}function ba(n,e,t){return function(...i){const s=this.__v_raw,r=at(s),o=Sr(r),a=n==="entries"||n===Symbol.iterator&&o,l=n==="keys"&&o,c=s[n](...i),h=t?td:e?rd:So;return!e&&wn(r,"iterate",l?zh:Rs),{next(){const{value:u,done:d}=c.next();return d?{value:u,done:d}:{value:a?[h(u[0]),h(u[1])]:h(u),done:d}},[Symbol.iterator](){return this}}}}function Pi(n){return function(...e){return n==="delete"?!1:n==="clear"?void 0:this}}function Kv(){const n={get(r){return ya(this,r)},get size(){return va(this)},has:_a,add:Ef,set:Tf,delete:Af,clear:Cf,forEach:xa(!1,!1)},e={get(r){return ya(this,r,!1,!0)},get size(){return va(this)},has:_a,add:Ef,set:Tf,delete:Af,clear:Cf,forEach:xa(!1,!0)},t={get(r){return ya(this,r,!0)},get size(){return va(this,!0)},has(r){return _a.call(this,r,!0)},add:Pi("add"),set:Pi("set"),delete:Pi("delete"),clear:Pi("clear"),forEach:xa(!0,!1)},i={get(r){return ya(this,r,!0,!0)},get size(){return va(this,!0)},has(r){return _a.call(this,r,!0)},add:Pi("add"),set:Pi("set"),delete:Pi("delete"),clear:Pi("clear"),forEach:xa(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(r=>{n[r]=ba(r,!1,!1),t[r]=ba(r,!0,!1),e[r]=ba(r,!1,!0),i[r]=ba(r,!0,!0)}),[n,t,e,i]}const[Jv,Qv,e0,t0]=Kv();function nd(n,e){const t=e?n?t0:e0:n?Qv:Jv;return(i,s,r)=>s==="__v_isReactive"?!n:s==="__v_isReadonly"?n:s==="__v_raw"?i:Reflect.get(it(t,s)&&s in i?t:i,s,r)}const n0={get:nd(!1,!1)},i0={get:nd(!1,!0)},s0={get:nd(!0,!1)},fg=new WeakMap,pg=new WeakMap,mg=new WeakMap,r0=new WeakMap;function o0(n){switch(n){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function a0(n){return n.__v_skip||!Object.isExtensible(n)?0:o0(Rv(n))}function Vr(n){return Cr(n)?n:id(n,!1,Yv,n0,fg)}function gg(n){return id(n,!1,Zv,i0,pg)}function Jl(n){return id(n,!0,jv,s0,mg)}function id(n,e,t,i,s){if(!Mt(n)||n.__v_raw&&!(e&&n.__v_isReactive))return n;const r=s.get(n);if(r)return r;const o=a0(n);if(o===0)return n;const a=new Proxy(n,o===2?i:t);return s.set(n,a),a}function Er(n){return Cr(n)?Er(n.__v_raw):!!(n&&n.__v_isReactive)}function Cr(n){return!!(n&&n.__v_isReadonly)}function Il(n){return!!(n&&n.__v_isShallow)}function yg(n){return Er(n)||Cr(n)}function at(n){const e=n&&n.__v_raw;return e?at(e):n}function sd(n){return Rl(n,"__v_skip",!0),n}const So=n=>Mt(n)?Vr(n):n,rd=n=>Mt(n)?Jl(n):n;class _g{constructor(e,t,i,s){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this.__v_isReadonly=!1,this.effect=new Ju(()=>e(this._value),()=>Ll(this,1)),this.effect.computed=this,this.effect.active=this._cacheable=!s,this.__v_isReadonly=i}get value(){const e=at(this);return(!e._cacheable||e.effect.dirty)&&Zi(e._value,e._value=e.effect.run())&&Ll(e,2),od(e),e._value}set value(e){this._setter(e)}get _dirty(){return this.effect.dirty}set _dirty(e){this.effect.dirty=e}}function l0(n,e,t=!1){let i,s;const r=je(n);return r?(i=n,s=Dn):(i=n.get,s=n.set),new _g(i,s,r||!s,t)}function od(n){qi&&Cs&&(n=at(n),ag(Cs,n.dep||(n.dep=cg(()=>n.dep=void 0,n instanceof _g?n:void 0))))}function Ll(n,e=2,t){n=at(n);const i=n.dep;i&&lg(i,e)}function Zt(n){return!!(n&&n.__v_isRef===!0)}function et(n){return vg(n,!1)}function Ps(n){return vg(n,!0)}function vg(n,e){return Zt(n)?n:new c0(n,e)}class c0{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:at(e),this._value=t?e:So(e)}get value(){return od(this),this._value}set value(e){const t=this.__v_isShallow||Il(e)||Cr(e);e=t?e:at(e),Zi(e,this._rawValue)&&(this._rawValue=e,this._value=t?e:So(e),Ll(this,2))}}function j(n){return Zt(n)?n.value:n}const h0={get:(n,e,t)=>j(Reflect.get(n,e,t)),set:(n,e,t,i)=>{const s=n[e];return Zt(s)&&!Zt(t)?(s.value=t,!0):Reflect.set(n,e,t,i)}};function xg(n){return Er(n)?n:new Proxy(n,h0)}class u0{constructor(e){this.dep=void 0,this.__v_isRef=!0;const{get:t,set:i}=e(()=>od(this),()=>Ll(this));this._get=t,this._set=i}get value(){return this._get()}set value(e){this._set(e)}}function d0(n){return new u0(n)}function f0(n){const e=ze(n)?new Array(n.length):{};for(const t in n)e[t]=m0(n,t);return e}class p0{constructor(e,t,i){this._object=e,this._key=t,this._defaultValue=i,this.__v_isRef=!0}get value(){const e=this._object[this._key];return e===void 0?this._defaultValue:e}set value(e){this._object[this._key]=e}get dep(){return Gv(at(this._object),this._key)}}function m0(n,e,t){const i=n[e];return Zt(i)?i:new p0(n,e,t)}/**
* @vue/runtime-core v3.4.14
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function Xi(n,e,t,i){let s;try{s=i?n(...i):n()}catch(r){Ql(r,e,t)}return s}function Wn(n,e,t,i){if(je(n)){const r=Xi(n,e,t,i);return r&&Km(r)&&r.catch(o=>{Ql(o,e,t)}),r}const s=[];for(let r=0;r<n.length;r++)s.push(Wn(n[r],e,t,i));return s}function Ql(n,e,t,i=!0){const s=e?e.vnode:null;if(e){let r=e.parent;const o=e.proxy,a=`https://vuejs.org/errors/#runtime-${t}`;for(;r;){const c=r.ec;if(c){for(let h=0;h<c.length;h++)if(c[h](n,o,a)===!1)return}r=r.parent}const l=e.appContext.config.errorHandler;if(l){Xi(l,null,10,[n,o,a]);return}}g0(n,t,s,i)}function g0(n,e,t,i=!0){console.error(n)}let Eo=!1,Vh=!1;const tn=[];let ei=0;const Tr=[];let Bi=null,ws=0;const bg=Promise.resolve();let ad=null;function ld(n){const e=ad||bg;return n?e.then(this?n.bind(this):n):e}function y0(n){let e=ei+1,t=tn.length;for(;e<t;){const i=e+t>>>1,s=tn[i],r=To(s);r<n||r===n&&s.pre?e=i+1:t=i}return e}function cd(n){(!tn.length||!tn.includes(n,Eo&&n.allowRecurse?ei+1:ei))&&(n.id==null?tn.push(n):tn.splice(y0(n.id),0,n),wg())}function wg(){!Eo&&!Vh&&(Vh=!0,ad=bg.then(Sg))}function _0(n){const e=tn.indexOf(n);e>ei&&tn.splice(e,1)}function v0(n){ze(n)?Tr.push(...n):(!Bi||!Bi.includes(n,n.allowRecurse?ws+1:ws))&&Tr.push(n),wg()}function Rf(n,e,t=Eo?ei+1:0){for(;t<tn.length;t++){const i=tn[t];if(i&&i.pre){if(n&&i.id!==n.uid)continue;tn.splice(t,1),t--,i()}}}function Mg(n){if(Tr.length){const e=[...new Set(Tr)].sort((t,i)=>To(t)-To(i));if(Tr.length=0,Bi){Bi.push(...e);return}for(Bi=e,ws=0;ws<Bi.length;ws++)Bi[ws]();Bi=null,ws=0}}const To=n=>n.id==null?1/0:n.id,x0=(n,e)=>{const t=To(n)-To(e);if(t===0){if(n.pre&&!e.pre)return-1;if(e.pre&&!n.pre)return 1}return t};function Sg(n){Vh=!1,Eo=!0,tn.sort(x0);try{for(ei=0;ei<tn.length;ei++){const e=tn[ei];e&&e.active!==!1&&Xi(e,null,14)}}finally{ei=0,tn.length=0,Mg(),Eo=!1,ad=null,(tn.length||Tr.length)&&Sg()}}function b0(n,e,...t){if(n.isUnmounted)return;const i=n.vnode.props||bt;let s=t;const r=e.startsWith("update:"),o=r&&e.slice(7);if(o&&o in i){const h=`${o==="modelValue"?"model":o}Modifiers`,{number:u,trim:d}=i[h]||bt;d&&(s=t.map(f=>Vt(f)?f.trim():f)),u&&(s=t.map(Lv))}let a,l=i[a=Gc(e)]||i[a=Gc(si(e))];!l&&r&&(l=i[a=Gc(zr(e))]),l&&Wn(l,n,6,s);const c=i[a+"Once"];if(c){if(!n.emitted)n.emitted={};else if(n.emitted[a])return;n.emitted[a]=!0,Wn(c,n,6,s)}}function Eg(n,e,t=!1){const i=e.emitsCache,s=i.get(n);if(s!==void 0)return s;const r=n.emits;let o={},a=!1;if(!je(n)){const l=c=>{const h=Eg(c,e,!0);h&&(a=!0,jt(o,h))};!t&&e.mixins.length&&e.mixins.forEach(l),n.extends&&l(n.extends),n.mixins&&n.mixins.forEach(l)}return!r&&!a?(Mt(n)&&i.set(n,null),null):(ze(r)?r.forEach(l=>o[l]=null):jt(o,r),Mt(n)&&i.set(n,o),o)}function ec(n,e){return!n||!ql(e)?!1:(e=e.slice(2).replace(/Once$/,""),it(n,e[0].toLowerCase()+e.slice(1))||it(n,zr(e))||it(n,e))}let Un=null,tc=null;function Dl(n){const e=Un;return Un=n,tc=n&&n.type.__scopeId||null,e}function es(n){tc=n}function ts(){tc=null}function Hh(n,e=Un,t){if(!e||n._n)return n;const i=(...s)=>{i._d&&zf(-1);const r=Dl(e);let o;try{o=n(...s)}finally{Dl(r),i._d&&zf(1)}return o};return i._n=!0,i._c=!0,i._d=!0,i}function Xc(n){const{type:e,vnode:t,proxy:i,withProxy:s,props:r,propsOptions:[o],slots:a,attrs:l,emit:c,render:h,renderCache:u,data:d,setupState:f,ctx:m,inheritAttrs:y}=n;let g,p;const v=Dl(n);try{if(t.shapeFlag&4){const x=s||i,P=x;g=Qn(h.call(P,x,u,r,f,d,m)),p=l}else{const x=e;g=Qn(x.length>1?x(r,{attrs:l,slots:a,emit:c}):x(r,null)),p=e.props?l:w0(l)}}catch(x){po.length=0,Ql(x,n,1),g=vt(Ao)}let _=g;if(p&&y!==!1){const x=Object.keys(p),{shapeFlag:P}=_;x.length&&P&7&&(o&&x.some(ju)&&(p=M0(p,o)),_=Pr(_,p))}return t.dirs&&(_=Pr(_),_.dirs=_.dirs?_.dirs.concat(t.dirs):t.dirs),t.transition&&(_.transition=t.transition),g=_,Dl(v),g}const w0=n=>{let e;for(const t in n)(t==="class"||t==="style"||ql(t))&&((e||(e={}))[t]=n[t]);return e},M0=(n,e)=>{const t={};for(const i in n)(!ju(i)||!(i.slice(9)in e))&&(t[i]=n[i]);return t};function S0(n,e,t){const{props:i,children:s,component:r}=n,{props:o,children:a,patchFlag:l}=e,c=r.emitsOptions;if(e.dirs||e.transition)return!0;if(t&&l>=0){if(l&1024)return!0;if(l&16)return i?Pf(i,o,c):!!o;if(l&8){const h=e.dynamicProps;for(let u=0;u<h.length;u++){const d=h[u];if(o[d]!==i[d]&&!ec(c,d))return!0}}}else return(s||a)&&(!a||!a.$stable)?!0:i===o?!1:i?o?Pf(i,o,c):!0:!!o;return!1}function Pf(n,e,t){const i=Object.keys(e);if(i.length!==Object.keys(n).length)return!0;for(let s=0;s<i.length;s++){const r=i[s];if(e[r]!==n[r]&&!ec(t,r))return!0}return!1}function E0({vnode:n,parent:e},t){for(;e;){const i=e.subTree;if(i.suspense&&i.suspense.activeBranch===n&&(i.el=n.el),i===n)(n=e.vnode).el=t,e=e.parent;else break}}const Tg="components";function lo(n,e){return A0(Tg,n,!0,e)||n}const T0=Symbol.for("v-ndc");function A0(n,e,t=!0,i=!1){const s=Un||Yt;if(s){const r=s.type;if(n===Tg){const a=Mx(r,!1);if(a&&(a===e||a===si(e)||a===Yl(si(e))))return r}const o=If(s[n]||r[n],e)||If(s.appContext[n],e);return!o&&i?r:o}}function If(n,e){return n&&(n[e]||n[si(e)]||n[Yl(si(e))])}const C0=n=>n.__isSuspense;function R0(n,e){e&&e.pendingBranch?ze(n)?e.effects.push(...n):e.effects.push(n):v0(n)}const P0=Symbol.for("v-scx"),I0=()=>qn(P0);function Is(n,e){return nc(n,null,e)}function L0(n,e){return nc(n,null,{flush:"post"})}const wa={};function sn(n,e,t){return nc(n,e,t)}function nc(n,e,{immediate:t,deep:i,flush:s,once:r,onTrack:o,onTrigger:a}=bt){if(e&&r){const M=e;e=(...A)=>{M(...A),P()}}const l=Yt,c=M=>i===!0?M:yr(M,i===!1?1:void 0);let h,u=!1,d=!1;if(Zt(n)?(h=()=>n.value,u=Il(n)):Er(n)?(h=()=>c(n),u=!0):ze(n)?(d=!0,u=n.some(M=>Er(M)||Il(M)),h=()=>n.map(M=>{if(Zt(M))return M.value;if(Er(M))return c(M);if(je(M))return Xi(M,l,2)})):je(n)?e?h=()=>Xi(n,l,2):h=()=>(f&&f(),Wn(n,l,3,[m])):h=Dn,e&&i){const M=h;h=()=>yr(M())}let f,m=M=>{f=_.onStop=()=>{Xi(M,l,4),f=_.onStop=void 0}},y;if(oc)if(m=Dn,e?t&&Wn(e,l,3,[h(),d?[]:void 0,m]):h(),s==="sync"){const M=I0();y=M.__watcherHandles||(M.__watcherHandles=[])}else return Dn;let g=d?new Array(n.length).fill(wa):wa;const p=()=>{if(!(!_.active||!_.dirty))if(e){const M=_.run();(i||u||(d?M.some((A,O)=>Zi(A,g[O])):Zi(M,g)))&&(f&&f(),Wn(e,l,3,[M,g===wa?void 0:d&&g[0]===wa?[]:g,m]),g=M)}else _.run()};p.allowRecurse=!!e;let v;s==="sync"?v=p:s==="post"?v=()=>gn(p,l&&l.suspense):(p.pre=!0,l&&(p.id=l.uid),v=()=>cd(p));const _=new Ju(h,Dn,v),x=sg(),P=()=>{_.stop(),x&&Zu(x.effects,_)};return e?t?p():g=_.run():s==="post"?gn(_.run.bind(_),l&&l.suspense):_.run(),y&&y.push(P),P}function D0(n,e,t){const i=this.proxy,s=Vt(n)?n.includes(".")?Ag(i,n):()=>i[n]:n.bind(i,i);let r;je(e)?r=e:(r=e.handler,t=e);const o=ea(this),a=nc(s,r.bind(i),t);return o(),a}function Ag(n,e){const t=e.split(".");return()=>{let i=n;for(let s=0;s<t.length&&i;s++)i=i[t[s]];return i}}function yr(n,e,t=0,i){if(!Mt(n)||n.__v_skip)return n;if(e&&e>0){if(t>=e)return n;t++}if(i=i||new Set,i.has(n))return n;if(i.add(n),Zt(n))yr(n.value,e,t,i);else if(ze(n))for(let s=0;s<n.length;s++)yr(n[s],e,t,i);else if(Zm(n)||Sr(n))n.forEach(s=>{yr(s,e,t,i)});else if(Qm(n))for(const s in n)yr(n[s],e,t,i);return n}function ls(n,e,t,i){const s=n.dirs,r=e&&e.dirs;for(let o=0;o<s.length;o++){const a=s[o];r&&(a.oldValue=r[o].value);let l=a.dir[i];l&&(Gs(),Wn(l,t,8,[n.el,a,n,e]),Ws())}}/*! #__NO_SIDE_EFFECTS__ */function $t(n,e){return je(n)?jt({name:n.name},e,{setup:n}):n}const _l=n=>!!n.type.__asyncLoader,Cg=n=>n.type.__isKeepAlive;function U0(n,e){Rg(n,"a",e)}function N0(n,e){Rg(n,"da",e)}function Rg(n,e,t=Yt){const i=n.__wdc||(n.__wdc=()=>{let s=t;for(;s;){if(s.isDeactivated)return;s=s.parent}return n()});if(ic(e,i,t),t){let s=t.parent;for(;s&&s.parent;)Cg(s.parent.vnode)&&O0(i,e,t,s),s=s.parent}}function O0(n,e,t,i){const s=ic(e,n,i,!0);qs(()=>{Zu(i[e],s)},t)}function ic(n,e,t=Yt,i=!1){if(t){const s=t[n]||(t[n]=[]),r=e.__weh||(e.__weh=(...o)=>{if(t.isUnmounted)return;Gs();const a=ea(t),l=Wn(e,t,n,o);return a(),Ws(),l});return i?s.unshift(r):s.push(r),r}}const Ai=n=>(e,t=Yt)=>(!oc||n==="sp")&&ic(n,(...i)=>e(...i),t),F0=Ai("bm"),Qo=Ai("m"),k0=Ai("bu"),B0=Ai("u"),z0=Ai("bum"),qs=Ai("um"),V0=Ai("sp"),H0=Ai("rtg"),G0=Ai("rtc");function W0(n,e=Yt){ic("ec",n,e)}function Rr(n,e,t,i){let s;const r=t&&t[i];if(ze(n)||Vt(n)){s=new Array(n.length);for(let o=0,a=n.length;o<a;o++)s[o]=e(n[o],o,void 0,r&&r[o])}else if(typeof n=="number"){s=new Array(n);for(let o=0;o<n;o++)s[o]=e(o+1,o,void 0,r&&r[o])}else if(Mt(n))if(n[Symbol.iterator])s=Array.from(n,(o,a)=>e(o,a,void 0,r&&r[a]));else{const o=Object.keys(n);s=new Array(o.length);for(let a=0,l=o.length;a<l;a++){const c=o[a];s[a]=e(n[c],c,a,r&&r[a])}}else s=[];return t&&(t[i]=s),s}const Gh=n=>n?Vg(n)?fd(n)||n.proxy:Gh(n.parent):null,uo=jt(Object.create(null),{$:n=>n,$el:n=>n.vnode.el,$data:n=>n.data,$props:n=>n.props,$attrs:n=>n.attrs,$slots:n=>n.slots,$refs:n=>n.refs,$parent:n=>Gh(n.parent),$root:n=>Gh(n.root),$emit:n=>n.emit,$options:n=>hd(n),$forceUpdate:n=>n.f||(n.f=()=>{n.effect.dirty=!0,cd(n.update)}),$nextTick:n=>n.n||(n.n=ld.bind(n.proxy)),$watch:n=>D0.bind(n)}),$c=(n,e)=>n!==bt&&!n.__isScriptSetup&&it(n,e),q0={get({_:n},e){const{ctx:t,setupState:i,data:s,props:r,accessCache:o,type:a,appContext:l}=n;let c;if(e[0]!=="$"){const f=o[e];if(f!==void 0)switch(f){case 1:return i[e];case 2:return s[e];case 4:return t[e];case 3:return r[e]}else{if($c(i,e))return o[e]=1,i[e];if(s!==bt&&it(s,e))return o[e]=2,s[e];if((c=n.propsOptions[0])&&it(c,e))return o[e]=3,r[e];if(t!==bt&&it(t,e))return o[e]=4,t[e];Wh&&(o[e]=0)}}const h=uo[e];let u,d;if(h)return e==="$attrs"&&wn(n,"get",e),h(n);if((u=a.__cssModules)&&(u=u[e]))return u;if(t!==bt&&it(t,e))return o[e]=4,t[e];if(d=l.config.globalProperties,it(d,e))return d[e]},set({_:n},e,t){const{data:i,setupState:s,ctx:r}=n;return $c(s,e)?(s[e]=t,!0):i!==bt&&it(i,e)?(i[e]=t,!0):it(n.props,e)||e[0]==="$"&&e.slice(1)in n?!1:(r[e]=t,!0)},has({_:{data:n,setupState:e,accessCache:t,ctx:i,appContext:s,propsOptions:r}},o){let a;return!!t[o]||n!==bt&&it(n,o)||$c(e,o)||(a=r[0])&&it(a,o)||it(i,o)||it(uo,o)||it(s.config.globalProperties,o)},defineProperty(n,e,t){return t.get!=null?n._.accessCache[e]=0:it(t,"value")&&this.set(n,e,t.value,null),Reflect.defineProperty(n,e,t)}};function X0(){return $0().slots}function $0(){const n=Ir();return n.setupContext||(n.setupContext=Gg(n))}function Lf(n){return ze(n)?n.reduce((e,t)=>(e[t]=null,e),{}):n}let Wh=!0;function Y0(n){const e=hd(n),t=n.proxy,i=n.ctx;Wh=!1,e.beforeCreate&&Df(e.beforeCreate,n,"bc");const{data:s,computed:r,methods:o,watch:a,provide:l,inject:c,created:h,beforeMount:u,mounted:d,beforeUpdate:f,updated:m,activated:y,deactivated:g,beforeDestroy:p,beforeUnmount:v,destroyed:_,unmounted:x,render:P,renderTracked:M,renderTriggered:A,errorCaptured:O,serverPrefetch:S,expose:C,inheritAttrs:G,components:J,directives:de,filters:F}=e;if(c&&j0(c,i,null),o)for(const te in o){const Q=o[te];je(Q)&&(i[te]=Q.bind(t))}if(s){const te=s.call(t,t);Mt(te)&&(n.data=Vr(te))}if(Wh=!0,r)for(const te in r){const Q=r[te],re=je(Q)?Q.bind(t,t):je(Q.get)?Q.get.bind(t,t):Dn,he=!je(Q)&&je(Q.set)?Q.set.bind(t):Dn,pe=wt({get:re,set:he});Object.defineProperty(i,te,{enumerable:!0,configurable:!0,get:()=>pe.value,set:ge=>pe.value=ge})}if(a)for(const te in a)Pg(a[te],i,t,te);if(l){const te=je(l)?l.call(t):l;Reflect.ownKeys(te).forEach(Q=>{Ls(Q,te[Q])})}h&&Df(h,n,"c");function X(te,Q){ze(Q)?Q.forEach(re=>te(re.bind(t))):Q&&te(Q.bind(t))}if(X(F0,u),X(Qo,d),X(k0,f),X(B0,m),X(U0,y),X(N0,g),X(W0,O),X(G0,M),X(H0,A),X(z0,v),X(qs,x),X(V0,S),ze(C))if(C.length){const te=n.exposed||(n.exposed={});C.forEach(Q=>{Object.defineProperty(te,Q,{get:()=>t[Q],set:re=>t[Q]=re})})}else n.exposed||(n.exposed={});P&&n.render===Dn&&(n.render=P),G!=null&&(n.inheritAttrs=G),J&&(n.components=J),de&&(n.directives=de)}function j0(n,e,t=Dn){ze(n)&&(n=qh(n));for(const i in n){const s=n[i];let r;Mt(s)?"default"in s?r=qn(s.from||i,s.default,!0):r=qn(s.from||i):r=qn(s),Zt(r)?Object.defineProperty(e,i,{enumerable:!0,configurable:!0,get:()=>r.value,set:o=>r.value=o}):e[i]=r}}function Df(n,e,t){Wn(ze(n)?n.map(i=>i.bind(e.proxy)):n.bind(e.proxy),e,t)}function Pg(n,e,t,i){const s=i.includes(".")?Ag(t,i):()=>t[i];if(Vt(n)){const r=e[n];je(r)&&sn(s,r)}else if(je(n))sn(s,n.bind(t));else if(Mt(n))if(ze(n))n.forEach(r=>Pg(r,e,t,i));else{const r=je(n.handler)?n.handler.bind(t):e[n.handler];je(r)&&sn(s,r,n)}}function hd(n){const e=n.type,{mixins:t,extends:i}=e,{mixins:s,optionsCache:r,config:{optionMergeStrategies:o}}=n.appContext,a=r.get(e);let l;return a?l=a:!s.length&&!t&&!i?l=e:(l={},s.length&&s.forEach(c=>Ul(l,c,o,!0)),Ul(l,e,o)),Mt(e)&&r.set(e,l),l}function Ul(n,e,t,i=!1){const{mixins:s,extends:r}=e;r&&Ul(n,r,t,!0),s&&s.forEach(o=>Ul(n,o,t,!0));for(const o in e)if(!(i&&o==="expose")){const a=Z0[o]||t&&t[o];n[o]=a?a(n[o],e[o]):e[o]}return n}const Z0={data:Uf,props:Nf,emits:Nf,methods:co,computed:co,beforeCreate:hn,created:hn,beforeMount:hn,mounted:hn,beforeUpdate:hn,updated:hn,beforeDestroy:hn,beforeUnmount:hn,destroyed:hn,unmounted:hn,activated:hn,deactivated:hn,errorCaptured:hn,serverPrefetch:hn,components:co,directives:co,watch:J0,provide:Uf,inject:K0};function Uf(n,e){return e?n?function(){return jt(je(n)?n.call(this,this):n,je(e)?e.call(this,this):e)}:e:n}function K0(n,e){return co(qh(n),qh(e))}function qh(n){if(ze(n)){const e={};for(let t=0;t<n.length;t++)e[n[t]]=n[t];return e}return n}function hn(n,e){return n?[...new Set([].concat(n,e))]:e}function co(n,e){return n?jt(Object.create(null),n,e):e}function Nf(n,e){return n?ze(n)&&ze(e)?[...new Set([...n,...e])]:jt(Object.create(null),Lf(n),Lf(e??{})):e}function J0(n,e){if(!n)return e;if(!e)return n;const t=jt(Object.create(null),n);for(const i in e)t[i]=hn(n[i],e[i]);return t}function Ig(){return{app:null,config:{isNativeTag:Av,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Q0=0;function ex(n,e){return function(i,s=null){je(i)||(i=jt({},i)),s!=null&&!Mt(s)&&(s=null);const r=Ig(),o=new WeakSet;let a=!1;const l=r.app={_uid:Q0++,_component:i,_props:s,_container:null,_context:r,_instance:null,version:Ex,get config(){return r.config},set config(c){},use(c,...h){return o.has(c)||(c&&je(c.install)?(o.add(c),c.install(l,...h)):je(c)&&(o.add(c),c(l,...h))),l},mixin(c){return r.mixins.includes(c)||r.mixins.push(c),l},component(c,h){return h?(r.components[c]=h,l):r.components[c]},directive(c,h){return h?(r.directives[c]=h,l):r.directives[c]},mount(c,h,u){if(!a){const d=vt(i,s);return d.appContext=r,u===!0?u="svg":u===!1&&(u=void 0),h&&e?e(d,c):n(d,c,u),a=!0,l._container=c,c.__vue_app__=l,fd(d.component)||d.component.proxy}},unmount(){a&&(n(null,l._container),delete l._container.__vue_app__)},provide(c,h){return r.provides[c]=h,l},runWithContext(c){Nl=l;try{return c()}finally{Nl=null}}};return l}}let Nl=null;function Ls(n,e){if(Yt){let t=Yt.provides;const i=Yt.parent&&Yt.parent.provides;i===t&&(t=Yt.provides=Object.create(i)),t[n]=e}}function qn(n,e,t=!1){const i=Yt||Un;if(i||Nl){const s=i?i.parent==null?i.vnode.appContext&&i.vnode.appContext.provides:i.parent.provides:Nl._context.provides;if(s&&n in s)return s[n];if(arguments.length>1)return t&&je(e)?e.call(i&&i.proxy):e}}function tx(n,e,t,i=!1){const s={},r={};Rl(r,rc,1),n.propsDefaults=Object.create(null),Lg(n,e,s,r);for(const o in n.propsOptions[0])o in s||(s[o]=void 0);t?n.props=i?s:gg(s):n.type.props?n.props=s:n.props=r,n.attrs=r}function nx(n,e,t,i){const{props:s,attrs:r,vnode:{patchFlag:o}}=n,a=at(s),[l]=n.propsOptions;let c=!1;if((i||o>0)&&!(o&16)){if(o&8){const h=n.vnode.dynamicProps;for(let u=0;u<h.length;u++){let d=h[u];if(ec(n.emitsOptions,d))continue;const f=e[d];if(l)if(it(r,d))f!==r[d]&&(r[d]=f,c=!0);else{const m=si(d);s[m]=Xh(l,a,m,f,n,!1)}else f!==r[d]&&(r[d]=f,c=!0)}}}else{Lg(n,e,s,r)&&(c=!0);let h;for(const u in a)(!e||!it(e,u)&&((h=zr(u))===u||!it(e,h)))&&(l?t&&(t[u]!==void 0||t[h]!==void 0)&&(s[u]=Xh(l,a,u,void 0,n,!0)):delete s[u]);if(r!==a)for(const u in r)(!e||!it(e,u))&&(delete r[u],c=!0)}c&&vi(n,"set","$attrs")}function Lg(n,e,t,i){const[s,r]=n.propsOptions;let o=!1,a;if(e)for(let l in e){if(yl(l))continue;const c=e[l];let h;s&&it(s,h=si(l))?!r||!r.includes(h)?t[h]=c:(a||(a={}))[h]=c:ec(n.emitsOptions,l)||(!(l in i)||c!==i[l])&&(i[l]=c,o=!0)}if(r){const l=at(t),c=a||bt;for(let h=0;h<r.length;h++){const u=r[h];t[u]=Xh(s,l,u,c[u],n,!it(c,u))}}return o}function Xh(n,e,t,i,s,r){const o=n[t];if(o!=null){const a=it(o,"default");if(a&&i===void 0){const l=o.default;if(o.type!==Function&&!o.skipFactory&&je(l)){const{propsDefaults:c}=s;if(t in c)i=c[t];else{const h=ea(s);i=c[t]=l.call(null,e),h()}}else i=l}o[0]&&(r&&!a?i=!1:o[1]&&(i===""||i===zr(t))&&(i=!0))}return i}function Dg(n,e,t=!1){const i=e.propsCache,s=i.get(n);if(s)return s;const r=n.props,o={},a=[];let l=!1;if(!je(n)){const h=u=>{l=!0;const[d,f]=Dg(u,e,!0);jt(o,d),f&&a.push(...f)};!t&&e.mixins.length&&e.mixins.forEach(h),n.extends&&h(n.extends),n.mixins&&n.mixins.forEach(h)}if(!r&&!l)return Mt(n)&&i.set(n,Mr),Mr;if(ze(r))for(let h=0;h<r.length;h++){const u=si(r[h]);Of(u)&&(o[u]=bt)}else if(r)for(const h in r){const u=si(h);if(Of(u)){const d=r[h],f=o[u]=ze(d)||je(d)?{type:d}:jt({},d);if(f){const m=Bf(Boolean,f.type),y=Bf(String,f.type);f[0]=m>-1,f[1]=y<0||m<y,(m>-1||it(f,"default"))&&a.push(u)}}}const c=[o,a];return Mt(n)&&i.set(n,c),c}function Of(n){return n[0]!=="$"}function Ff(n){const e=n&&n.toString().match(/^\s*(function|class) (\w+)/);return e?e[2]:n===null?"null":""}function kf(n,e){return Ff(n)===Ff(e)}function Bf(n,e){return ze(e)?e.findIndex(t=>kf(t,n)):je(e)&&kf(e,n)?0:-1}const Ug=n=>n[0]==="_"||n==="$stable",ud=n=>ze(n)?n.map(Qn):[Qn(n)],ix=(n,e,t)=>{if(e._n)return e;const i=Hh((...s)=>ud(e(...s)),t);return i._c=!1,i},Ng=(n,e,t)=>{const i=n._ctx;for(const s in n){if(Ug(s))continue;const r=n[s];if(je(r))e[s]=ix(s,r,i);else if(r!=null){const o=ud(r);e[s]=()=>o}}},Og=(n,e)=>{const t=ud(e);n.slots.default=()=>t},sx=(n,e)=>{if(n.vnode.shapeFlag&32){const t=e._;t?(n.slots=at(e),Rl(e,"_",t)):Ng(e,n.slots={})}else n.slots={},e&&Og(n,e);Rl(n.slots,rc,1)},rx=(n,e,t)=>{const{vnode:i,slots:s}=n;let r=!0,o=bt;if(i.shapeFlag&32){const a=e._;a?t&&a===1?r=!1:(jt(s,e),!t&&a===1&&delete s._):(r=!e.$stable,Ng(e,s)),o=e}else e&&(Og(n,e),o={default:1});if(r)for(const a in s)!Ug(a)&&o[a]==null&&delete s[a]};function $h(n,e,t,i,s=!1){if(ze(n)){n.forEach((d,f)=>$h(d,e&&(ze(e)?e[f]:e),t,i,s));return}if(_l(i)&&!s)return;const r=i.shapeFlag&4?fd(i.component)||i.component.proxy:i.el,o=s?null:r,{i:a,r:l}=n,c=e&&e.r,h=a.refs===bt?a.refs={}:a.refs,u=a.setupState;if(c!=null&&c!==l&&(Vt(c)?(h[c]=null,it(u,c)&&(u[c]=null)):Zt(c)&&(c.value=null)),je(l))Xi(l,a,12,[o,h]);else{const d=Vt(l),f=Zt(l);if(d||f){const m=()=>{if(n.f){const y=d?it(u,l)?u[l]:h[l]:l.value;s?ze(y)&&Zu(y,r):ze(y)?y.includes(r)||y.push(r):d?(h[l]=[r],it(u,l)&&(u[l]=h[l])):(l.value=[r],n.k&&(h[n.k]=l.value))}else d?(h[l]=o,it(u,l)&&(u[l]=o)):f&&(l.value=o,n.k&&(h[n.k]=o))};o?(m.id=-1,gn(m,t)):m()}}}const gn=R0;function Fg(n){return ox(n)}function ox(n,e){const t=eg();t.__VUE__=!0;const{insert:i,remove:s,patchProp:r,createElement:o,createText:a,createComment:l,setText:c,setElementText:h,parentNode:u,nextSibling:d,setScopeId:f=Dn,insertStaticContent:m}=n,y=(E,T,U,N=null,V=null,$=null,w=void 0,b=null,D=!!T.dynamicChildren)=>{if(E===T)return;E&&!jr(E,T)&&(N=z(E),ge(E,V,$,!0),E=null),T.patchFlag===-2&&(D=!1,T.dynamicChildren=null);const{type:B,ref:H,shapeFlag:Y}=T;switch(B){case sc:g(E,T,U,N);break;case Ao:p(E,T,U,N);break;case fo:E==null&&v(T,U,N,w);break;case Bt:J(E,T,U,N,V,$,w,b,D);break;default:Y&1?P(E,T,U,N,V,$,w,b,D):Y&6?de(E,T,U,N,V,$,w,b,D):(Y&64||Y&128)&&B.process(E,T,U,N,V,$,w,b,D,ae)}H!=null&&V&&$h(H,E&&E.ref,$,T||E,!T)},g=(E,T,U,N)=>{if(E==null)i(T.el=a(T.children),U,N);else{const V=T.el=E.el;T.children!==E.children&&c(V,T.children)}},p=(E,T,U,N)=>{E==null?i(T.el=l(T.children||""),U,N):T.el=E.el},v=(E,T,U,N)=>{[E.el,E.anchor]=m(E.children,T,U,N,E.el,E.anchor)},_=({el:E,anchor:T},U,N)=>{let V;for(;E&&E!==T;)V=d(E),i(E,U,N),E=V;i(T,U,N)},x=({el:E,anchor:T})=>{let U;for(;E&&E!==T;)U=d(E),s(E),E=U;s(T)},P=(E,T,U,N,V,$,w,b,D)=>{T.type==="svg"?w="svg":T.type==="math"&&(w="mathml"),E==null?M(T,U,N,V,$,w,b,D):S(E,T,V,$,w,b,D)},M=(E,T,U,N,V,$,w,b)=>{let D,B;const{props:H,shapeFlag:Y,transition:ce,dirs:ie}=E;if(D=E.el=o(E.type,$,H&&H.is,H),Y&8?h(D,E.children):Y&16&&O(E.children,D,null,N,V,Yc(E,$),w,b),ie&&ls(E,null,N,"created"),A(D,E,E.scopeId,w,N),H){for(const xe in H)xe!=="value"&&!yl(xe)&&r(D,xe,null,H[xe],$,E.children,N,V,Me);"value"in H&&r(D,"value",null,H.value,$),(B=H.onVnodeBeforeMount)&&Kn(B,N,E)}ie&&ls(E,null,N,"beforeMount");const me=ax(V,ce);me&&ce.beforeEnter(D),i(D,T,U),((B=H&&H.onVnodeMounted)||me||ie)&&gn(()=>{B&&Kn(B,N,E),me&&ce.enter(D),ie&&ls(E,null,N,"mounted")},V)},A=(E,T,U,N,V)=>{if(U&&f(E,U),N)for(let $=0;$<N.length;$++)f(E,N[$]);if(V){let $=V.subTree;if(T===$){const w=V.vnode;A(E,w,w.scopeId,w.slotScopeIds,V.parent)}}},O=(E,T,U,N,V,$,w,b,D=0)=>{for(let B=D;B<E.length;B++){const H=E[B]=b?zi(E[B]):Qn(E[B]);y(null,H,T,U,N,V,$,w,b)}},S=(E,T,U,N,V,$,w)=>{const b=T.el=E.el;let{patchFlag:D,dynamicChildren:B,dirs:H}=T;D|=E.patchFlag&16;const Y=E.props||bt,ce=T.props||bt;let ie;if(U&&cs(U,!1),(ie=ce.onVnodeBeforeUpdate)&&Kn(ie,U,T,E),H&&ls(T,E,U,"beforeUpdate"),U&&cs(U,!0),B?C(E.dynamicChildren,B,b,U,N,Yc(T,V),$):w||Q(E,T,b,null,U,N,Yc(T,V),$,!1),D>0){if(D&16)G(b,T,Y,ce,U,N,V);else if(D&2&&Y.class!==ce.class&&r(b,"class",null,ce.class,V),D&4&&r(b,"style",Y.style,ce.style,V),D&8){const me=T.dynamicProps;for(let xe=0;xe<me.length;xe++){const Ce=me[xe],se=Y[Ce],He=ce[Ce];(He!==se||Ce==="value")&&r(b,Ce,se,He,V,E.children,U,N,Me)}}D&1&&E.children!==T.children&&h(b,T.children)}else!w&&B==null&&G(b,T,Y,ce,U,N,V);((ie=ce.onVnodeUpdated)||H)&&gn(()=>{ie&&Kn(ie,U,T,E),H&&ls(T,E,U,"updated")},N)},C=(E,T,U,N,V,$,w)=>{for(let b=0;b<T.length;b++){const D=E[b],B=T[b],H=D.el&&(D.type===Bt||!jr(D,B)||D.shapeFlag&70)?u(D.el):U;y(D,B,H,null,N,V,$,w,!0)}},G=(E,T,U,N,V,$,w)=>{if(U!==N){if(U!==bt)for(const b in U)!yl(b)&&!(b in N)&&r(E,b,U[b],null,w,T.children,V,$,Me);for(const b in N){if(yl(b))continue;const D=N[b],B=U[b];D!==B&&b!=="value"&&r(E,b,B,D,w,T.children,V,$,Me)}"value"in N&&r(E,"value",U.value,N.value,w)}},J=(E,T,U,N,V,$,w,b,D)=>{const B=T.el=E?E.el:a(""),H=T.anchor=E?E.anchor:a("");let{patchFlag:Y,dynamicChildren:ce,slotScopeIds:ie}=T;ie&&(b=b?b.concat(ie):ie),E==null?(i(B,U,N),i(H,U,N),O(T.children||[],U,H,V,$,w,b,D)):Y>0&&Y&64&&ce&&E.dynamicChildren?(C(E.dynamicChildren,ce,U,V,$,w,b),(T.key!=null||V&&T===V.subTree)&&kg(E,T,!0)):Q(E,T,U,H,V,$,w,b,D)},de=(E,T,U,N,V,$,w,b,D)=>{T.slotScopeIds=b,E==null?T.shapeFlag&512?V.ctx.activate(T,U,N,w,D):F(T,U,N,V,$,w,D):q(E,T,D)},F=(E,T,U,N,V,$,w)=>{const b=E.component=vx(E,N,V);if(Cg(E)&&(b.ctx.renderer=ae),xx(b),b.asyncDep){if(V&&V.registerDep(b,X),!E.el){const D=b.subTree=vt(Ao);p(null,D,T,U)}}else X(b,E,T,U,V,$,w)},q=(E,T,U)=>{const N=T.component=E.component;if(S0(E,T,U))if(N.asyncDep&&!N.asyncResolved){te(N,T,U);return}else N.next=T,_0(N.update),N.effect.dirty=!0,N.update();else T.el=E.el,N.vnode=T},X=(E,T,U,N,V,$,w)=>{const b=()=>{if(E.isMounted){let{next:H,bu:Y,u:ce,parent:ie,vnode:me}=E;{const Ve=Bg(E);if(Ve){H&&(H.el=me.el,te(E,H,w)),Ve.asyncDep.then(()=>{E.isUnmounted||b()});return}}let xe=H,Ce;cs(E,!1),H?(H.el=me.el,te(E,H,w)):H=me,Y&&Wc(Y),(Ce=H.props&&H.props.onVnodeBeforeUpdate)&&Kn(Ce,ie,H,me),cs(E,!0);const se=Xc(E),He=E.subTree;E.subTree=se,y(He,se,u(He.el),z(He),E,V,$),H.el=se.el,xe===null&&E0(E,se.el),ce&&gn(ce,V),(Ce=H.props&&H.props.onVnodeUpdated)&&gn(()=>Kn(Ce,ie,H,me),V)}else{let H;const{el:Y,props:ce}=T,{bm:ie,m:me,parent:xe}=E,Ce=_l(T);if(cs(E,!1),ie&&Wc(ie),!Ce&&(H=ce&&ce.onVnodeBeforeMount)&&Kn(H,xe,T),cs(E,!0),Y&&L){const se=()=>{E.subTree=Xc(E),L(Y,E.subTree,E,V,null)};Ce?T.type.__asyncLoader().then(()=>!E.isUnmounted&&se()):se()}else{const se=E.subTree=Xc(E);y(null,se,U,N,E,V,$),T.el=se.el}if(me&&gn(me,V),!Ce&&(H=ce&&ce.onVnodeMounted)){const se=T;gn(()=>Kn(H,xe,se),V)}(T.shapeFlag&256||xe&&_l(xe.vnode)&&xe.vnode.shapeFlag&256)&&E.a&&gn(E.a,V),E.isMounted=!0,T=U=N=null}},D=E.effect=new Ju(b,Dn,()=>cd(B),E.scope),B=E.update=()=>{D.dirty&&D.run()};B.id=E.uid,cs(E,!0),B()},te=(E,T,U)=>{T.component=E;const N=E.vnode.props;E.vnode=T,E.next=null,nx(E,T.props,N,U),rx(E,T.children,U),Gs(),Rf(E),Ws()},Q=(E,T,U,N,V,$,w,b,D=!1)=>{const B=E&&E.children,H=E?E.shapeFlag:0,Y=T.children,{patchFlag:ce,shapeFlag:ie}=T;if(ce>0){if(ce&128){he(B,Y,U,N,V,$,w,b,D);return}else if(ce&256){re(B,Y,U,N,V,$,w,b,D);return}}ie&8?(H&16&&Me(B,V,$),Y!==B&&h(U,Y)):H&16?ie&16?he(B,Y,U,N,V,$,w,b,D):Me(B,V,$,!0):(H&8&&h(U,""),ie&16&&O(Y,U,N,V,$,w,b,D))},re=(E,T,U,N,V,$,w,b,D)=>{E=E||Mr,T=T||Mr;const B=E.length,H=T.length,Y=Math.min(B,H);let ce;for(ce=0;ce<Y;ce++){const ie=T[ce]=D?zi(T[ce]):Qn(T[ce]);y(E[ce],ie,U,null,V,$,w,b,D)}B>H?Me(E,V,$,!0,!1,Y):O(T,U,N,V,$,w,b,D,Y)},he=(E,T,U,N,V,$,w,b,D)=>{let B=0;const H=T.length;let Y=E.length-1,ce=H-1;for(;B<=Y&&B<=ce;){const ie=E[B],me=T[B]=D?zi(T[B]):Qn(T[B]);if(jr(ie,me))y(ie,me,U,null,V,$,w,b,D);else break;B++}for(;B<=Y&&B<=ce;){const ie=E[Y],me=T[ce]=D?zi(T[ce]):Qn(T[ce]);if(jr(ie,me))y(ie,me,U,null,V,$,w,b,D);else break;Y--,ce--}if(B>Y){if(B<=ce){const ie=ce+1,me=ie<H?T[ie].el:N;for(;B<=ce;)y(null,T[B]=D?zi(T[B]):Qn(T[B]),U,me,V,$,w,b,D),B++}}else if(B>ce)for(;B<=Y;)ge(E[B],V,$,!0),B++;else{const ie=B,me=B,xe=new Map;for(B=me;B<=ce;B++){const De=T[B]=D?zi(T[B]):Qn(T[B]);De.key!=null&&xe.set(De.key,B)}let Ce,se=0;const He=ce-me+1;let Ve=!1,Fe=0;const Ie=new Array(He);for(B=0;B<He;B++)Ie[B]=0;for(B=ie;B<=Y;B++){const De=E[B];if(se>=He){ge(De,V,$,!0);continue}let Ze;if(De.key!=null)Ze=xe.get(De.key);else for(Ce=me;Ce<=ce;Ce++)if(Ie[Ce-me]===0&&jr(De,T[Ce])){Ze=Ce;break}Ze===void 0?ge(De,V,$,!0):(Ie[Ze-me]=B+1,Ze>=Fe?Fe=Ze:Ve=!0,y(De,T[Ze],U,null,V,$,w,b,D),se++)}const Re=Ve?lx(Ie):Mr;for(Ce=Re.length-1,B=He-1;B>=0;B--){const De=me+B,Ze=T[De],_t=De+1<H?T[De+1].el:N;Ie[B]===0?y(null,Ze,U,_t,V,$,w,b,D):Ve&&(Ce<0||B!==Re[Ce]?pe(Ze,U,_t,2):Ce--)}}},pe=(E,T,U,N,V=null)=>{const{el:$,type:w,transition:b,children:D,shapeFlag:B}=E;if(B&6){pe(E.component.subTree,T,U,N);return}if(B&128){E.suspense.move(T,U,N);return}if(B&64){w.move(E,T,U,ae);return}if(w===Bt){i($,T,U);for(let Y=0;Y<D.length;Y++)pe(D[Y],T,U,N);i(E.anchor,T,U);return}if(w===fo){_(E,T,U);return}if(N!==2&&B&1&&b)if(N===0)b.beforeEnter($),i($,T,U),gn(()=>b.enter($),V);else{const{leave:Y,delayLeave:ce,afterLeave:ie}=b,me=()=>i($,T,U),xe=()=>{Y($,()=>{me(),ie&&ie()})};ce?ce($,me,xe):xe()}else i($,T,U)},ge=(E,T,U,N=!1,V=!1)=>{const{type:$,props:w,ref:b,children:D,dynamicChildren:B,shapeFlag:H,patchFlag:Y,dirs:ce}=E;if(b!=null&&$h(b,null,U,E,!0),H&256){T.ctx.deactivate(E);return}const ie=H&1&&ce,me=!_l(E);let xe;if(me&&(xe=w&&w.onVnodeBeforeUnmount)&&Kn(xe,T,E),H&6)be(E.component,U,N);else{if(H&128){E.suspense.unmount(U,N);return}ie&&ls(E,null,T,"beforeUnmount"),H&64?E.type.remove(E,T,U,V,ae,N):B&&($!==Bt||Y>0&&Y&64)?Me(B,T,U,!1,!0):($===Bt&&Y&384||!V&&H&16)&&Me(D,T,U),N&&ne(E)}(me&&(xe=w&&w.onVnodeUnmounted)||ie)&&gn(()=>{xe&&Kn(xe,T,E),ie&&ls(E,null,T,"unmounted")},U)},ne=E=>{const{type:T,el:U,anchor:N,transition:V}=E;if(T===Bt){fe(U,N);return}if(T===fo){x(E);return}const $=()=>{s(U),V&&!V.persisted&&V.afterLeave&&V.afterLeave()};if(E.shapeFlag&1&&V&&!V.persisted){const{leave:w,delayLeave:b}=V,D=()=>w(U,$);b?b(E.el,$,D):D()}else $()},fe=(E,T)=>{let U;for(;E!==T;)U=d(E),s(E),E=U;s(T)},be=(E,T,U)=>{const{bum:N,scope:V,update:$,subTree:w,um:b}=E;N&&Wc(N),V.stop(),$&&($.active=!1,ge(w,E,T,U)),b&&gn(b,T),gn(()=>{E.isUnmounted=!0},T),T&&T.pendingBranch&&!T.isUnmounted&&E.asyncDep&&!E.asyncResolved&&E.suspenseId===T.pendingId&&(T.deps--,T.deps===0&&T.resolve())},Me=(E,T,U,N=!1,V=!1,$=0)=>{for(let w=$;w<E.length;w++)ge(E[w],T,U,N,V)},z=E=>E.shapeFlag&6?z(E.component.subTree):E.shapeFlag&128?E.suspense.next():d(E.anchor||E.el);let le=!1;const oe=(E,T,U)=>{E==null?T._vnode&&ge(T._vnode,null,null,!0):y(T._vnode||null,E,T,null,null,null,U),le||(le=!0,Rf(),Mg(),le=!1),T._vnode=E},ae={p:y,um:ge,m:pe,r:ne,mt:F,mc:O,pc:Q,pbc:C,n:z,o:n};let we,L;return e&&([we,L]=e(ae)),{render:oe,hydrate:we,createApp:ex(oe,we)}}function Yc({type:n,props:e},t){return t==="svg"&&n==="foreignObject"||t==="mathml"&&n==="annotation-xml"&&e&&e.encoding&&e.encoding.includes("html")?void 0:t}function cs({effect:n,update:e},t){n.allowRecurse=e.allowRecurse=t}function ax(n,e){return(!n||n&&!n.pendingBranch)&&e&&!e.persisted}function kg(n,e,t=!1){const i=n.children,s=e.children;if(ze(i)&&ze(s))for(let r=0;r<i.length;r++){const o=i[r];let a=s[r];a.shapeFlag&1&&!a.dynamicChildren&&((a.patchFlag<=0||a.patchFlag===32)&&(a=s[r]=zi(s[r]),a.el=o.el),t||kg(o,a)),a.type===sc&&(a.el=o.el)}}function lx(n){const e=n.slice(),t=[0];let i,s,r,o,a;const l=n.length;for(i=0;i<l;i++){const c=n[i];if(c!==0){if(s=t[t.length-1],n[s]<c){e[i]=s,t.push(i);continue}for(r=0,o=t.length-1;r<o;)a=r+o>>1,n[t[a]]<c?r=a+1:o=a;c<n[t[r]]&&(r>0&&(e[i]=t[r-1]),t[r]=i)}}for(r=t.length,o=t[r-1];r-- >0;)t[r]=o,o=e[o];return t}function Bg(n){const e=n.subTree.component;if(e)return e.asyncDep&&!e.asyncResolved?e:Bg(e)}const cx=n=>n.__isTeleport,Bt=Symbol.for("v-fgt"),sc=Symbol.for("v-txt"),Ao=Symbol.for("v-cmt"),fo=Symbol.for("v-stc"),po=[];let zn=null;function rt(n=!1){po.push(zn=n?null:[])}function hx(){po.pop(),zn=po[po.length-1]||null}let Co=1;function zf(n){Co+=n}function ux(n){return n.dynamicChildren=Co>0?zn||Mr:null,hx(),Co>0&&zn&&zn.push(n),n}function ot(n,e,t,i,s,r){return ux(ye(n,e,t,i,s,r,!0))}function Yh(n){return n?n.__v_isVNode===!0:!1}function jr(n,e){return n.type===e.type&&n.key===e.key}const rc="__vInternal",zg=({key:n})=>n??null,vl=({ref:n,ref_key:e,ref_for:t})=>(typeof n=="number"&&(n=""+n),n!=null?Vt(n)||Zt(n)||je(n)?{i:Un,r:n,k:e,f:!!t}:n:null);function ye(n,e=null,t=null,i=0,s=null,r=n===Bt?0:1,o=!1,a=!1){const l={__v_isVNode:!0,__v_skip:!0,type:n,props:e,key:e&&zg(e),ref:e&&vl(e),scopeId:tc,slotScopeIds:null,children:t,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:r,patchFlag:i,dynamicProps:s,dynamicChildren:null,appContext:null,ctx:Un};return a?(dd(l,t),r&128&&n.normalize(l)):t&&(l.shapeFlag|=Vt(t)?8:16),Co>0&&!o&&zn&&(l.patchFlag>0||r&6)&&l.patchFlag!==32&&zn.push(l),l}const vt=dx;function dx(n,e=null,t=null,i=0,s=null,r=!1){if((!n||n===T0)&&(n=Ao),Yh(n)){const a=Pr(n,e,!0);return t&&dd(a,t),Co>0&&!r&&zn&&(a.shapeFlag&6?zn[zn.indexOf(n)]=a:zn.push(a)),a.patchFlag|=-2,a}if(Sx(n)&&(n=n.__vccOpts),e){e=fx(e);let{class:a,style:l}=e;a&&!Vt(a)&&(e.class=Zl(a)),Mt(l)&&(yg(l)&&!ze(l)&&(l=jt({},l)),e.style=jl(l))}const o=Vt(n)?1:C0(n)?128:cx(n)?64:Mt(n)?4:je(n)?2:0;return ye(n,e,t,i,s,o,r,!0)}function fx(n){return n?yg(n)||rc in n?jt({},n):n:null}function Pr(n,e,t=!1){const{props:i,ref:s,patchFlag:r,children:o}=n,a=e?gx(i||{},e):i;return{__v_isVNode:!0,__v_skip:!0,type:n.type,props:a,key:a&&zg(a),ref:e&&e.ref?t&&s?ze(s)?s.concat(vl(e)):[s,vl(e)]:vl(e):s,scopeId:n.scopeId,slotScopeIds:n.slotScopeIds,children:o,target:n.target,targetAnchor:n.targetAnchor,staticCount:n.staticCount,shapeFlag:n.shapeFlag,patchFlag:e&&n.type!==Bt?r===-1?16:r|16:r,dynamicProps:n.dynamicProps,dynamicChildren:n.dynamicChildren,appContext:n.appContext,dirs:n.dirs,transition:n.transition,component:n.component,suspense:n.suspense,ssContent:n.ssContent&&Pr(n.ssContent),ssFallback:n.ssFallback&&Pr(n.ssFallback),el:n.el,anchor:n.anchor,ctx:n.ctx,ce:n.ce}}function px(n=" ",e=0){return vt(sc,null,n,e)}function mx(n,e){const t=vt(fo,null,n);return t.staticCount=e,t}function Qn(n){return n==null||typeof n=="boolean"?vt(Ao):ze(n)?vt(Bt,null,n.slice()):typeof n=="object"?zi(n):vt(sc,null,String(n))}function zi(n){return n.el===null&&n.patchFlag!==-1||n.memo?n:Pr(n)}function dd(n,e){let t=0;const{shapeFlag:i}=n;if(e==null)e=null;else if(ze(e))t=16;else if(typeof e=="object")if(i&65){const s=e.default;s&&(s._c&&(s._d=!1),dd(n,s()),s._c&&(s._d=!0));return}else{t=32;const s=e._;!s&&!(rc in e)?e._ctx=Un:s===3&&Un&&(Un.slots._===1?e._=1:(e._=2,n.patchFlag|=1024))}else je(e)?(e={default:e,_ctx:Un},t=32):(e=String(e),i&64?(t=16,e=[px(e)]):t=8);n.children=e,n.shapeFlag|=t}function gx(...n){const e={};for(let t=0;t<n.length;t++){const i=n[t];for(const s in i)if(s==="class")e.class!==i.class&&(e.class=Zl([e.class,i.class]));else if(s==="style")e.style=jl([e.style,i.style]);else if(ql(s)){const r=e[s],o=i[s];o&&r!==o&&!(ze(r)&&r.includes(o))&&(e[s]=r?[].concat(r,o):o)}else s!==""&&(e[s]=i[s])}return e}function Kn(n,e,t,i=null){Wn(n,e,7,[t,i])}const yx=Ig();let _x=0;function vx(n,e,t){const i=n.type,s=(e?e.appContext:n.appContext)||yx,r={uid:_x++,vnode:n,type:i,parent:e,appContext:s,root:null,next:null,subTree:null,effect:null,update:null,scope:new ig(!0),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:e?e.provides:Object.create(s.provides),accessCache:null,renderCache:[],components:null,directives:null,propsOptions:Dg(i,s),emitsOptions:Eg(i,s),emit:null,emitted:null,propsDefaults:bt,inheritAttrs:i.inheritAttrs,ctx:bt,data:bt,props:bt,attrs:bt,slots:bt,refs:bt,setupState:bt,setupContext:null,attrsProxy:null,slotsProxy:null,suspense:t,suspenseId:t?t.pendingId:0,asyncDep:null,asyncResolved:!1,isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};return r.ctx={_:r},r.root=e?e.root:r,r.emit=b0.bind(null,r),n.ce&&n.ce(r),r}let Yt=null;const Ir=()=>Yt||Un;let Ol,jh;{const n=eg(),e=(t,i)=>{let s;return(s=n[t])||(s=n[t]=[]),s.push(i),r=>{s.length>1?s.forEach(o=>o(r)):s[0](r)}};Ol=e("__VUE_INSTANCE_SETTERS__",t=>Yt=t),jh=e("__VUE_SSR_SETTERS__",t=>oc=t)}const ea=n=>{const e=Yt;return Ol(n),n.scope.on(),()=>{n.scope.off(),Ol(e)}},Vf=()=>{Yt&&Yt.scope.off(),Ol(null)};function Vg(n){return n.vnode.shapeFlag&4}let oc=!1;function xx(n,e=!1){e&&jh(e);const{props:t,children:i}=n.vnode,s=Vg(n);tx(n,t,s,e),sx(n,i);const r=s?bx(n,e):void 0;return e&&jh(!1),r}function bx(n,e){const t=n.type;n.accessCache=Object.create(null),n.proxy=sd(new Proxy(n.ctx,q0));const{setup:i}=t;if(i){const s=n.setupContext=i.length>1?Gg(n):null,r=ea(n);Gs();const o=Xi(i,n,0,[n.props,s]);if(Ws(),r(),Km(o)){if(o.then(Vf,Vf),e)return o.then(a=>{Hf(n,a,e)}).catch(a=>{Ql(a,n,0)});n.asyncDep=o}else Hf(n,o,e)}else Hg(n,e)}function Hf(n,e,t){je(e)?n.type.__ssrInlineRender?n.ssrRender=e:n.render=e:Mt(e)&&(n.setupState=xg(e)),Hg(n,t)}let Gf;function Hg(n,e,t){const i=n.type;if(!n.render){if(!e&&Gf&&!i.render){const s=i.template||hd(n).template;if(s){const{isCustomElement:r,compilerOptions:o}=n.appContext.config,{delimiters:a,compilerOptions:l}=i,c=jt(jt({isCustomElement:r,delimiters:a},o),l);i.render=Gf(s,c)}}n.render=i.render||Dn}{const s=ea(n);Gs();try{Y0(n)}finally{Ws(),s()}}}function wx(n){return n.attrsProxy||(n.attrsProxy=new Proxy(n.attrs,{get(e,t){return wn(n,"get","$attrs"),e[t]}}))}function Gg(n){const e=t=>{n.exposed=t||{}};return{get attrs(){return wx(n)},slots:n.slots,emit:n.emit,expose:e}}function fd(n){if(n.exposed)return n.exposeProxy||(n.exposeProxy=new Proxy(xg(sd(n.exposed)),{get(e,t){if(t in e)return e[t];if(t in uo)return uo[t](n)},has(e,t){return t in e||t in uo}}))}function Mx(n,e=!0){return je(n)?n.displayName||n.name:n.name||e&&n.__name}function Sx(n){return je(n)&&"__vccOpts"in n}const wt=(n,e)=>l0(n,e,oc);function Fl(n,e,t){const i=arguments.length;return i===2?Mt(e)&&!ze(e)?Yh(e)?vt(n,null,[e]):vt(n,e):vt(n,null,e):(i>3?t=Array.prototype.slice.call(arguments,2):i===3&&Yh(t)&&(t=[t]),vt(n,e,t))}const Ex="3.4.14";/**
* @vue/runtime-dom v3.4.14
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const Tx="http://www.w3.org/2000/svg",Ax="http://www.w3.org/1998/Math/MathML",Vi=typeof document<"u"?document:null,Wf=Vi&&Vi.createElement("template"),Cx={insert:(n,e,t)=>{e.insertBefore(n,t||null)},remove:n=>{const e=n.parentNode;e&&e.removeChild(n)},createElement:(n,e,t,i)=>{const s=e==="svg"?Vi.createElementNS(Tx,n):e==="mathml"?Vi.createElementNS(Ax,n):Vi.createElement(n,t?{is:t}:void 0);return n==="select"&&i&&i.multiple!=null&&s.setAttribute("multiple",i.multiple),s},createText:n=>Vi.createTextNode(n),createComment:n=>Vi.createComment(n),setText:(n,e)=>{n.nodeValue=e},setElementText:(n,e)=>{n.textContent=e},parentNode:n=>n.parentNode,nextSibling:n=>n.nextSibling,querySelector:n=>Vi.querySelector(n),setScopeId(n,e){n.setAttribute(e,"")},insertStaticContent(n,e,t,i,s,r){const o=t?t.previousSibling:e.lastChild;if(s&&(s===r||s.nextSibling))for(;e.insertBefore(s.cloneNode(!0),t),!(s===r||!(s=s.nextSibling)););else{Wf.innerHTML=i==="svg"?`<svg>${n}</svg>`:i==="mathml"?`<math>${n}</math>`:n;const a=Wf.content;if(i==="svg"||i==="mathml"){const l=a.firstChild;for(;l.firstChild;)a.appendChild(l.firstChild);a.removeChild(l)}e.insertBefore(a,t)}return[o?o.nextSibling:e.firstChild,t?t.previousSibling:e.lastChild]}},Rx=Symbol("_vtc");function Px(n,e,t){const i=n[Rx];i&&(e=(e?[e,...i]:[...i]).join(" ")),e==null?n.removeAttribute("class"):t?n.setAttribute("class",e):n.className=e}const Ix=Symbol("_vod"),Wg=Symbol("");function Pn(n){const e=Ir();if(!e)return;const t=e.ut=(s=n(e.proxy))=>{Array.from(document.querySelectorAll(`[data-v-owner="${e.uid}"]`)).forEach(r=>Kh(r,s))},i=()=>{const s=n(e.proxy);Zh(e.subTree,s),t(s)};L0(i),Qo(()=>{const s=new MutationObserver(i);s.observe(e.subTree.el.parentNode,{childList:!0}),qs(()=>s.disconnect())})}function Zh(n,e){if(n.shapeFlag&128){const t=n.suspense;n=t.activeBranch,t.pendingBranch&&!t.isHydrating&&t.effects.push(()=>{Zh(t.activeBranch,e)})}for(;n.component;)n=n.component.subTree;if(n.shapeFlag&1&&n.el)Kh(n.el,e);else if(n.type===Bt)n.children.forEach(t=>Zh(t,e));else if(n.type===fo){let{el:t,anchor:i}=n;for(;t&&(Kh(t,e),t!==i);)t=t.nextSibling}}function Kh(n,e){if(n.nodeType===1){const t=n.style;let i="";for(const s in e)t.setProperty(`--${s}`,e[s]),i+=`--${s}: ${e[s]};`;t[Wg]=i}}function Lx(n,e,t){const i=n.style,s=i.display,r=Vt(t);if(t&&!r){if(e&&!Vt(e))for(const o in e)t[o]==null&&Jh(i,o,"");for(const o in t)Jh(i,o,t[o])}else if(r){if(e!==t){const o=i[Wg];o&&(t+=";"+o),i.cssText=t}}else e&&n.removeAttribute("style");Ix in n&&(i.display=s)}const qf=/\s*!important$/;function Jh(n,e,t){if(ze(t))t.forEach(i=>Jh(n,e,i));else if(t==null&&(t=""),e.startsWith("--"))n.setProperty(e,t);else{const i=Dx(n,e);qf.test(t)?n.setProperty(zr(i),t.replace(qf,""),"important"):n[i]=t}}const Xf=["Webkit","Moz","ms"],jc={};function Dx(n,e){const t=jc[e];if(t)return t;let i=si(e);if(i!=="filter"&&i in n)return jc[e]=i;i=Yl(i);for(let s=0;s<Xf.length;s++){const r=Xf[s]+i;if(r in n)return jc[e]=r}return e}const $f="http://www.w3.org/1999/xlink";function Ux(n,e,t,i,s){if(i&&e.startsWith("xlink:"))t==null?n.removeAttributeNS($f,e.slice(6,e.length)):n.setAttributeNS($f,e,t);else{const r=kv(e);t==null||r&&!tg(t)?n.removeAttribute(e):n.setAttribute(e,r?"":t)}}function Nx(n,e,t,i,s,r,o){if(e==="innerHTML"||e==="textContent"){i&&o(i,s,r),n[e]=t??"";return}const a=n.tagName;if(e==="value"&&a!=="PROGRESS"&&!a.includes("-")){n._value=t;const c=a==="OPTION"?n.getAttribute("value"):n.value,h=t??"";c!==h&&(n.value=h),t==null&&n.removeAttribute(e);return}let l=!1;if(t===""||t==null){const c=typeof n[e];c==="boolean"?t=tg(t):t==null&&c==="string"?(t="",l=!0):c==="number"&&(t=0,l=!0)}try{n[e]=t}catch{}l&&n.removeAttribute(e)}function Ox(n,e,t,i){n.addEventListener(e,t,i)}function Fx(n,e,t,i){n.removeEventListener(e,t,i)}const Yf=Symbol("_vei");function kx(n,e,t,i,s=null){const r=n[Yf]||(n[Yf]={}),o=r[e];if(i&&o)o.value=i;else{const[a,l]=Bx(e);if(i){const c=r[e]=Hx(i,s);Ox(n,a,c,l)}else o&&(Fx(n,a,o,l),r[e]=void 0)}}const jf=/(?:Once|Passive|Capture)$/;function Bx(n){let e;if(jf.test(n)){e={};let i;for(;i=n.match(jf);)n=n.slice(0,n.length-i[0].length),e[i[0].toLowerCase()]=!0}return[n[2]===":"?n.slice(3):zr(n.slice(2)),e]}let Zc=0;const zx=Promise.resolve(),Vx=()=>Zc||(zx.then(()=>Zc=0),Zc=Date.now());function Hx(n,e){const t=i=>{if(!i._vts)i._vts=Date.now();else if(i._vts<=t.attached)return;Wn(Gx(i,t.value),e,5,[i])};return t.value=n,t.attached=Vx(),t}function Gx(n,e){if(ze(e)){const t=n.stopImmediatePropagation;return n.stopImmediatePropagation=()=>{t.call(n),n._stopped=!0},e.map(i=>s=>!s._stopped&&i&&i(s))}else return e}const Zf=n=>n.charCodeAt(0)===111&&n.charCodeAt(1)===110&&n.charCodeAt(2)>96&&n.charCodeAt(2)<123,Wx=(n,e,t,i,s,r,o,a,l)=>{const c=s==="svg";e==="class"?Px(n,i,c):e==="style"?Lx(n,t,i):ql(e)?ju(e)||kx(n,e,t,i,o):(e[0]==="."?(e=e.slice(1),!0):e[0]==="^"?(e=e.slice(1),!1):qx(n,e,i,c))?Nx(n,e,i,r,o,a,l):(e==="true-value"?n._trueValue=i:e==="false-value"&&(n._falseValue=i),Ux(n,e,i,c))};function qx(n,e,t,i){if(i)return!!(e==="innerHTML"||e==="textContent"||e in n&&Zf(e)&&je(t));if(e==="spellcheck"||e==="draggable"||e==="translate"||e==="form"||e==="list"&&n.tagName==="INPUT"||e==="type"&&n.tagName==="TEXTAREA")return!1;if(e==="width"||e==="height"){const s=n.tagName;if(s==="IMG"||s==="VIDEO"||s==="CANVAS"||s==="SOURCE")return!1}return Zf(e)&&Vt(t)?!1:e in n}const Xx=jt({patchProp:Wx},Cx);let Kf;function $x(){return Kf||(Kf=Fg(Xx))}const Yx=(...n)=>{const e=$x().createApp(...n),{mount:t}=e;return e.mount=i=>{const s=Zx(i);if(!s)return;const r=e._component;!je(r)&&!r.render&&!r.template&&(r.template=s.innerHTML),s.innerHTML="";const o=t(s,!1,jx(s));return s instanceof Element&&(s.removeAttribute("v-cloak"),s.setAttribute("data-v-app","")),o},e};function jx(n){if(n instanceof SVGElement)return"svg";if(typeof MathMLElement=="function"&&n instanceof MathMLElement)return"mathml"}function Zx(n){return Vt(n)?document.querySelector(n):n}var Kx=!1;/*!
 * pinia v2.1.7
 * (c) 2023 Eduardo San Martin Morote
 * @license MIT
 */const Jx=Symbol();var Jf;(function(n){n.direct="direct",n.patchObject="patch object",n.patchFunction="patch function"})(Jf||(Jf={}));function Qx(){const n=Bv(!0),e=n.run(()=>et({}));let t=[],i=[];const s=sd({install(r){s._a=r,r.provide(Jx,s),r.config.globalProperties.$pinia=s,i.forEach(o=>t.push(o)),i=[]},use(r){return!this._a&&!Kx?i.push(r):t.push(r),this},_p:t,_a:null,_e:n,_s:new Map,state:e});return s}/*!
  * vue-router v4.2.5
  * (c) 2023 Eduardo San Martin Morote
  * @license MIT
  */const gr=typeof window<"u";function eb(n){return n.__esModule||n[Symbol.toStringTag]==="Module"}const ht=Object.assign;function Kc(n,e){const t={};for(const i in e){const s=e[i];t[i]=Xn(s)?s.map(n):n(s)}return t}const mo=()=>{},Xn=Array.isArray,tb=/\/$/,nb=n=>n.replace(tb,"");function Jc(n,e,t="/"){let i,s={},r="",o="";const a=e.indexOf("#");let l=e.indexOf("?");return a<l&&a>=0&&(l=-1),l>-1&&(i=e.slice(0,l),r=e.slice(l+1,a>-1?a:e.length),s=n(r)),a>-1&&(i=i||e.slice(0,a),o=e.slice(a,e.length)),i=ob(i??e,t),{fullPath:i+(r&&"?")+r+o,path:i,query:s,hash:o}}function ib(n,e){const t=e.query?n(e.query):"";return e.path+(t&&"?")+t+(e.hash||"")}function Qf(n,e){return!e||!n.toLowerCase().startsWith(e.toLowerCase())?n:n.slice(e.length)||"/"}function sb(n,e,t){const i=e.matched.length-1,s=t.matched.length-1;return i>-1&&i===s&&Lr(e.matched[i],t.matched[s])&&qg(e.params,t.params)&&n(e.query)===n(t.query)&&e.hash===t.hash}function Lr(n,e){return(n.aliasOf||n)===(e.aliasOf||e)}function qg(n,e){if(Object.keys(n).length!==Object.keys(e).length)return!1;for(const t in n)if(!rb(n[t],e[t]))return!1;return!0}function rb(n,e){return Xn(n)?ep(n,e):Xn(e)?ep(e,n):n===e}function ep(n,e){return Xn(e)?n.length===e.length&&n.every((t,i)=>t===e[i]):n.length===1&&n[0]===e}function ob(n,e){if(n.startsWith("/"))return n;if(!n)return e;const t=e.split("/"),i=n.split("/"),s=i[i.length-1];(s===".."||s===".")&&i.push("");let r=t.length-1,o,a;for(o=0;o<i.length;o++)if(a=i[o],a!==".")if(a==="..")r>1&&r--;else break;return t.slice(0,r).join("/")+"/"+i.slice(o-(o===i.length?1:0)).join("/")}var Ro;(function(n){n.pop="pop",n.push="push"})(Ro||(Ro={}));var go;(function(n){n.back="back",n.forward="forward",n.unknown=""})(go||(go={}));function ab(n){if(!n)if(gr){const e=document.querySelector("base");n=e&&e.getAttribute("href")||"/",n=n.replace(/^\w+:\/\/[^\/]+/,"")}else n="/";return n[0]!=="/"&&n[0]!=="#"&&(n="/"+n),nb(n)}const lb=/^[^#]+#/;function cb(n,e){return n.replace(lb,"#")+e}function hb(n,e){const t=document.documentElement.getBoundingClientRect(),i=n.getBoundingClientRect();return{behavior:e.behavior,left:i.left-t.left-(e.left||0),top:i.top-t.top-(e.top||0)}}const ac=()=>({left:window.pageXOffset,top:window.pageYOffset});function ub(n){let e;if("el"in n){const t=n.el,i=typeof t=="string"&&t.startsWith("#"),s=typeof t=="string"?i?document.getElementById(t.slice(1)):document.querySelector(t):t;if(!s)return;e=hb(s,n)}else e=n;"scrollBehavior"in document.documentElement.style?window.scrollTo(e):window.scrollTo(e.left!=null?e.left:window.pageXOffset,e.top!=null?e.top:window.pageYOffset)}function tp(n,e){return(history.state?history.state.position-e:-1)+n}const Qh=new Map;function db(n,e){Qh.set(n,e)}function fb(n){const e=Qh.get(n);return Qh.delete(n),e}let pb=()=>location.protocol+"//"+location.host;function Xg(n,e){const{pathname:t,search:i,hash:s}=e,r=n.indexOf("#");if(r>-1){let a=s.includes(n.slice(r))?n.slice(r).length:1,l=s.slice(a);return l[0]!=="/"&&(l="/"+l),Qf(l,"")}return Qf(t,n)+i+s}function mb(n,e,t,i){let s=[],r=[],o=null;const a=({state:d})=>{const f=Xg(n,location),m=t.value,y=e.value;let g=0;if(d){if(t.value=f,e.value=d,o&&o===m){o=null;return}g=y?d.position-y.position:0}else i(f);s.forEach(p=>{p(t.value,m,{delta:g,type:Ro.pop,direction:g?g>0?go.forward:go.back:go.unknown})})};function l(){o=t.value}function c(d){s.push(d);const f=()=>{const m=s.indexOf(d);m>-1&&s.splice(m,1)};return r.push(f),f}function h(){const{history:d}=window;d.state&&d.replaceState(ht({},d.state,{scroll:ac()}),"")}function u(){for(const d of r)d();r=[],window.removeEventListener("popstate",a),window.removeEventListener("beforeunload",h)}return window.addEventListener("popstate",a),window.addEventListener("beforeunload",h,{passive:!0}),{pauseListeners:l,listen:c,destroy:u}}function np(n,e,t,i=!1,s=!1){return{back:n,current:e,forward:t,replaced:i,position:window.history.length,scroll:s?ac():null}}function gb(n){const{history:e,location:t}=window,i={value:Xg(n,t)},s={value:e.state};s.value||r(i.value,{back:null,current:i.value,forward:null,position:e.length-1,replaced:!0,scroll:null},!0);function r(l,c,h){const u=n.indexOf("#"),d=u>-1?(t.host&&document.querySelector("base")?n:n.slice(u))+l:pb()+n+l;try{e[h?"replaceState":"pushState"](c,"",d),s.value=c}catch(f){console.error(f),t[h?"replace":"assign"](d)}}function o(l,c){const h=ht({},e.state,np(s.value.back,l,s.value.forward,!0),c,{position:s.value.position});r(l,h,!0),i.value=l}function a(l,c){const h=ht({},s.value,e.state,{forward:l,scroll:ac()});r(h.current,h,!0);const u=ht({},np(i.value,l,null),{position:h.position+1},c);r(l,u,!1),i.value=l}return{location:i,state:s,push:a,replace:o}}function yb(n){n=ab(n);const e=gb(n),t=mb(n,e.state,e.location,e.replace);function i(r,o=!0){o||t.pauseListeners(),history.go(r)}const s=ht({location:"",base:n,go:i,createHref:cb.bind(null,n)},e,t);return Object.defineProperty(s,"location",{enumerable:!0,get:()=>e.location.value}),Object.defineProperty(s,"state",{enumerable:!0,get:()=>e.state.value}),s}function _b(n){return n=location.host?n||location.pathname+location.search:"",n.includes("#")||(n+="#"),yb(n)}function vb(n){return typeof n=="string"||n&&typeof n=="object"}function $g(n){return typeof n=="string"||typeof n=="symbol"}const Ii={path:"/",name:void 0,params:{},query:{},hash:"",fullPath:"/",matched:[],meta:{},redirectedFrom:void 0},Yg=Symbol("");var ip;(function(n){n[n.aborted=4]="aborted",n[n.cancelled=8]="cancelled",n[n.duplicated=16]="duplicated"})(ip||(ip={}));function Dr(n,e){return ht(new Error,{type:n,[Yg]:!0},e)}function ci(n,e){return n instanceof Error&&Yg in n&&(e==null||!!(n.type&e))}const sp="[^/]+?",xb={sensitive:!1,strict:!1,start:!0,end:!0},bb=/[.+*?^${}()[\]/\\]/g;function wb(n,e){const t=ht({},xb,e),i=[];let s=t.start?"^":"";const r=[];for(const c of n){const h=c.length?[]:[90];t.strict&&!c.length&&(s+="/");for(let u=0;u<c.length;u++){const d=c[u];let f=40+(t.sensitive?.25:0);if(d.type===0)u||(s+="/"),s+=d.value.replace(bb,"\\$&"),f+=40;else if(d.type===1){const{value:m,repeatable:y,optional:g,regexp:p}=d;r.push({name:m,repeatable:y,optional:g});const v=p||sp;if(v!==sp){f+=10;try{new RegExp(`(${v})`)}catch(x){throw new Error(`Invalid custom RegExp for param "${m}" (${v}): `+x.message)}}let _=y?`((?:${v})(?:/(?:${v}))*)`:`(${v})`;u||(_=g&&c.length<2?`(?:/${_})`:"/"+_),g&&(_+="?"),s+=_,f+=20,g&&(f+=-8),y&&(f+=-20),v===".*"&&(f+=-50)}h.push(f)}i.push(h)}if(t.strict&&t.end){const c=i.length-1;i[c][i[c].length-1]+=.7000000000000001}t.strict||(s+="/?"),t.end?s+="$":t.strict&&(s+="(?:/|$)");const o=new RegExp(s,t.sensitive?"":"i");function a(c){const h=c.match(o),u={};if(!h)return null;for(let d=1;d<h.length;d++){const f=h[d]||"",m=r[d-1];u[m.name]=f&&m.repeatable?f.split("/"):f}return u}function l(c){let h="",u=!1;for(const d of n){(!u||!h.endsWith("/"))&&(h+="/"),u=!1;for(const f of d)if(f.type===0)h+=f.value;else if(f.type===1){const{value:m,repeatable:y,optional:g}=f,p=m in c?c[m]:"";if(Xn(p)&&!y)throw new Error(`Provided param "${m}" is an array but it is not repeatable (* or + modifiers)`);const v=Xn(p)?p.join("/"):p;if(!v)if(g)d.length<2&&(h.endsWith("/")?h=h.slice(0,-1):u=!0);else throw new Error(`Missing required param "${m}"`);h+=v}}return h||"/"}return{re:o,score:i,keys:r,parse:a,stringify:l}}function Mb(n,e){let t=0;for(;t<n.length&&t<e.length;){const i=e[t]-n[t];if(i)return i;t++}return n.length<e.length?n.length===1&&n[0]===80?-1:1:n.length>e.length?e.length===1&&e[0]===80?1:-1:0}function Sb(n,e){let t=0;const i=n.score,s=e.score;for(;t<i.length&&t<s.length;){const r=Mb(i[t],s[t]);if(r)return r;t++}if(Math.abs(s.length-i.length)===1){if(rp(i))return 1;if(rp(s))return-1}return s.length-i.length}function rp(n){const e=n[n.length-1];return n.length>0&&e[e.length-1]<0}const Eb={type:0,value:""},Tb=/[a-zA-Z0-9_]/;function Ab(n){if(!n)return[[]];if(n==="/")return[[Eb]];if(!n.startsWith("/"))throw new Error(`Invalid path "${n}"`);function e(f){throw new Error(`ERR (${t})/"${c}": ${f}`)}let t=0,i=t;const s=[];let r;function o(){r&&s.push(r),r=[]}let a=0,l,c="",h="";function u(){c&&(t===0?r.push({type:0,value:c}):t===1||t===2||t===3?(r.length>1&&(l==="*"||l==="+")&&e(`A repeatable param (${c}) must be alone in its segment. eg: '/:ids+.`),r.push({type:1,value:c,regexp:h,repeatable:l==="*"||l==="+",optional:l==="*"||l==="?"})):e("Invalid state to consume buffer"),c="")}function d(){c+=l}for(;a<n.length;){if(l=n[a++],l==="\\"&&t!==2){i=t,t=4;continue}switch(t){case 0:l==="/"?(c&&u(),o()):l===":"?(u(),t=1):d();break;case 4:d(),t=i;break;case 1:l==="("?t=2:Tb.test(l)?d():(u(),t=0,l!=="*"&&l!=="?"&&l!=="+"&&a--);break;case 2:l===")"?h[h.length-1]=="\\"?h=h.slice(0,-1)+l:t=3:h+=l;break;case 3:u(),t=0,l!=="*"&&l!=="?"&&l!=="+"&&a--,h="";break;default:e("Unknown state");break}}return t===2&&e(`Unfinished custom RegExp for param "${c}"`),u(),o(),s}function Cb(n,e,t){const i=wb(Ab(n.path),t),s=ht(i,{record:n,parent:e,children:[],alias:[]});return e&&!s.record.aliasOf==!e.record.aliasOf&&e.children.push(s),s}function Rb(n,e){const t=[],i=new Map;e=lp({strict:!1,end:!0,sensitive:!1},e);function s(h){return i.get(h)}function r(h,u,d){const f=!d,m=Pb(h);m.aliasOf=d&&d.record;const y=lp(e,h),g=[m];if("alias"in h){const _=typeof h.alias=="string"?[h.alias]:h.alias;for(const x of _)g.push(ht({},m,{components:d?d.record.components:m.components,path:x,aliasOf:d?d.record:m}))}let p,v;for(const _ of g){const{path:x}=_;if(u&&x[0]!=="/"){const P=u.record.path,M=P[P.length-1]==="/"?"":"/";_.path=u.record.path+(x&&M+x)}if(p=Cb(_,u,y),d?d.alias.push(p):(v=v||p,v!==p&&v.alias.push(p),f&&h.name&&!ap(p)&&o(h.name)),m.children){const P=m.children;for(let M=0;M<P.length;M++)r(P[M],p,d&&d.children[M])}d=d||p,(p.record.components&&Object.keys(p.record.components).length||p.record.name||p.record.redirect)&&l(p)}return v?()=>{o(v)}:mo}function o(h){if($g(h)){const u=i.get(h);u&&(i.delete(h),t.splice(t.indexOf(u),1),u.children.forEach(o),u.alias.forEach(o))}else{const u=t.indexOf(h);u>-1&&(t.splice(u,1),h.record.name&&i.delete(h.record.name),h.children.forEach(o),h.alias.forEach(o))}}function a(){return t}function l(h){let u=0;for(;u<t.length&&Sb(h,t[u])>=0&&(h.record.path!==t[u].record.path||!jg(h,t[u]));)u++;t.splice(u,0,h),h.record.name&&!ap(h)&&i.set(h.record.name,h)}function c(h,u){let d,f={},m,y;if("name"in h&&h.name){if(d=i.get(h.name),!d)throw Dr(1,{location:h});y=d.record.name,f=ht(op(u.params,d.keys.filter(v=>!v.optional).map(v=>v.name)),h.params&&op(h.params,d.keys.map(v=>v.name))),m=d.stringify(f)}else if("path"in h)m=h.path,d=t.find(v=>v.re.test(m)),d&&(f=d.parse(m),y=d.record.name);else{if(d=u.name?i.get(u.name):t.find(v=>v.re.test(u.path)),!d)throw Dr(1,{location:h,currentLocation:u});y=d.record.name,f=ht({},u.params,h.params),m=d.stringify(f)}const g=[];let p=d;for(;p;)g.unshift(p.record),p=p.parent;return{name:y,path:m,params:f,matched:g,meta:Lb(g)}}return n.forEach(h=>r(h)),{addRoute:r,resolve:c,removeRoute:o,getRoutes:a,getRecordMatcher:s}}function op(n,e){const t={};for(const i of e)i in n&&(t[i]=n[i]);return t}function Pb(n){return{path:n.path,redirect:n.redirect,name:n.name,meta:n.meta||{},aliasOf:void 0,beforeEnter:n.beforeEnter,props:Ib(n),children:n.children||[],instances:{},leaveGuards:new Set,updateGuards:new Set,enterCallbacks:{},components:"components"in n?n.components||null:n.component&&{default:n.component}}}function Ib(n){const e={},t=n.props||!1;if("component"in n)e.default=t;else for(const i in n.components)e[i]=typeof t=="object"?t[i]:t;return e}function ap(n){for(;n;){if(n.record.aliasOf)return!0;n=n.parent}return!1}function Lb(n){return n.reduce((e,t)=>ht(e,t.meta),{})}function lp(n,e){const t={};for(const i in n)t[i]=i in e?e[i]:n[i];return t}function jg(n,e){return e.children.some(t=>t===n||jg(n,t))}const Zg=/#/g,Db=/&/g,Ub=/\//g,Nb=/=/g,Ob=/\?/g,Kg=/\+/g,Fb=/%5B/g,kb=/%5D/g,Jg=/%5E/g,Bb=/%60/g,Qg=/%7B/g,zb=/%7C/g,ey=/%7D/g,Vb=/%20/g;function pd(n){return encodeURI(""+n).replace(zb,"|").replace(Fb,"[").replace(kb,"]")}function Hb(n){return pd(n).replace(Qg,"{").replace(ey,"}").replace(Jg,"^")}function eu(n){return pd(n).replace(Kg,"%2B").replace(Vb,"+").replace(Zg,"%23").replace(Db,"%26").replace(Bb,"`").replace(Qg,"{").replace(ey,"}").replace(Jg,"^")}function Gb(n){return eu(n).replace(Nb,"%3D")}function Wb(n){return pd(n).replace(Zg,"%23").replace(Ob,"%3F")}function qb(n){return n==null?"":Wb(n).replace(Ub,"%2F")}function kl(n){try{return decodeURIComponent(""+n)}catch{}return""+n}function Xb(n){const e={};if(n===""||n==="?")return e;const i=(n[0]==="?"?n.slice(1):n).split("&");for(let s=0;s<i.length;++s){const r=i[s].replace(Kg," "),o=r.indexOf("="),a=kl(o<0?r:r.slice(0,o)),l=o<0?null:kl(r.slice(o+1));if(a in e){let c=e[a];Xn(c)||(c=e[a]=[c]),c.push(l)}else e[a]=l}return e}function cp(n){let e="";for(let t in n){const i=n[t];if(t=Gb(t),i==null){i!==void 0&&(e+=(e.length?"&":"")+t);continue}(Xn(i)?i.map(r=>r&&eu(r)):[i&&eu(i)]).forEach(r=>{r!==void 0&&(e+=(e.length?"&":"")+t,r!=null&&(e+="="+r))})}return e}function $b(n){const e={};for(const t in n){const i=n[t];i!==void 0&&(e[t]=Xn(i)?i.map(s=>s==null?null:""+s):i==null?i:""+i)}return e}const Yb=Symbol(""),hp=Symbol(""),lc=Symbol(""),md=Symbol(""),tu=Symbol("");function Zr(){let n=[];function e(i){return n.push(i),()=>{const s=n.indexOf(i);s>-1&&n.splice(s,1)}}function t(){n=[]}return{add:e,list:()=>n.slice(),reset:t}}function Hi(n,e,t,i,s){const r=i&&(i.enterCallbacks[s]=i.enterCallbacks[s]||[]);return()=>new Promise((o,a)=>{const l=u=>{u===!1?a(Dr(4,{from:t,to:e})):u instanceof Error?a(u):vb(u)?a(Dr(2,{from:e,to:u})):(r&&i.enterCallbacks[s]===r&&typeof u=="function"&&r.push(u),o())},c=n.call(i&&i.instances[s],e,t,l);let h=Promise.resolve(c);n.length<3&&(h=h.then(l)),h.catch(u=>a(u))})}function Qc(n,e,t,i){const s=[];for(const r of n)for(const o in r.components){let a=r.components[o];if(!(e!=="beforeRouteEnter"&&!r.instances[o]))if(jb(a)){const c=(a.__vccOpts||a)[e];c&&s.push(Hi(c,t,i,r,o))}else{let l=a();s.push(()=>l.then(c=>{if(!c)return Promise.reject(new Error(`Couldn't resolve component "${o}" at "${r.path}"`));const h=eb(c)?c.default:c;r.components[o]=h;const d=(h.__vccOpts||h)[e];return d&&Hi(d,t,i,r,o)()}))}}return s}function jb(n){return typeof n=="object"||"displayName"in n||"props"in n||"__vccOpts"in n}function up(n){const e=qn(lc),t=qn(md),i=wt(()=>e.resolve(j(n.to))),s=wt(()=>{const{matched:l}=i.value,{length:c}=l,h=l[c-1],u=t.matched;if(!h||!u.length)return-1;const d=u.findIndex(Lr.bind(null,h));if(d>-1)return d;const f=dp(l[c-2]);return c>1&&dp(h)===f&&u[u.length-1].path!==f?u.findIndex(Lr.bind(null,l[c-2])):d}),r=wt(()=>s.value>-1&&Qb(t.params,i.value.params)),o=wt(()=>s.value>-1&&s.value===t.matched.length-1&&qg(t.params,i.value.params));function a(l={}){return Jb(l)?e[j(n.replace)?"replace":"push"](j(n.to)).catch(mo):Promise.resolve()}return{route:i,href:wt(()=>i.value.href),isActive:r,isExactActive:o,navigate:a}}const Zb=$t({name:"RouterLink",compatConfig:{MODE:3},props:{to:{type:[String,Object],required:!0},replace:Boolean,activeClass:String,exactActiveClass:String,custom:Boolean,ariaCurrentValue:{type:String,default:"page"}},useLink:up,setup(n,{slots:e}){const t=Vr(up(n)),{options:i}=qn(lc),s=wt(()=>({[fp(n.activeClass,i.linkActiveClass,"router-link-active")]:t.isActive,[fp(n.exactActiveClass,i.linkExactActiveClass,"router-link-exact-active")]:t.isExactActive}));return()=>{const r=e.default&&e.default(t);return n.custom?r:Fl("a",{"aria-current":t.isExactActive?n.ariaCurrentValue:null,href:t.href,onClick:t.navigate,class:s.value},r)}}}),Kb=Zb;function Jb(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey)&&!n.defaultPrevented&&!(n.button!==void 0&&n.button!==0)){if(n.currentTarget&&n.currentTarget.getAttribute){const e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}function Qb(n,e){for(const t in e){const i=e[t],s=n[t];if(typeof i=="string"){if(i!==s)return!1}else if(!Xn(s)||s.length!==i.length||i.some((r,o)=>r!==s[o]))return!1}return!0}function dp(n){return n?n.aliasOf?n.aliasOf.path:n.path:""}const fp=(n,e,t)=>n??e??t,ew=$t({name:"RouterView",inheritAttrs:!1,props:{name:{type:String,default:"default"},route:Object},compatConfig:{MODE:3},setup(n,{attrs:e,slots:t}){const i=qn(tu),s=wt(()=>n.route||i.value),r=qn(hp,0),o=wt(()=>{let c=j(r);const{matched:h}=s.value;let u;for(;(u=h[c])&&!u.components;)c++;return c}),a=wt(()=>s.value.matched[o.value]);Ls(hp,wt(()=>o.value+1)),Ls(Yb,a),Ls(tu,s);const l=et();return sn(()=>[l.value,a.value,n.name],([c,h,u],[d,f,m])=>{h&&(h.instances[u]=c,f&&f!==h&&c&&c===d&&(h.leaveGuards.size||(h.leaveGuards=f.leaveGuards),h.updateGuards.size||(h.updateGuards=f.updateGuards))),c&&h&&(!f||!Lr(h,f)||!d)&&(h.enterCallbacks[u]||[]).forEach(y=>y(c))},{flush:"post"}),()=>{const c=s.value,h=n.name,u=a.value,d=u&&u.components[h];if(!d)return pp(t.default,{Component:d,route:c});const f=u.props[h],m=f?f===!0?c.params:typeof f=="function"?f(c):f:null,g=Fl(d,ht({},m,e,{onVnodeUnmounted:p=>{p.component.isUnmounted&&(u.instances[h]=null)},ref:l}));return pp(t.default,{Component:g,route:c})||g}}});function pp(n,e){if(!n)return null;const t=n(e);return t.length===1?t[0]:t}const tw=ew;function nw(n){const e=Rb(n.routes,n),t=n.parseQuery||Xb,i=n.stringifyQuery||cp,s=n.history,r=Zr(),o=Zr(),a=Zr(),l=Ps(Ii);let c=Ii;gr&&n.scrollBehavior&&"scrollRestoration"in history&&(history.scrollRestoration="manual");const h=Kc.bind(null,z=>""+z),u=Kc.bind(null,qb),d=Kc.bind(null,kl);function f(z,le){let oe,ae;return $g(z)?(oe=e.getRecordMatcher(z),ae=le):ae=z,e.addRoute(ae,oe)}function m(z){const le=e.getRecordMatcher(z);le&&e.removeRoute(le)}function y(){return e.getRoutes().map(z=>z.record)}function g(z){return!!e.getRecordMatcher(z)}function p(z,le){if(le=ht({},le||l.value),typeof z=="string"){const T=Jc(t,z,le.path),U=e.resolve({path:T.path},le),N=s.createHref(T.fullPath);return ht(T,U,{params:d(U.params),hash:kl(T.hash),redirectedFrom:void 0,href:N})}let oe;if("path"in z)oe=ht({},z,{path:Jc(t,z.path,le.path).path});else{const T=ht({},z.params);for(const U in T)T[U]==null&&delete T[U];oe=ht({},z,{params:u(T)}),le.params=u(le.params)}const ae=e.resolve(oe,le),we=z.hash||"";ae.params=h(d(ae.params));const L=ib(i,ht({},z,{hash:Hb(we),path:ae.path})),E=s.createHref(L);return ht({fullPath:L,hash:we,query:i===cp?$b(z.query):z.query||{}},ae,{redirectedFrom:void 0,href:E})}function v(z){return typeof z=="string"?Jc(t,z,l.value.path):ht({},z)}function _(z,le){if(c!==z)return Dr(8,{from:le,to:z})}function x(z){return A(z)}function P(z){return x(ht(v(z),{replace:!0}))}function M(z){const le=z.matched[z.matched.length-1];if(le&&le.redirect){const{redirect:oe}=le;let ae=typeof oe=="function"?oe(z):oe;return typeof ae=="string"&&(ae=ae.includes("?")||ae.includes("#")?ae=v(ae):{path:ae},ae.params={}),ht({query:z.query,hash:z.hash,params:"path"in ae?{}:z.params},ae)}}function A(z,le){const oe=c=p(z),ae=l.value,we=z.state,L=z.force,E=z.replace===!0,T=M(oe);if(T)return A(ht(v(T),{state:typeof T=="object"?ht({},we,T.state):we,force:L,replace:E}),le||oe);const U=oe;U.redirectedFrom=le;let N;return!L&&sb(i,ae,oe)&&(N=Dr(16,{to:U,from:ae}),pe(ae,ae,!0,!1)),(N?Promise.resolve(N):C(U,ae)).catch(V=>ci(V)?ci(V,2)?V:he(V):Q(V,U,ae)).then(V=>{if(V){if(ci(V,2))return A(ht({replace:E},v(V.to),{state:typeof V.to=="object"?ht({},we,V.to.state):we,force:L}),le||U)}else V=J(U,ae,!0,E,we);return G(U,ae,V),V})}function O(z,le){const oe=_(z,le);return oe?Promise.reject(oe):Promise.resolve()}function S(z){const le=fe.values().next().value;return le&&typeof le.runWithContext=="function"?le.runWithContext(z):z()}function C(z,le){let oe;const[ae,we,L]=iw(z,le);oe=Qc(ae.reverse(),"beforeRouteLeave",z,le);for(const T of ae)T.leaveGuards.forEach(U=>{oe.push(Hi(U,z,le))});const E=O.bind(null,z,le);return oe.push(E),Me(oe).then(()=>{oe=[];for(const T of r.list())oe.push(Hi(T,z,le));return oe.push(E),Me(oe)}).then(()=>{oe=Qc(we,"beforeRouteUpdate",z,le);for(const T of we)T.updateGuards.forEach(U=>{oe.push(Hi(U,z,le))});return oe.push(E),Me(oe)}).then(()=>{oe=[];for(const T of L)if(T.beforeEnter)if(Xn(T.beforeEnter))for(const U of T.beforeEnter)oe.push(Hi(U,z,le));else oe.push(Hi(T.beforeEnter,z,le));return oe.push(E),Me(oe)}).then(()=>(z.matched.forEach(T=>T.enterCallbacks={}),oe=Qc(L,"beforeRouteEnter",z,le),oe.push(E),Me(oe))).then(()=>{oe=[];for(const T of o.list())oe.push(Hi(T,z,le));return oe.push(E),Me(oe)}).catch(T=>ci(T,8)?T:Promise.reject(T))}function G(z,le,oe){a.list().forEach(ae=>S(()=>ae(z,le,oe)))}function J(z,le,oe,ae,we){const L=_(z,le);if(L)return L;const E=le===Ii,T=gr?history.state:{};oe&&(ae||E?s.replace(z.fullPath,ht({scroll:E&&T&&T.scroll},we)):s.push(z.fullPath,we)),l.value=z,pe(z,le,oe,E),he()}let de;function F(){de||(de=s.listen((z,le,oe)=>{if(!be.listening)return;const ae=p(z),we=M(ae);if(we){A(ht(we,{replace:!0}),ae).catch(mo);return}c=ae;const L=l.value;gr&&db(tp(L.fullPath,oe.delta),ac()),C(ae,L).catch(E=>ci(E,12)?E:ci(E,2)?(A(E.to,ae).then(T=>{ci(T,20)&&!oe.delta&&oe.type===Ro.pop&&s.go(-1,!1)}).catch(mo),Promise.reject()):(oe.delta&&s.go(-oe.delta,!1),Q(E,ae,L))).then(E=>{E=E||J(ae,L,!1),E&&(oe.delta&&!ci(E,8)?s.go(-oe.delta,!1):oe.type===Ro.pop&&ci(E,20)&&s.go(-1,!1)),G(ae,L,E)}).catch(mo)}))}let q=Zr(),X=Zr(),te;function Q(z,le,oe){he(z);const ae=X.list();return ae.length?ae.forEach(we=>we(z,le,oe)):console.error(z),Promise.reject(z)}function re(){return te&&l.value!==Ii?Promise.resolve():new Promise((z,le)=>{q.add([z,le])})}function he(z){return te||(te=!z,F(),q.list().forEach(([le,oe])=>z?oe(z):le()),q.reset()),z}function pe(z,le,oe,ae){const{scrollBehavior:we}=n;if(!gr||!we)return Promise.resolve();const L=!oe&&fb(tp(z.fullPath,0))||(ae||!oe)&&history.state&&history.state.scroll||null;return ld().then(()=>we(z,le,L)).then(E=>E&&ub(E)).catch(E=>Q(E,z,le))}const ge=z=>s.go(z);let ne;const fe=new Set,be={currentRoute:l,listening:!0,addRoute:f,removeRoute:m,hasRoute:g,getRoutes:y,resolve:p,options:n,push:x,replace:P,go:ge,back:()=>ge(-1),forward:()=>ge(1),beforeEach:r.add,beforeResolve:o.add,afterEach:a.add,onError:X.add,isReady:re,install(z){const le=this;z.component("RouterLink",Kb),z.component("RouterView",tw),z.config.globalProperties.$router=le,Object.defineProperty(z.config.globalProperties,"$route",{enumerable:!0,get:()=>j(l)}),gr&&!ne&&l.value===Ii&&(ne=!0,x(s.location).catch(we=>{}));const oe={};for(const we in Ii)Object.defineProperty(oe,we,{get:()=>l.value[we],enumerable:!0});z.provide(lc,le),z.provide(md,gg(oe)),z.provide(tu,l);const ae=z.unmount;fe.add(z),z.unmount=function(){fe.delete(z),fe.size<1&&(c=Ii,de&&de(),de=null,l.value=Ii,ne=!1,te=!1),ae()}}};function Me(z){return z.reduce((le,oe)=>le.then(()=>S(oe)),Promise.resolve())}return be}function iw(n,e){const t=[],i=[],s=[],r=Math.max(e.matched.length,n.matched.length);for(let o=0;o<r;o++){const a=e.matched[o];a&&(n.matched.find(c=>Lr(c,a))?i.push(a):t.push(a));const l=n.matched[o];l&&(e.matched.find(c=>Lr(c,l))||s.push(l))}return[t,i,s]}function Hr(){return qn(lc)}function ty(){return qn(md)}const sw="/assets/logo2-7_ZCtYPH.svg",Bs=Vr({active_page:"home",blog_id:"example-post",change_page:function(n){this.active_page=n},change_blog_id:function(n){this.blog_id=n}}),Ds=et([]),rw=["Dragonfly","Godot","World of Goo","translation","greek","mod","vulkan","graphics","rendering","overloading","cpp","operators","code","math","example","random"],yn=[{slug:"future_of_dragonfly",hotwords:["Dragonfly","Godot","vulkan","graphics"],featured_image:"src/assets/dragonfly.jpg",title:"The future of Dragonfly",summary:"Thoughts over what I should do with Dragonfly",updated:"2024-08-28T00:00:00.000Z",published:"2024-08-28T00:00:00.000Z",author:"Mantis",body:`<p>Dragonfly has been one of my dream projects. I've always wanted to experiment with low level things        related to graphics and develop games of my own. Other game engines that I tried, Unity and Unreal, specifically,        seemed too complex to me, or they were too abstracted and/or didn't offer features I wanted (I know that these        are technically "me" issues, but, hey, we all have our pet peeves and weirdness).</p>        <p>For that reason, I decided to make Dragonfly. Dragonfly was meant to be a general purpose graphics and physics        engine that didn't abstract too much over the graphics API, Vulkan in that case. I dedicated a lot of time on that project, trying        to get it exactly the way I had imagined it, and learning everything I could about both graphics and Vulkan. It even went through        a complete C++ rewrite, as the original project was written in C.</p>        <p>Then came the previous month. I had gone on vacation, and didn't take the project files with me (I don't push changes often enough        to the remote repo, so it's often out of date). The repo was too big, couldn't bother waiting for the copy.        To avoid doing nothing for all those weeks, I decided to muck about in other engines. I started        with Unreal. Despite being somewhat fun to work with, I still had the "overwhelming complexity and too much abstraction" issues I        had when I had tried it long ago.</p>        <p>I decided to try out Godot next. And I was surprised. In a pleasant manner. Godot had a lot of the features that I wanted Dragonfly        to have, without sacrificing simplicity. It had insanely powerful shading tools (which were one of the reasons I wanted to make Dragonfly)        and, on top of that, the Forward+ mode was using Vulkan!</p>        <p>This got me thinking: Considering Godot existed, Dragonfly was pretty much obsolete from the beginning as a project, as there        was already an engine that took into consideration (almost) all the things I wanted to have in my game engine. For that reason, I decided        to freeze development of the engine for the moment.</p>        <p>This does not mean, however, that I will kill the project. Instead, I am thinking of specializing Dragonfly. One of the features        I wanted for the engine was to be able to simulate Special (or even General) Relativity physics. Thus, I will probably make Dragonfly into an engine        that is dedicated to simulating General Relativity physics -my favourite kind of Physics! So, instead of it being a game engine,        it will probably be more akin to an engine that aids research or something similar (because, let's admit it, physicists only        bring disaster when they touch computers; just see the mess that is the Internet! Its protocols and their premature release to the wild        were physicists' doing).</p>        <p>Also, I may make it so it will be an engine that uses raytracing, instead of the typical graphics        pipeline (since I mentioned physicists, here is a funny story: Two years ago, when I went to an astrophysics convention as a volunteer, two        guys were quarelling whether one's simulation program should use raytracing for drawing graphics. The other argued that raytracing is "too expensive and niche" (!)        and they should use "this new method, called Phong shading" (!). Shows how out of date when it comes to computers scientists are).</p>        <p>I should also mention that, even though Godot pretty much makes my project not worth much, I don't think the time I spent with Dragonfly was wasted. If anything, I learnt        so many precious things whilst working on it, that I wouldn't otherwise learn should I immediately start working with an engine. Gaining        knowledge is <i>never</i> a waste of time. Not to mention that the journey of learning new things about graphics is not over yet! It has just began!</p>`},{slug:"translating_wog2",hotwords:["World of Goo","translation","greek","mod"],featured_image:"src/assets/wog.png",title:"I'm translating World of Goo 2!",summary:"I am making a mod where I translate WoG 2 in Greek!",updated:"2024-08-26T00:00:00.000Z",published:"2024-08-26T00:00:00.000Z",author:"Mantis",body:`<p>World of Goo has been one of my favourite games ever. It was one of my first games ever,        the first game I attempted to complete 100% and the first game (and one of the only few ones) that I have snooped        around the files of and modded. I was so excited when the second one        got announced, and I have been playing it so much! Physics sims will never stop being fun!</p>        <p>When the sequel was announced (you can get it <a href="https://worldofgoo2.com">here</a> btw), the devs requested from the community to help translate the game into        various languages. Sadly, I didn't have much time myself to help (darn university), so I missed an opportunity in translating        the game into my native language, Greek. And sadly, there doesn't seem to be any new opportunity for new        translations in the near future.</p>        <p>Thankfully, it turns out that editing the text of the game is super easy; the texts for        all the current translations of the game are available as human readable files. Not only that, but the fonts        are in a plain ttf format and the game supports Unicode (it was translated in Chinese, Korean and Japanese after all).</p>        <p>Thus, I began working on a translation mod, to make the game more accessible to Greek audiences 👀! I have already extended        the two fonts WoG 2 uses, Twentieth Century and Earth's Mightiest, to support monotonic Greek (since they don't natively        support any Greek characters), and I have translated many parts        of the game!</p>        <p>Even though the game does define an array of different languages, trying to add to those languages seems to break the language        menu and doesn't really add the new language. For that reason, I decided to make my mod simply replace the Latin American Spanish translation of the game.        It's not the prettiest hack, but it works.</p>        <p>I'm having so much fun with the translation so far! I hope you'll like the results as well 😁!</p>        <figure>                <img src="src/assets/bigplump.png" alt="something big and plump and juicy" width="700"></p>                <figcaption>Something big and plump and juicy 😋</figcaption>        </figure>`},{slug:"vulkan_concepts_part2",hotwords:["vulkan","graphics","rendering"],title:"Learning the basics of Vulkan: Part 2",featured_image:"https://upload.wikimedia.org/wikipedia/commons/f/fe/Vulkan_logo.svg",summary:"Talking about the bits and bobs of Vulkan",updated:"2024-08-25T00:00:00.000Z",published:"2024-08-25T00:00:00.000Z",author:"Mantis",body:`<p>It has been a long time since I made my first Vulkan post (which you can find         <a href='https://cyber-mantid.xyz/#/blog_post/vulkan_concepts_part1'>here</a>) and I think        it's due time that I wrote the continuation of that post. This time, instead of talking about        the conventions of the Vulkan API, I will generalize and talk about <i>graphics</i> concepts as well        as some other mechanics that concern what Vulkan manages as a whole.        This means that for the graphics part of this post, whatever I will write down will not be Vulkan specific,        but will be applicable to other APIs as well.</p>        <p>So, let's get started already!</p>                <h1>The bureaucratic stuff</h1>        <p>I'll first talk about the concepts which concern less "hands-on" things you can do with the API        but rather exist as a way to "prep" yourself (or rather, your program) to do those things.</p>        <h2>The Instance</h2>        <p>The first construct somebody has to create is a <code>VkInstance</code>. The role of an instance is not        very clear, at first, but it becomes much clearer if you have some programming expertise. Specifically,        one thing you'll remember -from, probably, countless hours of programmer propaganda- is that "global states        are evil and stupid" (maybe not with these exact words). What this means is that we want to avoid our program to have        variables that have no sense of scope, and persist through the entire execution of it. This is due to many reasons,        from making code more modular -and thus easier to debug- to not having to come up with unique or complex variable names because of        simpler ones being already taken (naming things is, afterall, the hardest challenge in programming).</p>        <p>Vulkan itself, being        a responsible and law abiding API, offers its own solution to not having a global scope: Instances! When you initialize        Vulkan, instances act as a "central" hub, where information (about what you are making, what debugging features you want -if any-        and what features of Vulkan itself you want to be using, etc) is passed to and stored. What's even neater about this is that        a program needn't limit itself to one instance, thanks to the fact instances are not global. Hence, if you really need to use Vulkan        for a lot of different tasks (which, honestly, isn't usually applicable, but you do you), you are able to create different        intances and thus take advantage of possible optimizations for those tasks. Plus, you also have the advantage of modularity,        and according to what I've heard, modularity is rather hip and cool these days.</p>                <h2>The Physical and Logical Device</h2>        <p>Of course, no self-respecting GPU/graphics API would offer no way to manage GPUs (I guess this makes OpenGL not that        self-respecting). Vulkan is no exception. However, thanks to the low level nature of the API, it doesn't simply "talk"        about devices, but rather, distinguishes between two specific "types" of devices: Physical and Logical.</p>        <p>Physical Devices are exactly what their name suggests they are: the actual GPUs (or any other Vulkan capable device)        in your system. They contain every single information about it, from how many heaps it has and of what types, to what        features it sports.</p>        <p>But, of course, as with every piece of hardware, GPUs are ugly, fat and unwieldy. Hence, having to deal with a beast        every time we want to do any kind of work isn't going to cut it. As a solution, Vulkan offers a nice little abstraction, called        a <i>Logical Device</i> (although in the API itself, it's always referred to as just <code>VkDevice</code>). A Logical Device        represents only what you will <i>use</i> from a Physical Device, allowing the API to avoid having to initialize unnecessary        features that would really only drag a program down the performance hell-hole.</p>        <p>Similar to instances, however with much more usefulness, this time around, Vulkan allows you to create multiple logical        devices <i>per instance</i> and even multiple devices <i>from the same physical device</i>. This can be really helpful, since        one can separate purely computational work from purely graphical work on their own devices, for example, without needing to        set up any synchronization, if they don't really need those two to interact with each other.</p>                <h2>The Layers and the Debugger</h2>        <p>Lowlevel-ness doesn't come with a cost. Having to get rid of all those bits and bobs that manage all the ugly stuff        for you means that there's really no middleman to inform you about what may go wrong. Thankfully, all is not lost.        Instead of having the API act as the middleman, Vulkan offers something known as <i>layers</i>. Layers are little pieces of        software that run in parallel with your program -if you want them to- and report on various errors (or other information) concerning your        usage of Vulkan. Similarly to everything else with Vulkan, there's no "layer to rule them all" and you have a multitude of        layers, all catering to different debugging needs. In fact, it's not uncommon for "third parties" (in respect to the provider        of the SDK which contains the Vulkan API) to provide their own layers, usually for debugging features that relate to        services they provide (for example, in my machine, I have layers related to Steam and OBS).</p>        <p>Of course, layers themselves just check for and "report" errors, but as they are meant to be plain and platform independent, they        really don't do anything more. This is where the Debugger (or more accurately, the Debug Messenger) comes in. The debugger's        job is to gather all the errors, warnings and other info that the layers report and relay them back to the application that        is using those layers (duh, it's literally a messenger). Usually, the messenger itself will be nothing more than a fancy printer to standard output, but Vulkan        gives much more flexibility on what it can be (you could, for example, pass its information to a GUI application and have a much        more fancy messenger. The sky is the limit!).</p>        <p>Note that debugging utilities are an extension to Vulkan (<code>VK_EXT_debug_utils</code>), so you need to enable them whilst creating an instance. Also, there        are many more debugging features that this extension provides, such as object taging and command labeling, but I won't really        go into that much detail over them.</p>                <h1>The Nuts and Bolts</h1>        <p>So, you've created an instance and have reserved a device. But you are still not ready to do serious work. Remember,        Vulkan is a low level API, and thus requires that you know the thing you are working with; in this case, with the GPU.</p>                <h2>Queues</h2>        <p>How does a CPU execute work? It consists of threads that retrieve instructions from memory and execute them independently        from each other (at least in theory). Similar to that, in order for a GPU execute work, it offers <i>queues</i> on which        that work is submitted to. However, queues are not exactly the same as CPU threads.</p>        <p>For starters, queues have a "type". Specifically, they can be either <i>graphics</i>, <i>presentation</i>, <i>        compute</i> or <i>transfer</i> queues. A type of a queue specifies what work it can execute. What those types specifically entail        seems intuitive enough:</p>        <ol>            <li>Graphics queues are able to execute graphics pipelines (duh).</li>            <li>Presentation queues know how to talk with both the OS and a display device so they can present an image to the user.            This may seem like an artificial distinction from the graphics queue, but it's a rather important one! There are plenty            of GPUs that are not meant to "show stuff". Sure, they are usually non-commercial and used for niche applications, but            Vulkan isn't a GPU-ist API and includes and considers them as well. Fortunately for you (at least assuming so), graphics            queues on most commercial GPUs also double as presentation queues.</li>            <li>Compute queues are able to execute compute pipelines (how surprising!). It's not uncommon to find only these kinds of queues            in GPUs meant for mainframes or other number crunchers, that don't really care about showing anything fancy to someone (except their            big numbers, of course).</li>            <li>Transfer queues are all about memory operations. This includes operations that seem more fitted to be done by graphics queues,            like image blitting (copying parts of an image to another image) or mipmap generation (mipmaps are versions of an image of smaller resolution,            useful for rendering optimizations). But such operations are purely memory trasnfer operations, and don't really require any graphics            algorithms.</li>        </ol>        <p>Second, thanks to the extremely parallel nature of GPUs, work is executed in parallel not only across queues, but also within        a single queue. Of course, someone may ask "Why have multiple queues then?". The answer is simple: whilst the default behaviour        of a queue is to execute submitted work in parallel, it is still meant to execute work that is, in some way, related to and dependent        to each other. Not only that, but it really doesn't make sense, in the first place, for work to be executed sequentially within a queue (GPUs are        bad with that anyways), but rather in a more asynchronous manner. What is meant with that will be clear when I'll talk about synchronization        in Vulkan.</p>        <p>Note that queues in Vulkan are grouped into families; queues of the same family share the same type. Also, when creating        a logical device, you need to specify what families you want to use and how many queues from each family you need, keeping        in line with a logical device's philosophy of "using only what you need".</p>                <h2>Command buffers</h2>        <p>Okay, you now have a good instruction follower. What do you do with it?</p>        <p>You <i>could</i>, theoretically, submit instructions directly to the GPU, but think about it for a second; with a CPU, do you submit to it        the assembly instructions yourself? No! That'd be absurd. And probably boring! Instead, you write a program in some language, and have it        be translated into machine language to be executed at a later point.</p>        <p>Command buffers are Vulkan's version of "I write a program in a high level language and have it compile in machine language". One        "writes" a program in the higher level C API (using <code>VkCmd</code> functions) and in the meantime, the API creates a buffer where it        pushes the GPU instructions on and performs any optimizations it sees fit.</p>        <p>Of course, this also means that, when recording a command buffer, what seems sequential is, in fact, not at all. So one has to keep        in mind that, in the majority of cases, you really don't have to abide to a strict hierarchy of commands; two commands that come one after        another in the recording phase are not guaranteed to execute in that order.</p>        <p><i>Side note:</i> if the idea of command reordering seemed already weird to you, here's another weirder thing: Even sequential CPU code may,        in fact, end up being non sequential! Compilers are free to order CPU instructions as they see fit, as long as they can keep the façade of sequentiality        (sequence? sequentialness? I dunno, English is weird). This is done because, often, many optimizations can be done, especially such optimizations        pertaining to memory access.</p>        <p><i>Another side note: Something I should mention about command buffers is one important property of their commands: the stage. The stage        essentially tells Vulkan what part of the pipeline the command is responsible for. Note that saying "part of the pipeline" can be misleading        as you may think of graphical pipelines (or even compute pipelines). But reality is that the stage has to do with <u>any</u> operation        taking place in a command buffer, including transfer operations that are not related or bound to a graphics or compute pipeline.         Even the beginning or ending of a command buffer are also considered stages. Stages are important to remember, as they are an important        concept for synchronization.</i></p>                <h3>Memory</h3>        <p>Of course, a device is not worth much if there's no way to <i>store</i> things in it, even if for just a short amount of time. Thankfully for        us, devices have memory! Specifically, Vulkan divides GPU memory into two big categories: Local memory and Shared memory. Both are self-explanatory:        the former concerns memory that is on the GPU itself, whilst the latter memory that is shared with the host itself</p>        <p>The divisions don't end there, however. Both of these categories divide memory into chunks; "heaps" per the terminology. And those "heaps" are further        divided into "types". Now, for the types of heaps, I used the word "divided" very loosely; in reality, a heap's memory isn't divided any more.        Instead, types represent different "interpretations", so to speak, of the heap. Different types can represent different features of the heap and offer        different possible optimizations. And, of course, a heap can have multiple types, hence the word "divided".</p>        <p>Important thing to remember when requesting memory from Vulkan is that you request for a type, not a heap. Not only that, but you cannot infinitely        allocate memory; most devices support only a limited amount of <i>simultaneous</i> allocations (usually in the order of thousands). For that reason, instead        of just allocating memory when necessary, you allocate bigger chunks of memory, which you then divide for various uses (this is similar to using heap memory        on the host system; in general, we prefer infrequent big allocations to frequent small ones, as heap allocation is, generally speaking, a slow process.        If you've seen an implementation of <code>malloc</code> and co in C, or general purpose allocators in a language like Zig, you may have noticed that they too allocate        bigger chunks of memory than what the programmer requested, exactly to avoid costs of frequent small allocations).</p>                <h3>Buffers and Images</h3>        <p>As I said in the previous section, it's common practice to reserve big chunks of memory for multiple purposes, instead of small chunks for a singular purpose.        Probably, this may arouse woes from the memory management        haters. "Ugh, so we need to keep track of what's where as well?", they'll say, "No sir, this is a crap API". Don't worry haters! Vulkan has got you covered!        Instead of working directly with memory, it offers two storage primitives which can bind to and abstract over memory: Buffers and Images.</p>        <p>Buffers are the simplest primitive. They represent simple, contiguous places in memory. Nothing more, nothing less. They work exactly the same        as we'd expect a (raw) pointer in a programming language to behave. In fact, if you have GPU memory that the host can see, you can use a buffer        just like a common pointer. Most        of the time, however, buffers will be written to by command buffers and compute shaders.</p>        <p>Images are more involved and that's due to their purpose. Whereas buffers are simply meant as generic storage, images are specifically made        to store graphical data (i.e. images). This means that they have lots more structure than buffers. For starters, images have the concept of dimensions:        you can have images with 1, 2 or even 3 dimensions. They also have layouts: Vulkan can reorder the data in an image so it can be optimized for        different operations that can happen to it. The orders said data can be in are known as layouts. There are different layouts depending on the        purpose: there's a layout when writing colour data to an image, a layout when transferring general data, a layout when writing depth data etc.</p>        <p>Images also come with three graphics related settings: formats, samples and mipmaps. Since images tend to hold colour data, formats determine the        colour space and general representation of that data.</p>        <p>Samples, on the other hand, determine how many samples per texel (a texel is for an image what a pixel is        for a monitor: the smallest unit of the image) an image can have. Samples are used so we can reference decimal positions on an image; normally,        since there is a natural number amount of texels in an image, that means that, under normal circumstances, one could only refer to a position on an image        using only integers. However, sampling allows us to refer to a position on an image using abitrary float numbers, by essentially "averaging" the texels        that are near the point we chose.</p>        <p>Mipmaps, despite the funny name, have quite an important purpose. Mipmaps are "recursively smaller pictures"; by that, I mean the following:        mipmaps are divided into levels; each level is half the resolution of the previous level and level 0 is the original image. Hence, a level 3 mipmap        would be \\(2^{-3}\\) times the original resolution. Mipmaps are used when rendering things that are "far away": they enable the GPU to do less        work for things that are not as easily seen + they can help reduce Moiré patterns (the weird line effects you see pop up on screens, usually when images        of small grids show up, or similar patterns). Another cool use of mipmaps is as a cheap way to implement reflections.</p>        <p>NOTE: Both Buffers and Images have what is known as <i>views</i>. They are pretty self explanatory: they offer a view onto a part of a storage resource,        which is quite useful for shaders. Image views can also change the format of an image or even swizzle colours.</p>                <h1>Law and Order (of execution)</h1>        <p>As it is made apparent from the previous section, Vulkan is perfectly happy to mangle, by default, commands submitted to a device's queues. But,        of course, this is not always desired. Thankfully, Vulkan has some tools for us that help us <i>synchronize</i>. Specifically,        the API offers 4 synchronization primitives (note that extensions can add more of them): semaphores, barriers, fences and events.</p>                <h3>Semaphores</h3>        <p>The semaphore is the first important kind of synchronization primitive. Semaphores achieve the synchronization of command buffers submitted to the same queue; they        block the execution of a command buffer so it can wait for another command buffer to finish. But here's the best part: you can explicitly specify <i>exactly</i>        which stage (remember them from the paragraphs about command buffers?) of a command buffer needs to wait on which command buffer. This        ensures that command buffers won't waste precious time waiting on something, even though they can perform work that doesn't depend on that        something.</p>                <h3>Barriers</h3>        <p>Of course, we don't want to synchonize command buffers with each other only, but we also want to be able to have a command buffer not mangle        itself where it shouldn't. For that, barriers come to the rescue. Barriers tell the API how to organize        a buffer's commands based on <i>memory accesses</i>.</p>        <p>If you have seen atomics in other languages, you may see where this is going. The principle of synchronization is exactly the same here. If you haven't,        you may think that ordering based on memory access is counter-intuitive. But, in fact, it frees our hands immensely; let's look at it through the model of threads.        Assume you have thread A and B, and those do their own thing perfectly separate from each other. But, at one point, A has to write something to memory M, and B has,        afterwards, to read from M. Of course, one could simply block B until A has finished writing to M, if B is at the point of reading alrady, but this is extremely wasteful!        Can't we just do other work whilst we wait for A to write?        Remember, even in CPU code, instructions get reordered! So, the solution is the following: Instead of wasting B's time by having it do nothing, just make sure that every instruction        reading M comes <i>after</i> A has finished reading. Before that point, you are free to put whatever instruction doesn't depend on M's result, allowing B to        do work, whilst waiting for A to write.</p>        <p>The idea in Vulkan is the exact same. Instead of blocking commands on a buffer from executing, and thus wasting precious GPU time, we instead make sure that only        the order of instructions which depend on each other is as it needs to be, and we happily ignore the chaos of every other instruction.</p>        <p>Barriers have a more fine-grained set up than just what memory access they are supposed to synchronize. Specifically, they are split into        three types: buffer barriers, image barriers and global memory barriers. The first two have to do with the storage primitives Vulkan        offers. Image barriers are especially important, because they ensure images are in their proper layout.         The last is a more generic barrier, which orders <i>all accesses</i> on memory        operated on by a buffer, regardless of how (or even if) it is operated on. This may sound like a bad option then (for example, if you have        commands that operate on one chunk of memory, and other commands that operate on some other chunk, they will need to wait for each other,        even if they don't really need to), but reality is that        a lot of times, command buffers don't really operate on such fine-grained memory. So, in many cases, buffer and global memory barriers are        interchangeable.</p>                <h3>Fences</h3>        <p>Synchronizing GPU work is good and all, but a GPU doesn't live in a vacuum (probably fortunately for itself, vacuums are cold and electronics        hate too much cold)! Hence, it also matters whether we can make the GPU and the host behave nicely with each other. For that reason, we use <i>Fences</i>.        Fences are quite simple conceptually. Each batch of command buffers submitted to a queue is associated with a fence. A fence has two states: the unsignaled and the        signaled state. When a batch is submitted to be executed, the fence is on the <i>unsignaled</i> state. Once that batch has finished        executing, the fence is put on the <i>signaled</i> state, which tells the host (at least if the host is honest and actually checks the fence's state)        that it can do whatever it waited the batch to finish for.</p>        <p><i>Side Note</i>: In a sense, a fence works like a fuse in your electric box; by that, I mean that once it's signaled, you need to explicitly reset it        to the unsignaled state, otherwise it cannot be reused (similar to how you need to turn up a fuse on the electric box if it turned down, or else        you will get no power).</p>                <h3>Events</h3>        <p>You may have noticed a pattern with the previous synchronization primitives; the first two describe a coarse and a fine GPU-with-GPU synchronization, respectively.        The third describes a coarse GPU-with-host synchronization. So, it is only natural that there is a finer way to synchronize host and GPU; events provide        that way. The idea of how they work is exactly the same as with fences; they have a signaled and unsignaled state, and the        host can check when an event is signaled. The difference here is that command buffers are able to explicitly signal events and        are able to wait for events to be unsignaled by the host.</p>                <h2>The real deal</h2>        <p>So, now that you told Vulkan what to use and how to use it down to the last bit, it's time to start talking business. Graphics business!        This is probably the biggest and windiest part of Vulkan, and naturally, it comes with a lot of pain; for absolutely free, no less! I should        probably start by those parts that are directly related to the relationship between a graphics application and the host that runs that application;        the <i>surface</i> and the <i>swapchain</i>.</p>                <h3>The Surface</h3>        <p>When you render graphics, where do you want them rendered to? Most likely a window (or using exclusive fullscreen, if you are mad). So, no matter        all the fancy effects you have cooked up to make the best image possible, you'll need to make sure that there is such a window to present that image to.        There is a problem though: Windowing is platform specific. Vulkan knows nothing about any platform, since it's meant to be platform agnostic. In other        words, there's no direct way for Vulkan to talk with windows, at least not without having to introduce platform specific interfaces.</p>        <p>The solution to that is        the following: Isolate all the platform specific code into a singular construct, which will abstract all that and hide it from the rest of the API. That construct        is called a <i>surface</i>. Thus, a surface is a representation of a window, that doesn't expose any of the specifics of how the window is made. Hence        the rest of the API can plaster anything it wants onto it, without having to worry about platform dependent tomfoolery.</p>        <p>REMEMBER! Similar to other graphics stuff, Vulkan does not assume that all GPUs (or in this case, OS) are capable of showing stuff "on screen".        Hence, Surfaces are an extension to the API, and not part of the core API.</p>                <h3>The Swapchain</h3>        <p>Okay, now you have something that will allow you to show your images on the screen. Here's the problems, however: First, Vulkan        still doesn't know what exactly to do with the surface. Only thing it knows is that it's "a place to show stuff on". Second, It's not necessary that        your rate of producing images will match that of the refresh rate of the screen. This presents with an issue: If your image rendering rate        is higher than that of the refresh rate, and you just immediately rush your images to the surface, you will inadvertedly cause what's known as        "tearing": The screen won't be able to show the already submitted picture in time, and instead will show part from the newly submitted picture.        This is what causes a "tear-like" effect, where the parts of two different images are on screen.</p>        <p>To mitigate both of these issues, Vulkan adds a new middleman to the flock (if you haven't guessed already, it loves doing that): the Swapchains!        Swapchains reveal their purpose from the name alone; they are chains of images to be swapped to the surface (really straightforward, no?).</p>        <p>Specifically, swapchains are constructs that are owned by the operating system, and represent "pools of memory" where an application can submit        images to that are meant to be presented. In some sense, they work exactly like conveyor belts. To give an analogy: imagine a dark room (the kind of        dark rooms where photos get developed). In this dark room, the one developing the photos is you (or the application). On top, you have a conveyor belt        with pegs from which you can hang your photos. That conveyor belt is the swapchain, and the total pegs on it represent the amount of images the swapchain can hold.        Each time you develop a photo, you can hang it to a peg (you fill an image of the swapchain with data). After that, you can move the conveyor belt forward: You tell the OS to present the next image        of the swapchain to the surface (note that "the next image to be presented" is not necessarily the one you just rendered). Meanwhile, another peg, probably        with another photo on it, arrives back at the dark room. You take that photo off the peg (you clear it) and hang another one (you replace its contents with        a newly rendered image).</p>        <p>To not lose ourselves too much with the analogy, the whole jist of the swapchain is that, from one side, it provides a Vulkan-native way        to transfer graphics data to, and from the other, it allows the application to render as many images as it finds        fit, <i>without</i> necessarily disrupting what is already being shown to the user. If you've guessed already, it is the construct that enables <i>Vsync</i>.        Technically speaking, though, Vsync refers to one mode from what is known as presentation modes. The most common ones are the following:        </p>        <ul>            <li>Immediate mode: In immediate mode, images are presented as soon as they are available. This is equivalent to setting vsync off.</li>            <li>FIFO (First in, first out) mode: In FIFO mode, an image will not be presented but at the moment the screen refreshes (i.e. there is a vertical            blank), even if it's available.            This is the classic Vsync mode.</li>            <li>Relaxed FIFO mode: A spin on the previous mode, Relaxed FIFO will only wait for the first vertical blank to present an image. If, however, there            was no image to present at that point, but a new image was made available afterwards, Relaxed FIFO will immediately present it to the screen.            This is a mode that combines the "best" of both Vsync and no Vsync: under normal circumstances, it makes sure that there's no tearing; however            if an application, for whatever reason, was too late at delivering new images, it just hastily presents the next image. This does mean, however            that tearing may appear.</li>            <li>Mailbox mode: What if, now, our application is super fast at rendering images (because we're just <i>that</i> good)? What wasn't mentioned            with the FIFO modes is that once you have queued a second image for presentation, if you attempt to queue another one, that request will block            the requesting thread <i>until</i> the image that isn't presented yet is actually presented. This is, obviously, not good, since that means            our app wastes precious time doing nothing. For that reason, Mailbox mode comes to the rescue: every time you queue a new image to be presented,            mailbox mode will <i>replace</i> the image that hasn't been presented yet to the screen. This is often known as <i>triple buffering</i>.</li>        </ul>        <p>Of course, someone may ask "Why not use Mailbox mode all the time, then?". For two reasons: First, Mailbox mode may not always be available.        In fact, the Vulkan specification demands that <i>only</i> immediate mode is guaranteed to be available. Second, FIFO and Mailbox only really        enable vsync. You cannot do custom refresh rates using these. For that, you need to use immediate mode and instead of relying on the swapchain        to present images whenever necessary, you instead keep track of the time between submits yourself.</p>        <p>One last thing: The amount of images you have on your swapchain do not directly correlate with the modes. You can have as many images as you like        (within the allowed device limits). The modes simply decide the "swapping" behaviour. Not only that, but even though images on the swapchain are represented        with an index, like an array, that index does not do much other than simply identify the image; the swapchain is not forced to present images on order of index.</p>                <p></p>        <p>Okay, so now we know what we need to do to make the OS acknowledge our beautiful pictures. But how do we actually make said pictures? The last Vulkan constructs        I will present in this post are all about that: The Pipeline, the Renderpass and Supbasses, and the Framebuffer!</p>                <h3>The Pipeline(s)</h3>        <p>If you think about it, creating a picture out of a 3D model is quite a parallelize-able process. Each pixel that is to be rendered rarely,        if ever, depends on the other pixels that are being rendered (note, effects like blurring, where the pixel is given a colour that is averaged        from the colours of all the pixels near it, isn't really a case of dependence of the pixels that are being rendered. Instead, this is a post processing        effect that takes the image to be blurred as input; no dependence pops up between the different <i>new</i> pixels)</p>        <p>Not only that, but going from 3D model to painted pixel is, thankfully, quite easy to break down into stages. This means that rendering images        is something that can be quite easily pipelined! Hence, one of the core parts of any graphics application is the so called <i>graphics pipeline</i>,        a construct which represents all the stages that go into rendering an image</p>        <p>But how does the graphics pipeline exactly work? First, it starts with what's known as the <i>vertex assembly</i>. At that point, the GPU        is fed data that represents the vertices of a model, i.e. points on space. That space, however, is not "the world", the place where all of our 3D models        live in; instead, it is what is known as the "local"        space, i.e. the space that contains only the model that is being rendered and where the locations of the points of that space are relative to that model.</p>        <p>After the vertex assembly, the pipeline moves onto the first shader state: <i>the vertex shader</i>! Shaders are -besides tools for making aesthetic        Minecraft screenshots- stages-programs that are fed to the GPU by the programmer (similar to command buffers, in a sense, but more versatile). In ye olde days,        pipelines lacked such stages; instead, everything in a pipeline was fixed. The advancements in GPU technology and graphics APIs managed to make some of the stages        much more customizable. The vertex shader is one such stage: It allows the programmer to define exactly how to place a model into world space (i.e. "the world where everything lives in")        -which is nothing more than an intermediate space that only really matters to the programmer, not the GPU- and from there onto camera space (i.e. it transforms everything in        world space in such a way as a camera would see the world). Note that the camera space isn't limited to the window that an image is being rendered to;        instead, it represents the plane which the window is part of. The vertex shader is where you would usually make final transformations to an object (like applying displacement        maps and all that). It        also allows for customizable camera projections (perspective and orthographic). Not to mention that smart use of the vertex shader enables one to make        non Euclidean geometry graphics! (NOTE: Contrary to popular belief, "non Euclidean" doesn't mean "portals!". It means that the shortest path on space        is not a straight line. Rather, it's some other line altogether).</p>        <p>After the vertex shader, there's two optional shader stages: the Tesselation shaders and the Geometry shader. If someone uses those        stages, then the vertex shader generally stops being responsible for transforming a model from local space all through to camera space (that        responsibility is passed down to either of those two stages),        and only handles any transformations that are meant to be done on a model. The tesselation shaders,        as the name suggests, are responsible for generating new vertices from the old ones, based on programmer-defined conditions. They are used        for subdividing meshes further, keeping the original model light, and without introducing load to the CPU (which would be the one to subdivide        the model, should the tesselation shaders not exist). The conditional nature of those shaders also means they are useful for LoD's        (Levels of Detail). The Geometry shader, on the other hand, is responsible for generating geometry from vertices; hence, it's useful for creating        effects such as explosions, where a model would become fragmented.</p>        <p>After those stages, the GPU generates the primitives (i.e. triangles) based on how the vertices were ordered when they were fed to it, and then it moves to the next        stage, which is a fixed one: Culling and Clipping. Culling is the process where the GPU throws away any primitives that, for a fact, it knows they will not        be seen (because even though they are in camera space, they fall completely outside the portion of the space that is on the window). Clipping is the process        where anything that has survived, but still has some parts falling outside the window, is transformed so as to discard the portion that the window doesn't see.</p>        <figure>                <img src="src/assets/clipcull.svg" alt="culling and clipping" width="327" height="308"></p>                <figcaption>Fig. 1: Culling and clipping.</figcaption>        </figure>        <p>The next stage is rasterization: The GPU turns the primitives into fragments. Fragments are "potential pixels"; in other words, they are        actual pixels of the image to be rendered on the window, that, however, it is possible that they will be disgarded later.</p>        <p>When a fragment is generated, it enters the next stage and the last programmable stage: the fragment shader. The fragment shader        is where the programmer can go all wild with colouring and shading effects. It's essentially the same stage that you see in material        editors in game engines or 3D modelers; in fact, it's not rare for either to allow you to write up your own shader for materials instead of using their own        interface.</p>        <p>After a fragment has been painted on, various other operations take place, on the last stage of the pipeline. Those are fixed and concern things        like colour blending and depth testing. It's at that stage where the GPU will decide whether to keep a fragment or discard it, probably because        there's something else on the image that is "in front" and thus would cover it (so, it makes no sense to put that fragment in the final image).</p>                <p>Something you should note is that pipelines are not actual commands, unlike command buffers; rather, they are more akin to "diagrams" that describe a job        the GPU must do. In fact, pipelines allow the host to pass custom parameters to shaders, so as to alter their behaviour slightly. Those parameters        are grouped in constructs known as descriptor sets and push constants. This is a life saver, since pipelines are usually quite expensive to build,        which means that instead of building a pipeline per object, we can instead build a pipeline per material (or per material group), which is a significantly        lower amount of pipelines to be built, and simply        change parameters for every model we have to render.</p>        <h3>The Renderpass and the Subpasses</h3>        <p>As mentioned above, pipelines are grouped per material. However, this presents with the following issue: How will all the pipelines know how to work with each other? Wouldn't a pipeline just cover whatever another        pipeline has already created? To solve this issue, Vulkan offers a construct known as a <i>Renderpass</i>: A renderpass groups all pipelines        that a rendering operation will use, outlining a common place where they can render to, but also check if they should render at all. It's through        the renderpass that operations like, for example, depth testing work: a renderpass defines a common depth attachment, where the different pipelines in it can        check whether a fragment should be discarded (because they are behind something that was already rendered) or kept.</p>        <p>Renderpasses can be further divided into subpasses, separate rendering units, that is. Those subpasses are able to define complex rendering        operations, since one can define complex dependencies between each other; they are oftentimes used for operations like deferred shading or        even post processing effects.</p>        <p>One issue with renderpasses is that they are quite cumbersome to set up and usually        require an "a priori" preparation of the rendering system, as they are immutable (like most things in Vulkan). In response to that, more recent developments in the API have        made possible to circumvent the renderpass altogether and instead define rendering operations dynamically, within command buffers.         However, this comes with a catch:        many GPUs or other graphics devices, especially those in mobile phones, are not very good at handling dynamic rendering operations and are        rather more optimized with renderpasses in mind. Hence, you should just pretend that dynamic rendering operations are not a thing,        lest you really want to limit the devices your application can run well on.</p>                <h3>The Framebuffer</h3>        <p>Of course, the renderpass only represents a "mental" idea of how pipelines are grouped and organized together. They don't really        allocate any space where the rendering operations can actually take place. For that, you need to explicitly define a framebuffer, a collection        of image views (remember those? From the Buffers and Images section?) that agree with what the renderpass has defined. It's the framebuffer        where you use views of swapchain images so you can actually render images to later present to the surface.</p>                <h1>Conclusion</h1>        <p>So, that's all I have to say, to be honest. It took me ages to make the sequel of the first post, but I hope it was worth it. Of course,        all of the above does nothing more than scratch the surface of what Vulkan actually is and is capable of. However, bundled with the previous post as well,        this should give you a rather nice heading to start your Vulkan journey from</p>        <p>By the way, if you haven't known already about it, I hugely recommend the official Vulkan Programming Guide, by Graham Sellers. It's an excellent        and quite comprehensive book, and I am sure it will be of immense help when learning Vulkan!</p>`},{slug:"cpp_operator_overload",hotwords:["overloading","cpp","operators","code","math"],title:"When to overload C++'s operators",featured_image:"https://www.svgrepo.com/show/452183/cpp.svg",summary:"Overloading is fun, but should be handled with care",updated:"2024-05-13T00:00:00.000Z",published:"2024-05-13T00:00:00.000Z",author:"Mantis",body:`<p>One of C++'s core features is that of operation overloading.        The premise is simple yet powerful; for almost all operators the C++ specification defines, you can override their behaviour according        to your needs. A simple example:</p>        <pre>    class MyClass;
    MyClass myObject;
    
    MyClass operator + (const MyClass& obj1, 
                        const MyClass& obj2) {
        \\\\ Function body here
    }    </pre>        <figcaption><i>NOTE: The space between the word <code>operator</code>        and the operator itself is not necessary, just done for aesthetical reasons.</i></figcaption>        <p>However, whilst it's a powerful feature, it comes with a catch: Since those        operators have a specific function (pun intended?) ingrained into our minds        having an overload perform a massively different function will, inevitably,        lead to confusing code and inability of someone reading over it to completely        understand what is going on.</p>        <p>In this post, I am going to talk about what I think someone should do (and not do)        when overloading operators in C++.</p>        <h1>Which operators are overloadable, anyways?</h1>        <p>The C++ specification has quite a few operators defined and most of them are        overloadable. In fact, when talking about what and what cannot be overloaded, it's        easier to talk about those that cannot be. Specifically, the following are not overloadable:        <pre>    ::  \\\\ Scope operator 
    .   \\\\ Member access operator 
    .*  \\\\ Pointer to member access operator 
    ? : \\\\ Conditional operator     </pre>        <p>Whilst even this may seem kind of limiting, the philosophy behind overloading        operators I will present below will show that, in the end, it's really not that        big of a deal.</p>        <p>Also note that to overload a nonmember operator, at least one of the parameters        it takes has to be a user-defined type.</p>        <h1>General rules of thumb when overloading.<h1>        <p>        <ul>            <li>Overloaded operators should not have side effects. In other words, they            shouldn't be able to change something on your program that lies beyond the            local scope they are executed in. No global variable changing, no initialization,            nothing like that. Sole exception is the function call operator (<code>()</code>).</li>            <li>Overloads of assignment operators should always return a reference to the left operand</li>            <li>Similarly, overloads of logical and relational operators should always return a boolean value.</li>            <li>Conversion operators should do nothing more than convert the argument to            the target type. They shouldn't modify the object.</li>            <li>Overloaded operators should, in general, mimic the behaviour of the original operator or            at least try to comply with people's intution on how an operator should behave.</li>        </ul>        </p>        <p>            I will now go over specific conditions per operator that, I think, should be met when it comes to            overloading said operators        </p>        <h2>The basic arithmetic operators (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> and <code>%</code>)</h2>        <p>            When it comes to the four basic arithmetic operations, people's main intuition about them is that whatever            they operate on should behave "like a number". Mathematics actually has a name for this behaviour; we say that the operands            form a <i>field</i>.        </p>        <p>Thus, one should overload those those four operators if they intend that their operands be of the same type, let it be \\(T\\)        and they -the operators- return that same type. In other words, the declarations of the overloads should look something like this:</p>        <pre>    T operator + (const T& a, const T& b); 
    T operator - (const T& a, const T& b); 
    T operator * (const T& a, const T& b); 
    T operator / (const T& a, const T& b);    </pre>        <p>Not only that, but since we want the type to be a field (as it's what people have intuition for), the overloads should        be defined as such that the following rules hold true:</p>        <ol>            <li>For every \\(a\\) and \\(b\\) of \\(T\\), \\(a \\circ b = b \\circ a\\), where \\(\\circ\\) is any of \\(+, *\\). In other words            addition and multiplication should be commutative.</li>            <li>There must be two <i>distinct</i> elements \\(e_1\\) and \\(e_2\\) of the type \\(T\\) such that, for any \\(a\\) of \\(T\\), \\(a+e_1 = a\\)            and \\(a*e_2 = a\\). You can see that those two elements are supposed to imitate the behaviour of zero in addition and one in multiplication, respectively.            We call these the <i>addition identity</i> and <i>multiplication identity</i> respectively.</li>            <li>Subtraction (\\(-\\)) and Division (\\(/\\)) should work in such a way that for every \\(a\\) of \\(T\\), \\(a - a = e_1\\) and \\(a/a = e_2\\).            So, like with numbers, subtracting something from itself should yield the addition identity and dividing something from itself should yield the            multiplication identity.</li>            <li>When comibining all those operations together, they should be distributive (so, for every \\(a\\),\\(b\\) and \\(c\\) of \\(T\\),            you should have: \\(a*(b+c) = a*b + a*c\\).</li>        </ol>        <p>Now, there could be cases where there's no sense in defining one "group" of operations; for example,        in pointer arithmetic, only addition (and subsequently, subtraction), makes sense, as it        literally represents moving from one memory position to another, but multiplication (and division) doesn't. Hence, it's also acceptable        if one only defines overloads for either \\(+\\) (and \\(-\\)) or \\(*\\) (and \\(/\\)), still        applying the above rules. This, in math, is known as an <i>abelian group.</i></p>        <p>If you have overloaded the addition and multiplication operators, then you should overload the        modulo operator only in the following scenario and following manner:</p>        <p><i>For every \\(a\\), \\(b\\) and \\(r\\) of \\(T\\), there must be a unique element \\(n\\)        of \\(T\\) such that \\(a = n*b + r\\) holds true. Only in that case then, \\(%\\) shall        be overloaded and satisfy: \\(a\\,\\%\\,b = r\\).</i></p>        <p>There's a last situation where I'd consider it acceptable to overload all these        operators. Assume you have two types \\(T\\) and \\(V\\). \\(T\\) is defined as a        field, as discussed above, but you also have the following overloads:</p>        <pre>    V operator + (const V& u, const V& v); 
    V operator - (const V& u, const V& v); 
    V operator * (const T& a, const V& u);     </pre>        <p>Someone may suspect what is going on. These, in fact, are the declarations for        <i>vector addition</i> (\\(+\\) and \\(-\\)) and <i>scalar multiplication</i> \\(*\\), fundamental operations        of what we call "vector spaces". Similarly to fields, some rules must apply to how        those operations work, if they are to truly represent those of a vector space, but        they are similar enough to those of a field.</p>        <ol>            <li>Vector addition (specifically \\(+\\)) needs to be commutative.</li>            <li>There must be an element \\(w\\) of \\(V\\) such that every vector subtracted            from itself will yield it (\\(u - u = w\\), for every \\(u\\) of \\(V\\)). This            \\(w\\) is similar to the zero vector (\\(\\vec{0}\\)) for the common vectors that            consist of tuples of numbers.</li>            <li>The additive identity of \\(T\\) when multiplied with any vector \\(u\\)            of \\(V\\) must yield the \\(w\\) mentioned in (2) (so, for every \\(u\\) of \\(V\\),            \\(e_1*u = w\\)).</li>            <li>Similarly to the previous case, vector addition and scalar multiplication must            be distributive. So for any \\(a\\) of \\(T\\) and any two \\(u\\) and \\(v\\) of \\(V\\), you            must have \\(a*(u + v) = a*u + a*v\\).</li>        </ol>        <p>Of course, as you may have noted, in the case where you want the basic arithmetic        operators to be used for vectors, division doesn't make much sense to be used. You also        shouldn't use the multiplication operator for the dot and cross products of vectors;        you should just use proper function identifiers for these (for example, you can do         <code>T dot(const V& u, const V& v);</code> and <code>V cross(const V& u, const V& v);</code>)</p>                <h2>The increment and decrement operators (<code>++</code> and <code>--</code>)</h2>        <p>Those should always be accompanied by an overloaded <code>+</code> and <code>-</code>.        On top of that, your type should also have a notion of "the next element" and "the previous element".        In other words, if for your type it makes sense to put its elements on a line and "move to the next one"        or "move to the previous one", then you should use <code>++</code> and <code>--</code>, respectively,        to express those concepts.</p>        <h2>The bitshift operators (<code><<</code> and <code>>></code>)</h2>        <p>This one is a bit of a doozy, because, even though I generally like the STL,        their use of the bitshift operators is one I disagree with. Specifically, they are        used for string streams to input and output data.</p>        <p>However, I think you should overload those operators only in a way "loyal" to their        original use: To shift a number's digits up or down a place. How the builtin operator        achieves this, for example, is by dividing (for <code>>></code>) and by multiplying (for <code><<</code>)        the number on the left of the operator by \\(2\\) raised to the power indicated by the number        on the right. For numbers written in base \\(2\\), this has the effect of shifting the digits        down or up. And since for this base, they represent bits, the operators are called "bitshifting operators".</p>                <h2>The bit arithmetic operators (<code>~</code>, <code>&</code>, <code>|</code> and <code>^</code>)</h2>        <p>Similar to the bitshift operators, you should also remain loyal to the original function of these operators.        A good scenario I can think of where you could overload these operators is when you want to create a bitflag-like        object, so you can have stricter typing and use enum classes instead of preprocessor macros to define flags.</p>                <h2>The logical operators (<code>!</code>, <code>&&</code> and <code>||</code>)</h2>        <p>As mentioned in the introduction, those should only return boolean values. I also do not        find any reason to strafe away from their original purpose.</p>        <p>So, long story short, you should        only really overload those types for a user-defined type only if you intend said type        to be able to represent a logical value. Such types are usually integral types (like        integers), but really, any type for which the idea of "being equal to" and "being different from" is well defined        will do; in this case, you can pick one value to represent "the truth" and the other(s) to represent        "the falsehood" (this is, in fact, very similar to how booleans work: under the hood, they are integers        where 0 represents "falsehood", whilst        any non-zero integer is clumped together under the label "truth". </p>                <h2>The relational operators (<code>==</code>, <code>!=</code>, <code><</code>, <code>></code>, <code><=</code>, <code>>=</code> and <code><=></code>)</h2>        <p>As with the logical operators, those operators should also be restricted to returning boolean values (except for <code><=></code>        which returns an integer).        And, as their name suggests, they should be restricted to expressing propositions concering the relations        between members of a type; in more mathematical terms, they should be used for the ordering of the elemenets of        a type. </p>        <p>But what is an ordering anyways? First of all, to talk about orderings, we refer to two        operators. Those are the equality (\\(=\\)) operator and another one representing some type of        inequality, typically the "lesser than" inequality (\\(<\\)). All the other operators are        either combinations of those two or negations of those two or their combinations, so, in a sense        they aren't fundamental and thus, unnecessary to predefine them.</p>        <p>Despite our intuition, there's really no meaning attached to either of these operators, at least        no strict meaning. At most, if two elements of a type are "equal", that means they are indistinct and,        thus, the same element. But the \\(<\\) operator only imposes a hierarchy for the elements of a type,        a hierarchy which you are free to define however you want, no less (Although, specific fields in math        do require specific rules to be followed when defining this hierarchy).</p>        <p>Of course, just because you can define this hierarchy however you want, doesn't mean that        any such definition will be useful. Out of all those that one can conjure in their mind,        there are two types of ordering that are particularly useful. The first is called <i></i> total,        and it is when for any two elements \\(a\\), \\(b\\) and \\(c\\) of type \\(T\\), the following are true:</p>        <ul>            <li>\\(a = a\\). This property is called reflexivity. It essentially states the obvious; Something must be the same with itself. (Fun fact from            type theory: the reflexive property of equality is the only way the so called "equality of elements of type" type is (usually) introduced. Proving            that two things are equal in type theory, thus, consists of toying around with functions and replacements in order to end up with this reflexive equality).</li>            <li>If \\(a < b\\) and \\(b < c\\), then \\(a < c\\). In other words, total ordering is transitive.</li>            <li>\\(a < b\\) and \\(b < a\\) being true at the same time is impossible.</li>            <li>If \\(a \\neq b\\) (\\(\\neq\\) being the negation of \\(=\\)), then either            \\(a < b\\) or \\(b < a\\) must be true (but obviously not both at the same time,            as imposed by the previous rule).</li>        </ul>        <p>On top of that, if you take any subset of the elements of \\(T\\), and you find that        it has an element that is lesser than any other element in that subset (except for itself, obviously),        then this is called a <i>well-ordering</i>.</p>        <p>The other type of ordering is called <i>partial</i> ordering and its difference is that        the last rule (about either \\(a = b\\), \\(a < b\\) or \\(b < a\\) being true) needs not apply.<p>        <p>I think you know where this is going. Overloading the relational operators (except for <code><=></code>) should        ensure that the type they are overloaded for is, at least, partially ordered.</p>        <p>Of course, I mentioned only <code>==</code> and <code><</code>, but it is clear what the other        operators should be:</p>        <ul>            <li>\\(a \\neq b\\) is "not \\(a = b\\)"</li>            <li>\\(a \\leq b\\) is "\\(a = b\\) or \\(a < b\\)".</li>            <li>\\(a > b\\) is "not \\(a \\leq b\\)".</li>            <li>\\(a \\geq b\\) is "not \\(a < b\\)".</li>        </ul>        <p>If        you want to overload <code><=></code> as well, then you need to ensure a total ordering,        as it essentially checks the last rule mentioned for a total order. (First <code>a <=> b</code> checks \\(a = b\\),        and returns 0 on success. If it fails, it checks whether \\(a < b\\), and it returns a positive integer on success,        otherwise it assumes \\(b < a\\) and it sends a negative integer.</p>        <p>Fun math fact: set theory tells        you that you can always find a well-ordering for any set you can think of. This often causes        confusion, as we learn, for example, that complex numbers "cannot be ordered". This is a bit of        a miscommunication though, as what this "cannot be ordered" refers to is that they cannot be an <i>ordered field</i>,        not an ordered set! If you remember from the part about overloading the arithmetic operators, a field        behaves like how we expect "numbers" to behave, informally speaking. And an "ordered field" not only has        a well-ordering, but it imposes extra rules on how this ordering must be, so as to keep this intuition intact. Thus,        if you plan for a type to both overload the arithmetic operators and the relational operators, ensure that        for any three elements \\(a\\), \\(b\\) and \\(c\\) of \\(T\\):</p>        <ul>            <li>If \\(a \\circ b\\) then \\((a + c) \\circ (b + c)\\), where \\(\\circ\\) stands            for any relational operator.</li>            <li>If \\(a = b\\) then \\(a*c = b*c\\).</li>            <li>If \\(a > 0\\) and \\(b > 0\\) then \\(a*b > 0\\), where \\(0\\) refers to the additive identity of the type.</li>            <li>Likewise, if \\(a < 0\\) and \\(b < 0\\), then \\(a*b > 0\\).</li>            <li>However, if \\(a < 0\\) but \\(b > 0\\), then \\(a*b < 0\\).</li>        </ul>        <p>Essentially, those rules define how "positives" and "negatives" behave. For any        "positives" you multiply together, the result is also positive. For any "negatives"        you multiply together, the result is positive. If you multiply a "negative" with a "positive"        the result must be a "negative".</p>                <h2>The subscript operator (<code>[]</code>)</h2>        <p>This is simple enough. The subscript operator should be overloaded for an object that        has an "array" or "container" like structure. In other words, somoene should overload the        operator like this:</p>        <pre>    template< typename I >
    concept Integral = std::is_integral< I >
    
    template< typename U, Integral I >
    class T {
        // members of class
    public:
        U& operator [] (I i) const;
    };        </pre>        <p></p>        <p>In other words, the subscript operator should NOT modify the object that overloads it        and instead should return a left reference to an object of type \\(U\\) which is contained        in an appropriate (non static) structure within objects of type \\(T\\). And because of that        semantic, this requires that <code>I</code> is an integral type, since it does not make intuitive        sense to access positions in a container or an array using something like a <code>float</code>.</p>                <h2>The pointer and address operators (<code>*</code> and <code>&</code>)</h2>        <p>The only way you should overload the pointer operator is if you intend to make        a type that "looks like" a pointer but is meant to be memory safe. For examples,        see smart pointers, iterators and other such constructs of the STL. It should also        allow for pointer arithmetics, if such a thing makes sense for your type at least, so        it should be accompanied by proper overloading of the <code>+</code>, <code>-</code>, <code>++</code>        and <code>--</code> operators.</p>        <p>As for the address operator, I am strongly against overloading it. It should always        be reserved for getting the address of an object, nothing more, nothing less.</p>                <h2>The function call operator (<code>()</code>)</h2>        <p>This operator has the least restrictions on how it should be overloaded out of all.        It is commonly used for        making function objects, sometimes also known as functors. Function objects are,        in a sense, generalisations of functions, with the ability to have an internal state.        This could be useful, for example, as a simple implementation of asynchronous functions        (although the C++20 standard now defines coroutines, albeit they are quite complicated).</p>        <p>As stated before, because of the nature of function objects, you are completely free        on what this operator will do when overloaded. In fact, you are also free to have side effects        with this overload.</p>        <p>Fun fact: Lambda expressions in C++ are, in fact, syntax sugar for function objects.        During compilation, the compiler turns the lambda expression into a class that overloads        the <code>()</code> operator.</p>                <h2>The member/pointer of member access of pointer operators (<code>-></code> and <code>->*</code>)</h2>        <p><code>-></code> is special, in the sense that it's quite restricted in what it can        do. Specifically, it can only be overloaded as a function with no arguments that returns        a pointer to an object or an object that has overloaded the operator. Once it reaches        a pointer, this recursive process stops and then member lookup is performed.</p>        <p><code>->*</code> on the other hand is not restricted at all, and can be a function of        any two arguments.</p>        <p>Due to this idiosyncracy, I strongly believe that you should avoid at any cost to overload        either of these operators. Only reasonable situation to overload the operator I can think of is when your        object contains another object whose members you'd like to make visible to the end user.</p>                <h2>The assignment operators (<code>=</code> and co.)</h2>        <p>As said in the general rules of thumb, first of all, these operators must always return a left        reference to the object they operate on (so, the functions should always end with <code>return *this;</code>).</p>        <p>Other than that, they should be accompanied by an overload of the relational operator <code>==</code>. Specifically, you should        ensure that if you have something like the following:</p>        <pre>    T obj1( /* initialization */ );
    T obj2( /* initialization */ );
    
    if ( obj1 = obj2; 
         obj1 == obj2 ) { 
        return 0;
    } else { 
        return 1;
    }        </pre>        <p>Then you will always have '0' be returned. In other words, assigment must work in such a way        that the assigned object will be equal to the assignee after the assignment. Of course, it        <i>can</i> make sense that (after conversion), an element of some type is "equal to" or "can be assigned" an        element of another type; try to ensure the same thing as above in these cases as well.</p>        <p>For "compound" assigment operators, always make sure the overload respects the following:</p>        <ul>            <li><code>obj1 _= obj2</code> is the same as <code>obj1 = obj1 _ obj2</code>, where <code>_</code> stands            for any operator <code>=</code> is paired with.</li>        </ul>        <p>NOTE: You shouldn't confuse the assignment operator(s) with the constructors of an object (even though some objects            can use <code>=</code> as part of their initialization syntax). They are different things altogether (and you should prefer            the <code>{ /*expression*/ }</code> to the <code>= /* expression */</code> initialization syntax anyways; it has the added benefit that it protects            against narrowing).</p>                <h1>Conclusion</h1>        <p>And this is all I have to say about the matter. For some operators I had to say more stuff compared        to others and, truth be told, this list may seem extremely restrictive when it comes to overloading.</p>        <p>Of course, I think it goes without saying that all these are but mere suggestions, aimed        to minimize potential misunderstandings when reviewing (or writing) code. (Almost) Nothing stops you        from giving the wildest definitions imaginable to your overloads. Or you may work under a        specification at a workplace which orders different rules for overloading operators, in which case        you should probably stick to those rules. Whatever is the case, have fun overloading, but never cease        to be cautious!</p>        `},{slug:"vulkan_concepts_part1",hotwords:["code","graphics","vulkan"],title:"Learning the basics of Vulkan: Part 1",featured_image:"https://upload.wikimedia.org/wikipedia/commons/f/fe/Vulkan_logo.svg",summary:"An introduction to the basic concepts of Vulkan",updated:"2024-05-13T00:00:00.000Z",published:"2024-03-04T00:00:00.000Z",author:"Mantis",body:`<p>Up until some years ago, two were the main, dominant graphics APIs;         OpenGL and DirectX. Both were great, and enabled people to build amazing things         in the domain of graphical applications. However, both came with their own set         of pitfalls.</p>                <p>DirectX, whilst extremely powerful, is only available on Windows. Not only         that, but DirectX's ability mostly stops at graphics. Whilst it does provide compute         capabilities, it does not delve deep into them, and they are mainly used as         a helping hand in graphical applications.<p>                <p>OpenGL, whilst not being as limited in reach as DirectX, has its own set         of issues. It abstracts way too much over the GPU and generally the graphics         pipeline, leaving the programmer unable to really finetune their application         and squeeze that last drop of performance. As for computing, it suffers         the same fate as DirectX. It negelects compute capabilities other than having         the bare necessities, which, similarly, exist only to serve the graphics pipelines.        </p>                <p>A new API was needed. One that could combine the best of both worlds.         The cross-platform capabilities of OpenGL, and the low-level, high-performance         of DirectX. Not only that, but it would be perfect if it was also easily         extensible, so that it could be used for more than just graphics, without needing         to jump ship to another API, such as CUDA or OpenCL.         And thus, the Khronos Group, the same group that created OpenGL,         gave birth to the Vulkan specification, in 2016.</p>            <figure>                <img src="https://upload.wikimedia.org/wikipedia/commons/f/fe/Vulkan_logo.svg" alt="undefined" width="327" height="308"></p>                <figcaption>Fig. 1: Vulkan logo.
 Vulkan and the Vulkan logo are registered trademarks of the Khronos Group Inc.</figcaption>            </figure>        <p>However, quickly, Vulkan gained a specific reputation. Whilst it provided         the utmost control over a GPU, and not only in graphics, but compute and transfer        operations as well, this came at the cost of the API's friendliness to the         programmer. Maybe the most notorious example of this is the Vulkan implementation         "Hello World" of         graphics applications: In Vulkan, to draw <i>the triangle</i>        you'd end up writing as many as <i>1 000</i> lines of code! Not only         this, but those lines of code aren't exactly straightforward either; The user         has to learn a lot of new concepts in order to be able to even begin drawing basic         geometry!</p>                <p>But I do believe that Vulkan's difficulty is greatly overstated. Whilst         the size of information that one needs to know is, admitedly, not small,         getting a bit acquainted with the main concepts is much easier than it seems.         </p>        <p>        In this post, I want to go over the general "morphology" of the Vulkan API. What to expect         from its syntax, its general conventions, this sort of thing. In another post, I will         go over the main concepts that concern the mechanics of the API (which are not just         specific to Vulkan, but apply to any grahpics API).        </p>        <p>        <i>Nitpicking note: Technically speaking, Vulkan is not an API, but a specification for an API.        In other words, it's a document that describes how someone's API should look and         behave in order to be considered a Vulkan API. However, for the sake of simplicity,         I will refer to it as an API.</i>        </p>        <h1>The general conventions of the Vulkan API</h1>        <p>A good API is first and foremost based on good syntax conventions. Vulkan is no different.         The nice thing about it, as well, is that the conventions are simple enough.         The casing convention is <code>camelCase</code>.        The naming of identifiers is the following: </p>        <ul>            <li><i>Functions</i> get prefixed with <code>vk</code>. There             are further conventions concerning them:             <ul>                <li><i>Host side functions</i> (i.e. functions that get excecuted                     the moment they are called from the code, by the host itself)                     have verbs that describe their general purpose right after the                     prefix. Some of the most common                     verbs one may stumble onto are:                     <ul>                        <li><code>Create</code> is used for functions which create                         handles to objects necessary for the API to function. (example: <code>vkCreateInstance</code>)</li>                        <li><code>Destroy</code>, predictably, is used for                         functions which destroy the handles created by the API. (example: <code>vkDestroyInstance</code>)</li>                        <li><code>Allocate</code> is similar to <code>Create</code>                         with the difference that it implies the API doesn't use new                         resources to create the handles. Rather, it depends on already                         created handles, and uses the resources they offer so they can                         be created. (example: <code>vkAllocateMemory</code>)</li>                        <li><code>Free</code> is the equivalent of <code>Destroy</code>                         for handles created with <code>Allocate</code>. (example: <code>vkFreeMemory</code>)</li>                        </li>                        <li><code>Get</code> is used for functions that query information                         from anything the API interfaces with. Most common usecase is when                         trying to query information about the GPU. (example: <code>vkGetPhysicalDeviceProperties</code>)</li>                        <li><code>Bind</code>. In Vulkan, you will often find yourself creating                         handles of objects that represent resources on the GPU but are not                         directly accessible by the GPU. This is why Vulkan offers functions that                         bind those handles to actual GPU resources (mainly memory). The convention                         is that after the verb, the two following nouns are the handle to be bound and                         the resource it will be bound to respectively. (example: <code>vkBindBufferMemory</code>, which                         binds buffers, the simplest form of data storage in Vulkan, to GPU memory)</li>                        <li><code>Reset</code>. Some handles are associated, in the specification,                         to a cycle of usage. A common example is command buffers, which begin in the                         <i>initial</i> state, which is an empty state, of sorts, they are then recorded (move                         to the <i>recorded</i> state), submitted (<i>pending</i> state), executed (<i>executed</i>                         state) etc. The API allows the user to bring some of the handles back to their                         initial state, so they can be overwritten and used again. (example: <code>vkResetCommandBuffer</code>)</li>                    </ul>                    Note that there aren't types of functions like <code>Reallocate</code>                     or <code>Set</code>. This is because of one of the core philosophies of Vulkan;                     immutability. Once you have created or allocated something,                     it cannot be changed (in terms of used resources). Do note though that a lot of Vulkan objects do                     support the usage of caches or previous objects to speed up their own                     creation.                 </li>                 <li> The other type of functions that Vulkan offers is <i>device commands</i>.                 Those, unlike host side functions, are not executed once called. Instead, what                 they do is record a command to a command buffer, which is to be submitted and                 executed by a device later in the program. Those functions <i>always</i> have the                 infix <code>Cmd</code> follow the prefix <code>vk</code>.                And since they are commands, the <code>Cmd</code> prefix is always followed by a verb                 (example: <code>vkCmdDraw</code>).                 </li>            </ul>            </li>            <li><p><i>Handles</i>, <i>Enums</i> and <i>Structs</i> get prefixed with <code>Vk</code>             (similar to functions but the first letter is uppercase.</p>            <p>A really useful thing to remember, for structs, is that those used to pass             information to functions, such as handle creation functions, are oftentimes             named similarly to those functions. They are prefixed with <code>Info</code>             and the verb of the function is placed <i>after</i> the handle name. This             is especially useful for finding the related documentation for those structs             as they can often contain a lot of fields and are hard to remember. (example:             the struct used for swapchain creation [the <code>vkCreateSwapchain</code> function]             is called <code>vkSwapchainCreateInfo</code>).</p></li>        </ul>        <p>Another important convention is the addition of a couple of capital letters on the end         of some identifiers. Those identify two things: First, that the identifier is part of an         extension, which implies both that the identifier cannot be used unless it is imported         during instance or device creation. Second, the letters tell who is the creator of the         extension and that a device supporting Vulkan may not necessarily support the extension         the identifier belongs to. So, for example, identifiers ending with <code>KHR</code> are made by the         Khronos Group itself, and identifiers ending with <code>NV</code> are made by Nvidia.</p>                <p>        In addition, for parameters and struct fields, Vulkan uses a "weak" form of Hungarian         notation. By this, I mean that it prefixes pointers with <code>p</code> and arrays         with <code>pp</code> (so, as double pointers). Since, for Vulkan, arrays are pointers,         always expect a field adjacent to any array that is meant to hold the number of elements <i>in</i>         the array. So, the struct <code>VkDeviceCreateInfo</code>, for example, contains <code>ppEnabledExtensionNames</code>         and also <code>enabledExtensionCount</code>, the names of the extensions you want to activate for         a device and how many of these extensions you have in your double pointer. Other than         pointers, though, as I showed with the previous example, Vulkan does not use the Hungarian         notation. Instead, it just describes the field.</p>        <p>Last but not least, every struct contains an         <code>sType</code> field, an enum which identifies it. The value of the field is         usually easy to remember, as it generally has the form <code>VK_STRUCTURE_TYPE_</code>         followed by the name of the struct. (example: <code>VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR</code>)        </p>        <p>Final note: Some names of functions and structs have the number 2 appended on them. For structs         this usually means that they are actually linked lists where extensions can extend on the "2-less"         structs (example: <code>vkPhysicalDeviceExtensions2</code>). On the other hand, functions that have 2 appended on them tend to replace the usual Vulkan model         of passing function arguments through structs for multiple function arguments instead. An exception         to this is getter functions, where the 2 simply implies they return structs (or arrays of structs) whose type name         has 2 appended on them. Note that the 2 <i>always</i> precedes the extension acronym (example:         <code>vkGetPhysicalDeviceSurfaceCapabilities2KHR</code>).</p>        <h2>The "modes" of the Vulkan API<h2>        <p>One of the best things about Vulkan is how <i>consistent</i> it is as an API;         you always know the general flow and form of commands when it comes to using it.         Hence, you can divide the API into a rough set of "modes" each of which has a         rather predictable structure and a rather predictable outcome.</p>        <h3>Querying information</h3>        <p>Obviously, to make an API all about using the GPU usable itself, we need         to be able to learn as much as we can about it.</p>        <p>The way Vulkan presents this information is through the use of structs and arrays.         To get these from Vulkan, you always use functions that start with <code>vkGet</code>.        Those functions are always void in their type, so the way they return information is through         the use of pointers. Hence, the usual process to query and retrieve such info is the following: </p>                <ol>                    <li> Create a struct representing the "returned" data structure, or a dynamic                     array type (an <code>std::vector</code> object in C++, or a combo of an unsigned integer                     and pointer to the struct type the array is going to hold, in C, for example) that holds such structs,                     if the function returns arrays </li>                    <li>If the function returns arrays, then you first must querry the size of the array (Thus, the argument                     that returns the actual data must be set to <code>NULL</code> first time you call the function).                     Since getter functions                     are void in Vulkan, checking if the size returned is nonzero is imperative for proper error checking.</li>                     <li>Call the function a second time, this time using both the -returned- size of the array, if applicable,                     and the variable that holds the (array of) struct(s) itself. Should everything go correctly, you now have                     done a proper query and the data is immediately usable. This part of the process should not, generally, fail                     (unless you are unlucky enough to get an Out of Memory error).</li>                </ol>        <p>An example of such process can be seen here:</p>         <pre>    VkPhysicalDeviceProperties properties; 
    vkGetPhysicalDeviceProperties(physicalDevice, &properties);         </pre>        <p>And if you have an array:</p>         <pre>    uint32_t extensionCount; 
    vkEnumerateDeviceExtensionProperties(physicalDevice, nullptr, &extensionCount, nullptr); 
    std::vector&ltVkExtensionProperties&gt availableExtensions(extensionCount); 
    vkEnumerateDeviceExtensionProperties(physicalDevice, nullptr, &extensionCount, availableExtensions.data());         </pre>        <p></p>        <figcaption><i>NOTE: In both of these examples, <code>physicalDevice</code> is a variable         of type <code>VkPhysicalDevice</code> and is assumed it's created sometime before the imaginary         program that would contain the presented snippets of code.</i></figcaption>        <p></p>        <h3>Creating handles</h3>        <p>Of course, having data about the GPU is not enough. We also want to do stuff with it.         For the majority of the time, Vulkan allows the programmer to interact with the GPU through the         use of handles. Those are immutable objects that represent resources on the GPU.         The process of creating them is rather straightforward:</p>        <ol>            <li> Create the struct responsible for passing info for the handle's creation.             Remember, those structs always take the form <code>vk</code> <i>+ [handle name] +</i> <code>CreateInfo</code>.             Alternatively, you can pass the creation parameters directly to the creation function, by             using its variant with a 2 appended on it. However, do note that this might make your code more unreadable.             </li>            <li> Create a variable that will hold the handle, its type being the appropriate handle             you want to create. Obviously, it will be initialized as <code>NULL</code> first.             It's especially important to remember that Vulkan handles are, under the hood, struct pointers, so you always             need to be cautious when using them. Vulkan does not check for null handles when you pass them             to functions, which means that dereferencing a null handle <i>will</i> cause a segmentation fault. </li>            <li> Call the function that creates the handle. The function is always prefixed with <code>vkCreate</code>.             The function's arguments are the struct with the creation info, the handle variable and, usually             a handle which acts as a parent to the created handle. The newly created handle's address will be placed             in the variable you passed to the function. Note that creation functions return an error code (Their type is <code>VkResult</code>).             Also, upon failure, the handle variable will remain null. Thus, it's always prudent to check             the error code, especially because a lot of times it's descriptive enough to tell you specifically what went             wrong. For example, if you use a window creation API like GLFW, which tend to implicitly             initalize OpenGL, if you try to create a Vulkan swapchain for a window created by the afore mentioned             API, <i>without</i> requesting that the created window is API-less,             Vulkan will throw an error code complaining the window already has a graphics API             associated with it. </li>        </ol>        <p> For handles that are allocated, instead of created, the process is identical         with the only exception being that creation functions are now allocation functions (hence         their names use <code>Allocate</code> instead of <code>Create</code>. Same goes for the info structs).        </p>        <p>Since I mentioned that some handles act as parents to other handles, here are some common relationships         between handles (I will discuss on a later post what these handles are specifically):</p>        <ul>            <li><code>VkInstance</code> >> <code>VkSurface</code></li>            <li><code>VkInstance</code> >> <code>VkDevice</code> >> <code>VkSwapchain</code></li>            <li><code>VkInstance</code> >> <code>VkDevice</code> >> <code>VkRenderPass</code></li>            <li><code>VkInstance</code> >> <code>VkDevice</code> >> <code>VkPipeline</code></li>            <li><code>VkInstance</code> >> <code>VkDevice</code> >> <code>VkCommandPool</code> >> <code>VkCommandBuffer</code></li>            <li><code>VkInstance</code> >> <code>VkDevice</code> >> <code>VkMemory</code></li>            <li><code>VkInstance</code> >> <code>VkDevice</code> >> <code>VkBuffer</code> OR <code>VkImage</code></li>        </ul>        <p>Note that this is not an exhaustive list, nor does it show interconnections between handles.         For example, a <code>VkSwapchain</code> will require a <code>VkSurface</code> to be created,         which is passed through its creation info struct. It only shows what handle you are expected to         pass as a parent handle when creating (or allocating) another handle. An interesting observation is that the <code>VkDevice</code>         is probably the most important handle in Vulkan, as it's the parent of a huge number of other Vulkan handles.         Of course, this is expected for a GPU API. </p>        <p>Here is an example of the creation of an instance handle (instances being the "root" of all         Vulkan applications, will be discussed in another part):</p>        <pre>    VkInstance instance{ nullptr }; 
    VkApplicationInfo appInfo{ 
        .sType{ VK_STRUCTURE_TYPE_APPLICATION_INFO }, 
        .pApplicationName{ "Hello Triangle" }, 
        .applicationVersion{ VK_MAKE_VERSION(1, 0, 0) }, 
        .pEngineName{ "No Engine" }, 
        .engineVersion{ VK_MAKE_VERSION(1, 0, 0) }, 
        .apiVersion{ VK_API_VERSION_1_3 } 
    }; 
    VkInstanceCreateInfo createInfo{ 
        .sType{ VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO }, 
        .pApplicationInfo{ &appInfo } 
    }; 
    VkResult err{ VK_SUCCESS }; 
    if( ( err = vkCreateInstance(&createInfo, nullptr, &instance) )
            != VK_SUCCESS ) { 
        std::cerr << "An error happened here!\\n"; 
    }        </pre>        <figcaption><i>NOTE: As you may have noticed in the example, creation functions         have one additional argument. This is a pointer to a custom allocator,         in case you want memory allocation to not use the default one. It's usually        not necessary in most cases, unless you are working with an application where         super-efficient memory management is extremely crucial, so it's usually set to         <code>nullptr</code>. Another thing to note is that some functions may contain even more         arguments than the parent handle, the created handle and the allocator. For example         pipeline creation functions also contain cache information arguments, which         greatly help decrease the time needed to create a pipeline.</i></figcaption>    <h3>Recording commands</h3>    <p>As revealed earlier, commands (that the GPU will execute) are not executed     the moment they are called. Instead, they are recorded to a command buffer, which     then is submitted to a queue (a command buffer is simply a chunk of memory containing     instructions for the GPU, and a queue is hardware on the GPU that is responsible for     executing those instructions. More on a later post). The process of recording command buffers     contains the following steps:     </p>    <ol>        <li>First, you have to create the resources for the command buffers. This is simply done         by creating a command pool with a device and then allocating a command buffer from that         pool.</li>        <li>Then, you begin recording the command buffer. This is done by calling the following function:         <code>vkBeginCommandBuffer</code>. The function takes the command buffer and a struct.         This struct isn't really important, unless you want to use secondary command buffers (        which are practically subcommands to be executed by main commands).</li>        <li>After you have begun recording, you are ready to record the commands.         As mentioned above, a command is any function that starts with <code>vkCmd</code>.         Note that the order of the commands are important, as their execution is sequential. </li>        <li>After you have recorded all the commands, you must end the recording, by using the function         <code>vkEndCommandBuffer</code>. This function takes the command buffer as its only argument. </li>    </ol>    <p>A simple example of the above process is the following: </p>    <pre>    VkCommandPool commandPool{ nullptr }; 
    VkCommandBuffer commandBuffer{ nullptr }; 
    VkCommandPoolCreateInfo poolInfo{ 
        .sType{ VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO }, 
        .queueFamilyIndex{ queueFamilyIndex } 
    }; 
    vkCreateCommandPool(device, &poolInfo, nullptr, &commandPool); 

    VkCommandBufferAllocateInfo allocInfo{ 
        .sType{ VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO }, 
        .commandPool{ commandPool }, 
        .level{ VK_COMMAND_BUFFER_LEVEL_PRIMARY }, 
        .commandBufferCount{ 1 } 
    }; 
    vkAllocateCommandBuffers(device, &allocInfo, &commandBuffer); 

    VkCommandBufferBeginInfo beginInfo{ 
        .sType{ VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO } 
    }; 
    vkBeginCommandBuffer(commandBuffer, &beginInfo); 

    vkCmdBindPipeline(commandBuffer, VK_PIPELINE_BIND_POINT_GRAPHICS, graphicsPipeline); 
    vkCmdDraw(commandBuffer, 3, 1, 0, 0); 

    vkEndCommandBuffer(commandBuffer);    </pre>    <figcaption><i>NOTE: The above command isn't really a proper way to do something like drawing     on the screen or executing a pipeline. The actual process is more involved and requires     knowing some additional concepts, such as the concept of a render pass, which I will     discuss in a later post. This is just a simple example to show the general process of     recording commands. </i></figcaption>    <p></p>    <h3>Miscellaneous actions</h3>    <p>There are other actions that one can do with Vulkan that don't fit in the above     categories. Usually, those represent actions that the host can do and are usually     the most direct way to interact with the GPU (like when it's time to submit commands).    Some other times, they are used to     interface with the windowing system when you want to ask for resources related     to graphics (like the display, if you want exclusive fullscreen).     There's not a specific pattern to them, so I will not go into detail about them here.     </p>    <h1>Conclusion</h1>    <p>Of course, this is not an exhaustive guide on how the Vulkan API works. There are many nooks and crannies     that make it up and a blog post is simply not enough to make sense of it all.     However, simply knowing the above is enough to get you far into Vulkan, at least     far enough to be able to make sense of the official documentation and some of the     available tutorials that exist out there. The rest is just a matter of being curious     and learning graphics programming, both of which are independent of this specific     API and apply to any old graphics related programming interface.</p>    <p>On the note of official documentation, I want to note that it is probably     one of the best documentations I have ever seen. It is extremely detailed and     covers almost every aspect of the API. The most exceptional thing about it is that     it's simply just the specification of the API, broken down into chunks; this     is not only an interesting fact, considering that specifications are usually     the last place the average programmer would look for for guidance, especially     a novice one, but it's also a testament, at least in my eyes, to the quality     of the API as a whole. </p>    `},{slug:"example_post",hotwords:["example","random"],title:"Example Post",featured_image:"./src/assets/hehe.jpg",summary:"This is an example post",updated:"2024-01-20T00:00:00.000Z",published:"2024-01-20T00:00:00.000Z",author:"Mantis",body:`<h1>This is an example post</h1>
        <p>I hope everything works properly.</p>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit,        sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.         Quam lacus suspendisse faucibus interdum posuere lorem ipsum.         Tincidunt id aliquet risus feugiat in ante metus dictum at.         Ultricies lacus sed turpis tincidunt id aliquet risus feugiat in.         In massa tempor nec feugiat nisl. Lectus urna duis convallis convallis         tellus id interdum velit laoreet. Purus non enim praesent elementum         facilisis leo vel fringilla. Senectus et netus et malesuada fames ac         turpis egestas. Iaculis urna id volutpat lacus laoreet non.         Elit ullamcorper dignissim cras tincidunt lobortis feugiat vivamus at.         Quam nulla porttitor massa id. Risus sed vulputate odio ut enim.         Imperdiet sed euismod nisi porta. Malesuada pellentesque elit eget         gravida cum. Morbi leo urna molestie at elementum.         Consectetur libero id faucibus nisl tincidunt eget nullam non nisi.</p>
        <p>I will put an image here, to see how it looks:</p>
        <p><img src="https://cyber-mantid.xyz/src/assets/hehe.jpg" alt="undefined" width="327" height="308"></p>
        <p>Mesmerizing, no?</p>
        <p>I will also test a youtube video here:</p>
        <p><iframe width="597" height="336" src="https://www.youtube.com/embed/rXbfwabZLds" title="Fully Operational, Huh?" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen"></iframe></p>
        <p>Adipiscing tristique risus nec feugiat in fermentum. Nibh mauris cursus mattis         molestie a. Ipsum dolor sit amet consectetur adipiscing elit duis.         Consectetur adipiscing elit pellentesque habitant morbi. Sapien eget mi         proin sed libero. Tellus pellentesque eu tincidunt tortor aliquam.         Nulla porttitor massa id neque aliquam vestibulum morbi. Auctor urna         nunc id cursus metus aliquam eleifend. Arcu cursus vitae congue mauris rhoncus         aenean vel. Tempus urna et pharetra pharetra massa massa ultricies mi quis.         Turpis cursus in hac habitasse platea dictumst. Nec ullamcorper sit amet risus.         Nisl purus in mollis nunc sed. Integer eget aliquet nibh praesent tristique magna         sit amet. Auctor eu augue ut lectus. Lorem donec massa sapien faucibus et         molestie ac feugiat. Diam quam nulla porttitor massa id. Pulvinar sapien et         ligula ullamcorper malesuada proin libero nunc consequat. Nunc non blandit         massa enim nec dui nunc mattis enim. Amet volutpat consequat mauris nunc congue.</p>
        <p>Does latex work? Let's see:</p>
        <p>$$f(x) = \\int_0^xt^2dt$$</p>
        <p>Vulputate ut pharetra sit amet aliquam id. Non consectetur a erat         nam at lectus urna. Vitae turpis massa sed elementum tempus egestas sed sed risus.         Et netus et malesuada fames. Orci ac auctor augue mauris augue neque gravida in.         Sed faucibus turpis in eu mi bibendum neque egestas congue. Ipsum dolor sit amet         consectetur adipiscing. Praesent tristique magna sit amet purus gravida quis blandit.         Nisl purus in mollis nunc sed id semper risus in.         Justo laoreet sit amet cursus sit amet dictum sit. Consectetur adipiscing         elit ut aliquam purus sit. Dolor morbi non arcu risus quis. Adipiscing commodo         elit at imperdiet dui accumsan sit. Nisi porta lorem mollis aliquam ut porttitor leo.         Viverra aliquet eget sit amet tellus cras adipiscing. Nibh tortor id         aliquet lectus proin nibh nisl.</p>
<p>Nunc faucibus a pellentesque sit amet.         Duis ut diam quam nulla. Donec ac odio tempor orci dapibus ultrices in iaculis nunc.         Feugiat nibh sed pulvinar proin gravida. Sodales ut etiam sit amet nisl purus. Et molestie        ac feugiat sed. Malesuada proin libero nunc consequat interdum varius sit amet mattis.         Amet consectetur adipiscing elit duis tristique sollicitudin. Ipsum dolor sit amet         consectetur adipiscing elit duis. Etiam tempor orci eu lobortis elementum nibh.         Ultrices vitae auctor eu augue. Risus ultricies tristique nulla aliquet enim.         Blandit cursus risus at ultrices mi. Sed pulvinar proin gravida hendrerit.         Eleifend quam adipiscing vitae proin sagittis nisl.</p>
        <p>Scelerisque fermentum dui faucibus in. Enim facilisis gravida neque convallis         a cras. Ipsum dolor sit amet consectetur adipiscing elit pellentesque habitant.         Urna porttitor rhoncus dolor purus non. Ridiculus mus mauris vitae ultricies leo         integer malesuada. Ultrices vitae auctor eu augue ut lectus arcu bibendum at.         Sit amet cursus sit amet. Eleifend mi in nulla posuere sollicitudin aliquam         ultrices sagittis. Tincidunt praesent semper feugiat nibh sed pulvinar proin         gravida hendrerit. Et netus et malesuada fames ac turpis egestas integer eget.         Turpis egestas maecenas pharetra convallis posuere morbi. Netus et malesuada fames         ac turpis egestas sed tempus urna. Elit sed vulputate mi sit amet mauris commodo         quis. Facilisis sed odio morbi quis commodo odio aenean.</p>
<p></p>`}],We=et(1),Us=et(!0);et(1);function ft(n,e){return String(n*e)+"px"}function ni(n,e,t=1){return n>0?String(n*4.5**((e-1)*t))+"px":String(-n*4.5**((-e+1)*t))+"px"}function qe(n,e){return Us.value?n:e}const ow={class:"item-text-selected"},aw={class:"item-text-unselected"},lw=$t({__name:"HeaderSelection",props:{name:{},location:{},is_selected:{type:Boolean}},setup(n){Pn(s=>({"098cec06":j(qe)("rgb(39, 56, 81)","rgb(150, 160, 180)"),"26d9581c":j(qe)("rgb(220, 223, 255)","rgb(22, 17, 75)"),"147a6045":j(ft)(18,j(We)),f35ad996:j(qe)("rgb(119, 114, 165)","rgb(29, 24, 75)")}));const e=Hr();function t(s){return"/"+s}function i(s="home"){Bs.change_page(s),e.push(t(s)),Ds.value=[]}return(s,r)=>s.is_selected?(rt(),ot("div",{key:0,onClick:r[0]||(r[0]=o=>i(s.location)),class:"item-selected"},[ye("p",ow,Rt(s.name),1)])):(rt(),ot("div",{key:1,onClick:r[1]||(r[1]=o=>i(s.location)),class:"item-unselected"},[ye("p",aw,Rt(s.name),1)]))}}),cw={class:"header"},hw=ye("div",{class:"logo"},[ye("img",{src:sw,alt:"logo"})],-1),uw={class:"selections"},dw=$t({__name:"HeaderSection",setup(n){Pn(t=>({"0bee5918":j(qe)("rgba(66, 92, 132, 0.5)","rgba(153, 150, 182, 0.5)"),"02c26f92":j(qe)("rgb(93, 108, 131)","rgb(192, 199, 209)")}));const e=[{name:"Home",location:"home"},{name:"Blog",location:"blog"},{name:"About",location:"about"}];return(t,i)=>(rt(),ot("div",cw,[hw,ye("div",uw,[(rt(),ot(Bt,null,Rr(e,s=>vt(lw,{name:s.name,location:s.location,is_selected:j(Bs).active_page==s.location},null,8,["name","location","is_selected"])),64))])]))}}),fw={class:"card-inner"},pw={class:"card-image"},mw=["src","alt"],gw={class:"card-content"},yw={class:"title"},_w={class:"desc"},vw=$t({__name:"ItemCard",props:{image:String,name:String,go_to:String,description:String},setup(n){Pn(t=>({"8e04513e":j(ni)(200,j(We)),a909235a:j(qe)("rgb(28, 39, 56)","rgb(212, 212, 212)"),fb01a74e:j(qe)("rgb(93, 108, 131)","rgb(255, 255, 255)"),"6f11458a":j(ni)(150,j(We)),ee18a170:j(ft)(20,j(We)),"57c6c744":j(qe)("rgb(220, 223, 255)","rgb(22, 17, 75)"),13614298:j(ft)(14.5,j(We)),"754f36c6":j(qe)("rgb(147, 154, 170)","rgb(22, 17, 75)"),"2ef986a4":j(ni)(5e3,j(We)),"52d65640":j(ni)(320,j(We))}));function e(t){var i;(i=window.open((t==null?void 0:t.valueOf())??"","_blank"))==null||i.focus()}return(t,i)=>(rt(),ot("div",{onClick:i[0]||(i[0]=s=>e(n.go_to)),class:"card"},[ye("div",fw,[ye("div",pw,[ye("img",{src:n.image,alt:n.name},null,8,mw)]),ye("div",gw,[ye("div",yw,[ye("h1",null,Rt(n.name),1)]),ye("div",_w,[ye("p",null,Rt(n.description),1)])])])]))}}),Nn=(n,e)=>{const t=n.__vccOpts||n;for(const[i,s]of e)t[i]=s;return t},xw=Nn(vw,[["__scopeId","data-v-b6125b4f"]]),bw="/assets/dark_mode_icon-b0PaqpDM.svg",ww="/assets/font_size_icon-TNLLF5Z7.svg",cc=n=>(es("data-v-aa333377"),n=n(),ts(),n),Mw={class:"mode-container"},Sw=cc(()=>ye("div",{class:"label"},[ye("img",{src:bw,alt:"dark mode icon"}),ye("p",null,"Dark/Light mode")],-1)),Ew={class:"dark_mode_switch"},Tw=cc(()=>ye("span",{class:"mode_slider"},null,-1)),Aw={class:"slider-container"},Cw=cc(()=>ye("div",{class:"label"},[ye("img",{src:ww,alt:"font size icon"}),ye("p",null,"Font size")],-1)),Rw={class:"buttons"},Pw=cc(()=>ye("div",{class:"language-container"},null,-1)),Iw=$t({__name:"AccessOptions",setup(n){Pn(s=>({"7729767d":j(ni)(22,j(We)),"19e43c72":j(qe)("rgb(16, 23, 32)","rgb(124, 124, 124)"),e4b905b6:j(qe)("rgb(93, 108, 131)","rgb(255, 255, 255)"),"65129fac":j(qe)("rgb(220, 223, 255)","rgb(22, 17, 75)"),c1b9da0c:j(ft)(15,j(We)),"8b60f49a":j(ft)(30,j(We)),db0453d0:j(ft)(24,j(We)),b654fbc2:j(qe)("rgb(28, 39, 56)","rgb(212, 212, 212)"),"0158d634":j(ni)(-35,j(We),.4)}));function e(){let s=et(document.getElementById("font_size_range"));We.value=.77*2.72**(s.value.value/100)-.27}function t(s){We.value=.77*2.72**(s/100)-.27;let r=et(document.getElementById("font_size_range"));r.value.value=s}function i(){et(document.getElementById("dark_mode")).value.checked?Us.value=!0:Us.value=!1,document.querySelector("body").style.backgroundImage=Us?"url('https://cyber-mantid.xyz/src/assets/motif_small.png')":"url('https://cyber-mantid.xyz/src/assets/motif_small_light.png')"}return(s,r)=>(rt(),ot(Bt,null,[ye("div",Mw,[Sw,ye("label",Ew,[ye("input",{type:"checkbox",id:"dark_mode",class:"checkbox",value:"dark_mode",onChange:r[0]||(r[0]=o=>i()),checked:""},null,32),Tw])]),ye("div",Aw,[Cw,ye("input",{type:"range",min:"0",max:"100",value:"50",onChange:r[1]||(r[1]=o=>e()),class:"slider",id:"font_size_range"},null,32),ye("div",Rw,[ye("button",{class:"button",onClick:r[2]||(r[2]=o=>t(0))},"XS"),ye("button",{class:"button",onClick:r[3]||(r[3]=o=>t(25))},"S"),ye("button",{class:"button",onClick:r[4]||(r[4]=o=>t(50))},"M"),ye("button",{class:"button",onClick:r[5]||(r[5]=o=>t(75))},"L"),ye("button",{class:"button",onClick:r[6]||(r[6]=o=>t(100))},"XL")])]),Pw],64))}}),Lw=Nn(Iw,[["__scopeId","data-v-aa333377"]]),Dw=n=>(es("data-v-6f046525"),n=n(),ts(),n),Uw=Dw(()=>ye("div",{class:"label"},[ye("p",null,"Blog Post Hotwords")],-1)),Nw={class:"grid"},Ow=["onClick"],Fw=["onClick"],kw=$t({__name:"Hotwords",setup(n){Pn(a=>({"40f6b98e":j(ft)(24,j(We)),"639f4b20":j(qe)("rgb(220, 223, 255)","rgb(22, 17, 75)"),"36b1db6e":j(qe)("#4f4c69","#a39ec9"),f22ac0ec:j(ft)(20,j(We)),"3afe1d15":j(qe)("rgb(28, 39, 56)","rgb(212, 212, 212)"),"3c11329b":j(qe)("rgb(93, 108, 131)","rgb(255, 255, 255)"),"127c6c57":j(qe)("rgb(136, 136, 136)","rgb(39, 39, 39)")}));const e=Hr(),t=et("");function i(a,l){for(const c of l.hotwords)if(c==a)return!0;return!1}function s(a){Ds.value=[],t.value=a;for(const l in yn)i(a,yn[l])==!0&&Ds.value.push(l);Bs.change_page("blog"),e.push("/blog")}function r(){Ds.value=[],t.value=""}function o(a){return a==t.value}return(a,l)=>(rt(),ot(Bt,null,[Uw,ye("div",Nw,[(rt(!0),ot(Bt,null,Rr(j(rw),c=>(rt(),ot("div",{class:"hotword",key:c},[o(c)?(rt(),ot("button",{key:1,class:"selected_button",onClick:h=>s(c)},Rt(c),9,Fw)):(rt(),ot("button",{key:0,class:"button",onClick:h=>s(c)},Rt(c),9,Ow))]))),128))]),ye("button",{class:"clear",onClick:l[0]||(l[0]=c=>r())},"RESET")],64))}}),Bw=Nn(kw,[["__scopeId","data-v-6f046525"]]),zw={class:"sidebar"},Vw={class:"blog-date-list"},Hw={class:"hotword-list"},Gw=$t({__name:"SideBar",setup(n){return Pn(e=>({"40f819e2":j(qe)("rgb(28, 39, 56)","rgb(212, 212, 212)"),"530d1bd6":j(qe)("rgb(93, 108, 131)","rgb(255, 255, 255)"),"3bbcda8f":j(qe)("#4f4c69","#a39ec9")})),(e,t)=>(rt(),ot("div",zw,[ye("div",Vw,[vt(Lw)]),ye("div",Hw,[vt(Bw)])]))}}),Ww=Nn(Gw,[["__scopeId","data-v-c0a4ea0d"]]),qw=n=>(es("data-v-8be8286c"),n=n(),ts(),n),Xw={class:"body"},$w={class:"column"},Yw={class:"header"},jw={class:"project-cards"},Zw=qw(()=>ye("p",{class:"project-section-title"},"Projects",-1)),Kw={class:"content-box"},Jw={class:"sidebar"},gd=document.createElement("link");gd.setAttribute("href","https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/default.min.css");gd.setAttribute("rel","stylesheet");document.head.appendChild(gd);const ny=document.createElement("script");ny.setAttribute("src","https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js");document.head.appendChild(ny);const Qw=$t({__name:"App",setup(n){Pn(r=>({"679ba3b5":j(qe)("rgb(93, 108, 131)","rgb(255, 255, 255)"),"8e73e6a2":j(qe)("rgb(28, 39, 56)","rgb(212, 212, 212)"),a052773c:j(qe)("rgb(128, 124, 168)","rgb(22, 17, 75)"),c82cd372:j(ft)(34,j(We)),"2a6a3622":j(qe)("#4f4c69","#a39ec9")}));const e=Hr();document.querySelector("body").style.backgroundImage="url('https://cyber-mantid.xyz/src/assets/motif_small.png')",document.querySelector("body").style.backgroundAttachment="fixed";const t=[{name:"Linear Algebra Booklet",description:"A booklet I made concerning linear algebra. It's in Greek and some      proofs are missing, but it's still thorough and comprehensive.",go_to:"https://github.com/xmamalou/vector-tensor-booklet.git",image:"https://cyber-mantid.xyz/src/assets/vector.png"},{name:"Dragonfly",description:"Dragonfly is a graphics and physics related project. It is incomplete      and currently frozen in development.",image:"https://cyber-mantid.xyz/src/assets/dragonfly.jpg",go_to:"https://github.com/xmamalou/dragonfly.git"},{name:"8 ball toy",description:"A small magic 8-ball toy I made in a few days in C#, using WinUI 3. Fun      for asking meaningless questions and getting meaningless answers.",image:"src/assets/8ball.svg",go_to:"https://github.com/xmamalou/eight-ball.git"},{name:"Gettin' Ziggy",description:"A small build- and debug-ready Hello World template in Zig, for VSCode users.",image:"src/assets/ziggy.svg",go_to:"https://github.com/xmamalou/gettin-ziggy.git"},{name:"Science Tex",description:"A LaTeX template, suited for writing scientific papers.       Comes in double and single column format.",image:"https://cyber-mantid.xyz/src/assets/sciencetex.png",go_to:"https://github.com/xmamalou/science-tex.git"}];function i(r){return r.slice(1)}Bs.change_page(i(e.currentRoute.value.path));const s=ty();return sn(s.query,(r,o)=>{r.font_size==null?We.value=1:We.value=Number(r.font_size)/100}),sn(Us,(r,o)=>{document.querySelector("body").style.backgroundImage=r?"url('https://cyber-mantid.xyz/src/assets/motif_small.png')":"url('./src/assets/motif_small_light.png')"}),(r,o)=>{const a=lo("router-view");return rt(),ot("div",Xw,[ye("div",$w,[ye("div",Yw,[vt(dw)]),ye("div",jw,[Zw,(rt(),ot(Bt,null,Rr(t,l=>vt(xw,{image:l.image,name:l.name,description:l.description,go_to:l.go_to},null,8,["image","name","description","go_to"])),64))])]),ye("div",Kw,[vt(a,{class:"content"})]),ye("div",Jw,[vt(Ww)])])}}}),eM=Nn(Qw,[["__scopeId","data-v-8be8286c"]]),tM={class:"paragraph-box"},nM=mx('<h1 data-v-f85d55c9>ABOUT ME</h1><p data-v-f85d55c9>   Hello there! My name is Christopher Mamaloukas, and I am a student at the University of Athens. My undergrad is in Physics, but I am more interested in Mathematics and Computers. </p><p data-v-f85d55c9>   I&#39;ve been programming for a while now and I have been very interested in fields such as Graphics, Low Level Programming, and Games. My favourite languages are C++, Zig and Haskell, but I also enjoy learning new languages and paradigms. </p><p data-v-f85d55c9>   When it comes to Math, I have to say that I love fields such as Geometry and Numerical Analysis. </p><p data-v-f85d55c9>   Currently, I have almost finished my undergrad, and I am planning to continue with a Masters in Computer Engineering. I also have some personal projects under my belt, but due to university, I don&#39;t spend as much time as I would like on them. </p><p data-v-f85d55c9>   Online, I go by Mantis or CyberMantid. But I am not really that much online. </p><h1 data-v-f85d55c9>CREDITS</h1><p data-v-f85d55c9>Fonts used:</p><ul data-v-f85d55c9><li data-v-f85d55c9>Fairfax Hax HD found <a href="https://www.kreativekorp.com/software/fonts/fairfaxhd/" data-v-f85d55c9>here</a></li><li data-v-f85d55c9>Fairfax Hax found <a href="https://www.kreativekorp.com/software/fonts/fairfax/" data-v-f85d55c9>here</a></li></ul>',9),iM=[nM],sM=$t({__name:"AboutPage",setup(n){return Pn(e=>({"6a6de72f":j(ft)(35,j(We)),"40f7003e":j(qe)("rgb(220, 223, 255)","rgb(22, 17, 75)"),f88f3e1a:j(ft)(17,j(We)),"5e7f6fc0":j(qe)("rgb(147, 154, 170)","rgb(22, 17, 75)"),"723b6774":j(ft)(18,j(We))})),document.title="About - Cyber Mantid",(e,t)=>(rt(),ot("div",tM,iM))}}),rM=Nn(sM,[["__scopeId","data-v-f85d55c9"]]),oM={class:"button"},aM=["src","href"],lM=["href"],cM=$t({__name:"LinkButton",props:{image:String,link:String,description:String},setup(n){Pn(t=>({"28430be6":j(ni)(30,j(We)),"0629e131":j(ft)(18,j(We)),"467ae7c6":j(qe)("rgb(147, 154, 170)","rgb(22, 17, 75)")}));function e(t,i){return t?String(i):String(i).replace(".png","_dark.png")}return(t,i)=>(rt(),ot("div",oM,[ye("img",{src:e(j(Us),n.image),href:n.link},null,8,aM),ye("a",{href:n.link},Rt(n.description),9,lM)]))}}),hM=Nn(cM,[["__scopeId","data-v-27855c15"]]),hc=n=>(es("data-v-4ffa2705"),n=n(),ts(),n),uM={class:"paragraph-box"},dM=hc(()=>ye("h1",null,"WELCOME TO MY WEBSITE!",-1)),fM=hc(()=>ye("p",null," On the projects section, you can see some of the projects I've worked on. Feel free to scroll and check them out! (NOTE: They will transfer you to an external website) ",-1)),pM=hc(()=>ye("p",null,` If you'd like, you can also read ramblings nobody cares about, by clicking on the "Blog" button. To sort blog posts by topic, press one of the hotwords on the right. `,-1)),mM=hc(()=>ye("h3",null,"This is not my only place in the Information Superhighway. Check these out:",-1)),gM={class:"buttons"},yM=$t({__name:"WelcomePage",props:{video_of_day:String},setup(n){Pn(t=>({"45acb6ee":j(ft)(34,j(We)),"5f73a621":j(qe)("rgb(220, 223, 255)","rgb(22, 17, 75)"),"63ceed4f":j(ft)(24,j(We)),"3bfd3db4":j(ft)(18,j(We)),b6fd95f4:j(qe)("rgb(120, 123, 139)","rgb(22, 17, 75)")}));const e=[{image:"./src/assets/github.png",link:"https://github.com/xmamalou",description:"Github"},{image:"./src/assets/linkedin.png",link:"https://www.linkedin.com/in/christofmamaloukas/",description:"LinkedIn"},{image:"./src/assets/email.png",link:"mailto:xmamalou@outlook.com.gr",description:"Email"},{image:"./src/assets/youtube.png",link:"https://www.youtube.com/channel/UCv-81q6cbaCL3y7NQPeRgoQ",description:"Youtube"},{image:"./src/assets/itchio.png",link:"https://cybermantid.itch.io/",description:"Itch.io"}];return document.title="Welcome! - Cyber Mantid",(t,i)=>(rt(),ot("div",uM,[dM,fM,pM,mM,ye("div",gM,[(rt(),ot(Bt,null,Rr(e,s=>vt(hM,{image:s.image,link:s.link,description:s.description},null,8,["image","link","description"])),64))])]))}}),_M=Nn(yM,[["__scopeId","data-v-4ffa2705"]]),iy="/assets/favicon-tdXgq7ct.svg",vM=n=>(es("data-v-20de6d09"),n=n(),ts(),n),xM={class:"blog-home",id:"blog-home"},bM=vM(()=>ye("h1",null,"BLOG",-1)),wM={key:0,class:"posts"},MM=["onClick"],SM={class:"media"},EM=["src"],TM={key:1,src:iy,alt:"Placeholder"},AM={class:"text"},CM={class:"summary"},RM={class:"date"},PM={class:"date"},IM={key:1,class:"posts"},LM=["onClick"],DM={class:"media"},UM=["src"],NM={key:1,src:iy,alt:"Placeholder"},OM={class:"text"},FM={class:"summary"},kM={class:"date"},BM={class:"date"},zM=$t({__name:"BlogPage",setup(n){Pn(o=>({c8fdffa6:j(ft)(34,j(We)),74060820:j(qe)("rgb(220, 223, 255)","rgb(22, 17, 75)"),"7a277549":j(qe)("#4f4c69","#a39ec9"),"57608fde":j(ni)(140,j(We)),"4b64da15":j(qe)("rgb(28, 39, 56)","rgb(212, 212, 212)"),"6486a0ca":j(qe)("rgb(93, 108, 131)","rgb(255, 255, 255)"),"602d2d3c":j(ni)(100,j(We)),"46c5ace8":j(ft)(22,j(We)),dc5cf21a:j(ft)(18,j(We)),"6541d05f":j(qe)("rgb(147, 154, 170)","rgb(22, 17, 75)"),"736f1920":j(ft)(15,j(We)),"625a10c4":j(ni)(360,j(We))}));const e=Hr();var t=yn;function i(o){var a=new Date(o);return a.getFullYear()+"-"+(a.getMonth()+1)+"-"+a.getDate()}function s(o){Bs.change_page("blog_post"),Bs.change_blog_id(o),e.push("/blog_post/"+o)}function r(){return!(Ds.value.length==0||Ds.value===void 0)}return document.title="Blog - Cyber Mantid",(o,a)=>(rt(),ot("div",xM,[bM,r()?(rt(),ot("div",IM,[(rt(!0),ot(Bt,null,Rr(j(Ds),l=>(rt(),ot("div",{class:"post",key:j(t)[l].slug+"_"+j(t)[l].title,onClick:c=>s(j(t)[l].slug)},[ye("article",DM,[ye("figure",null,[j(t)[l].featured_image?(rt(),ot("img",{key:0,src:j(t)[l].featured_image,alt:"Blog post thumbnail"},null,8,UM)):(rt(),ot("img",NM))]),ye("div",OM,[ye("h2",null,Rt(j(t)[l].title),1),ye("p",FM,Rt(j(t)[l].summary),1),ye("p",kM,Rt("Updated: "+i(j(t)[l].updated)),1),ye("p",BM,Rt("Published: "+i(j(t)[l].published)),1)])])],8,LM))),128))])):(rt(),ot("div",wM,[(rt(!0),ot(Bt,null,Rr(j(t),(l,c)=>(rt(),ot("div",{class:"post",key:l.slug+"_"+l.title,onClick:h=>s(j(t)[c].slug)},[ye("article",SM,[ye("figure",null,[l.featured_image?(rt(),ot("img",{key:0,src:l.featured_image,alt:"Blog post thumbnail"},null,8,EM)):(rt(),ot("img",TM))]),ye("div",AM,[ye("h2",null,Rt(l.title),1),ye("p",CM,Rt(l.summary),1),ye("p",RM,Rt("Updated: "+i(l.updated)),1),ye("p",PM,Rt("Published: "+i(l.published)),1)])])],8,MM))),128))]))]))}}),VM=Nn(zM,[["__scopeId","data-v-20de6d09"]]),ta=n=>(es("data-v-a8a20af2"),n=n(),ts(),n),HM={class:"blog-post",id:"blog-post"},GM={class:"updated"},WM=ta(()=>ye("p",null,null,-1)),qM={class:"updated"},XM=["innerHTML"],$M=ta(()=>ye("hr",{class:"separator"},null,-1)),YM={class:"other_posts"},jM=["href"],ZM=["href"],KM=ta(()=>ye("h1",null,"COMMENTS AND REACTIONS",-1)),JM=ta(()=>ye("p",null,"What did you think? Comment and react your heart out! Don't forget to be nice!",-1)),QM=ta(()=>ye("div",{class:"giscus"},null,-1)),eS=$t({__name:"BlogPost",setup(n){Pn(p=>({db7fe062:j(qe)("rgb(220, 223, 255)","rgb(22, 17, 75)"),"0d342ce0":j(ft)(16,j(We)),"182c99c8":j(ft)(34,j(We)),"120be97d":j(ft)(24,j(We)),f9084fe4:j(qe)("rgb(147, 154, 170)","rgb(22, 17, 75)"),"2b8b8c3c":j(ft)(18,j(We)),"57ffcf79":j(ft)(20,j(We)),"1eb1265f":j(ft)(15,j(We)),"0dd70aa0":j(qe)("rgb(8, 6, 32)","rgb(220, 223, 255)"),"0d24117e":j(qe)("rgb(220, 223, 255)","rgb(8, 6, 32)"),"0036b40c":j(qe)("#4f4c69","#a39ec9")}));const e=document.createElement("script");e.setAttribute("src","https://giscus.app/client.js"),e.setAttribute("data-repo","xmamalou/xmamalou.github.io"),e.setAttribute("data-repo-id","R_kgDOJci7IA"),e.setAttribute("data-category","Announcements"),e.setAttribute("data-category-id","DIC_kwDOJci7IM4Ch6gi"),e.setAttribute("data-mapping","title"),e.setAttribute("data-strict","0"),e.setAttribute("data-reactions-enabled","1"),e.setAttribute("data-emit-metadata","0"),e.setAttribute("data-input-position","bottom"),e.setAttribute("data-theme",Us?"dark":"light"),e.setAttribute("data-lang","en"),e.setAttribute("crossorigin","anonymous"),e.async=!0,document.head.appendChild(e);const t=Hr(),s=ty().params.id;console.log(s);const r=et();var o=!1;for(var a in yn)if(s==yn[a].slug){o=!0,r.value=yn[a];break}o==!1&&(Bs.change_page("oops"),t.push("/oops"));function l(p){var v=new Date(p);return v.getFullYear()+"-"+(v.getMonth()+1)+"-"+v.getDate()}function c(p){var v=" ";for(const _ in p)v+=p[_]+(_!=Object.keys(p)[Object.keys(p).length-1]?", ":".");return v}function h(){var p="";for(var v in yn){if(r.value.slug===yn[v].slug)break;p=v}return p==""?"":yn[p].title+" >>"}function u(){var p="";for(var v in yn){if(r.value.slug===yn[v].slug)break;p=v}return p==""?"":yn[p].slug}function d(){var p="",v=yn.slice().reverse();for(var _ in v){if(r.value.slug==v[_].slug)break;p=_}return p==""?"":"<< "+v[p].title}function f(){var p="",v=yn.slice().reverse();for(var _ in v){if(r.value.slug==v[_].slug)break;p=_}return p==""?"":v[p].slug}document.title=r.value.title+" - Cyber Mantid";const m=document.createElement("script");m.setAttribute("src","https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js"),m.setAttribute("defer",""),document.head.appendChild(m);const y=document.createElement("script");y.setAttribute("src","https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js"),y.setAttribute("defer",""),y.setAttribute("onload","renderMathInElement(document.body)"),document.head.appendChild(y);const g=document.createElement("link");return g.setAttribute("href","https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css"),g.setAttribute("rel","stylesheet"),document.head.appendChild(g),(p,v)=>(rt(),ot("div",HM,[ye("h1",null,Rt(r.value.title),1),ye("h2",null,Rt(r.value.author),1),ye("h4",null,Rt("Published: "+l(r.value.published)),1),ye("h4",GM,Rt("Updated: "+l(r.value.updated)),1),WM,ye("h4",qM,Rt("Filed under:"+c(r.value.hotwords)),1),ye("div",{class:"post",innerHTML:r.value.body},null,8,XM),$M,ye("div",YM,[ye("a",{class:"previous",href:"https://cyber-mantid.xyz/#/blog_post/"+f()},Rt(d()),9,jM),ye("a",{class:"next",href:"https://cyber-mantid.xyz/#/blog_post/"+u()},Rt(h()),9,ZM)]),KM,JM,QM]))}}),tS=Nn(eS,[["__scopeId","data-v-a8a20af2"]]),yd=n=>(es("data-v-08064e2f"),n=n(),ts(),n),nS={class:"page404"},iS=yd(()=>ye("h1",null,"Ooops! It seems your page is in another site!",-1)),sS=yd(()=>ye("p",null," Don't know what you were looking for, but it for sure does not exist here! What a shame! ",-1)),rS=yd(()=>ye("p",null," Don't worry, you will be redirected in just a few seconds! ",-1)),oS=[iS,sS,rS],aS=$t({__name:"NonexistentPage",setup(n){Pn(t=>({c7adf82a:j(ft)(35,j(We)),b67fa0c6:j(qe)("rgb(220, 223, 255)","rgb(22, 17, 75)"),"11bc19c7":j(ft)(20,j(We)),d4081048:j(qe)("rgb(147, 154, 170)","rgb(22, 17, 75)")}));const e=Hr();return setTimeout(()=>{e.push("/home")},5e3),(t,i)=>(rt(),ot("div",nS,oS))}}),mp=Nn(aS,[["__scopeId","data-v-08064e2f"]]);/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const na="160",lS={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},cS={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},sy=0,nu=1,ry=2,hS=3,uS=0,_d=1,vd=2,Jn=3,Mi=0,dn=1,ti=2,dS=2,xi=0,Ns=1,iu=2,su=3,ru=4,oy=5,Wi=100,ay=101,ly=102,ou=103,au=104,cy=200,hy=201,uy=202,dy=203,Bl=204,zl=205,fy=206,py=207,my=208,gy=209,yy=210,_y=211,vy=212,xy=213,by=214,wy=0,My=1,Sy=2,Po=3,Ey=4,Ty=5,Ay=6,Cy=7,ia=0,Ry=1,Py=2,bi=0,Iy=1,Ly=2,Dy=3,xd=4,Uy=5,Ny=6,lu="attached",Oy="detached",uc=300,Si=301,Ki=302,Io=303,Lo=304,Gr=306,Do=1e3,nn=1001,Uo=1002,Dt=1003,Vl=1004,fS=1004,yo=1005,pS=1005,Ut=1006,bd=1007,mS=1007,Ji=1008,gS=1008,wi=1009,Fy=1010,ky=1011,dc=1012,wd=1013,yi=1014,Vn=1015,Ur=1016,Md=1017,Sd=1018,$i=1020,By=1021,vn=1023,zy=1024,Vy=1025,Yi=1026,zs=1027,Hy=1028,Ed=1029,Gy=1030,Td=1031,Ad=1033,xl=33776,bl=33777,wl=33778,Ml=33779,cu=35840,hu=35841,uu=35842,du=35843,Cd=36196,fu=37492,pu=37496,mu=37808,gu=37809,yu=37810,_u=37811,vu=37812,xu=37813,bu=37814,wu=37815,Mu=37816,Su=37817,Eu=37818,Tu=37819,Au=37820,Cu=37821,Sl=36492,Ru=36494,Pu=36495,Wy=36283,Iu=36284,Lu=36285,Du=36286,qy=2200,Xy=2201,$y=2202,No=2300,Oo=2301,El=2302,Ss=2400,Es=2401,Fo=2402,fc=2500,Rd=2501,yS=0,_S=1,vS=2,Pd=3e3,ji=3001,Yy=3200,jy=3201,ns=0,Zy=1,Cn="",Ft="srgb",ri="srgb-linear",pc="display-p3",sa="display-p3-linear",ko="linear",yt="srgb",Bo="rec709",zo="p3",xS=0,xs=7680,bS=7681,wS=7682,MS=7683,SS=34055,ES=34056,TS=5386,AS=512,CS=513,RS=514,PS=515,IS=516,LS=517,DS=518,Uu=519,Ky=512,Jy=513,Qy=514,Id=515,e_=516,t_=517,n_=518,i_=519,Vo=35044,US=35048,NS=35040,OS=35045,FS=35049,kS=35041,BS=35046,zS=35050,VS=35042,HS="100",Nu="300 es",Hl=1035,Hn=2e3,Nr=2001;class Ci{addEventListener(e,t){this._listeners===void 0&&(this._listeners={});const i=this._listeners;i[e]===void 0&&(i[e]=[]),i[e].indexOf(t)===-1&&i[e].push(t)}hasEventListener(e,t){if(this._listeners===void 0)return!1;const i=this._listeners;return i[e]!==void 0&&i[e].indexOf(t)!==-1}removeEventListener(e,t){if(this._listeners===void 0)return;const s=this._listeners[e];if(s!==void 0){const r=s.indexOf(t);r!==-1&&s.splice(r,1)}}dispatchEvent(e){if(this._listeners===void 0)return;const i=this._listeners[e.type];if(i!==void 0){e.target=this;const s=i.slice(0);for(let r=0,o=s.length;r<o;r++)s[r].call(this,e);e.target=null}}}const Jt=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let gp=1234567;const Os=Math.PI/180,Or=180/Math.PI;function Rn(){const n=Math.random()*4294967295|0,e=Math.random()*4294967295|0,t=Math.random()*4294967295|0,i=Math.random()*4294967295|0;return(Jt[n&255]+Jt[n>>8&255]+Jt[n>>16&255]+Jt[n>>24&255]+"-"+Jt[e&255]+Jt[e>>8&255]+"-"+Jt[e>>16&15|64]+Jt[e>>24&255]+"-"+Jt[t&63|128]+Jt[t>>8&255]+"-"+Jt[t>>16&255]+Jt[t>>24&255]+Jt[i&255]+Jt[i>>8&255]+Jt[i>>16&255]+Jt[i>>24&255]).toLowerCase()}function Pt(n,e,t){return Math.max(e,Math.min(t,n))}function Ld(n,e){return(n%e+e)%e}function GS(n,e,t,i,s){return i+(n-e)*(s-i)/(t-e)}function WS(n,e,t){return n!==e?(t-n)/(e-n):0}function _o(n,e,t){return(1-t)*n+t*e}function qS(n,e,t,i){return _o(n,e,1-Math.exp(-t*i))}function XS(n,e=1){return e-Math.abs(Ld(n,e*2)-e)}function $S(n,e,t){return n<=e?0:n>=t?1:(n=(n-e)/(t-e),n*n*(3-2*n))}function YS(n,e,t){return n<=e?0:n>=t?1:(n=(n-e)/(t-e),n*n*n*(n*(n*6-15)+10))}function jS(n,e){return n+Math.floor(Math.random()*(e-n+1))}function ZS(n,e){return n+Math.random()*(e-n)}function KS(n){return n*(.5-Math.random())}function JS(n){n!==void 0&&(gp=n);let e=gp+=1831565813;return e=Math.imul(e^e>>>15,e|1),e^=e+Math.imul(e^e>>>7,e|61),((e^e>>>14)>>>0)/4294967296}function QS(n){return n*Os}function eE(n){return n*Or}function Ou(n){return(n&n-1)===0&&n!==0}function tE(n){return Math.pow(2,Math.ceil(Math.log(n)/Math.LN2))}function Gl(n){return Math.pow(2,Math.floor(Math.log(n)/Math.LN2))}function nE(n,e,t,i,s){const r=Math.cos,o=Math.sin,a=r(t/2),l=o(t/2),c=r((e+i)/2),h=o((e+i)/2),u=r((e-i)/2),d=o((e-i)/2),f=r((i-e)/2),m=o((i-e)/2);switch(s){case"XYX":n.set(a*h,l*u,l*d,a*c);break;case"YZY":n.set(l*d,a*h,l*u,a*c);break;case"ZXZ":n.set(l*u,l*d,a*h,a*c);break;case"XZX":n.set(a*h,l*m,l*f,a*c);break;case"YXY":n.set(l*f,a*h,l*m,a*c);break;case"ZYZ":n.set(l*m,l*f,a*h,a*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+s)}}function xn(n,e){switch(e.constructor){case Float32Array:return n;case Uint32Array:return n/4294967295;case Uint16Array:return n/65535;case Uint8Array:return n/255;case Int32Array:return Math.max(n/2147483647,-1);case Int16Array:return Math.max(n/32767,-1);case Int8Array:return Math.max(n/127,-1);default:throw new Error("Invalid component type.")}}function Ye(n,e){switch(e.constructor){case Float32Array:return n;case Uint32Array:return Math.round(n*4294967295);case Uint16Array:return Math.round(n*65535);case Uint8Array:return Math.round(n*255);case Int32Array:return Math.round(n*2147483647);case Int16Array:return Math.round(n*32767);case Int8Array:return Math.round(n*127);default:throw new Error("Invalid component type.")}}const iE={DEG2RAD:Os,RAD2DEG:Or,generateUUID:Rn,clamp:Pt,euclideanModulo:Ld,mapLinear:GS,inverseLerp:WS,lerp:_o,damp:qS,pingpong:XS,smoothstep:$S,smootherstep:YS,randInt:jS,randFloat:ZS,randFloatSpread:KS,seededRandom:JS,degToRad:QS,radToDeg:eE,isPowerOfTwo:Ou,ceilPowerOfTwo:tE,floorPowerOfTwo:Gl,setQuaternionFromProperEuler:nE,normalize:Ye,denormalize:xn};class ue{constructor(e=0,t=0){ue.prototype.isVector2=!0,this.x=e,this.y=t}get width(){return this.x}set width(e){this.x=e}get height(){return this.y}set height(e){this.y=e}set(e,t){return this.x=e,this.y=t,this}setScalar(e){return this.x=e,this.y=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y)}copy(e){return this.x=e.x,this.y=e.y,this}add(e){return this.x+=e.x,this.y+=e.y,this}addScalar(e){return this.x+=e,this.y+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this}subScalar(e){return this.x-=e,this.y-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this}multiply(e){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e){return this.x*=e,this.y*=e,this}divide(e){return this.x/=e.x,this.y/=e.y,this}divideScalar(e){return this.multiplyScalar(1/e)}applyMatrix3(e){const t=this.x,i=this.y,s=e.elements;return this.x=s[0]*t+s[3]*i+s[6],this.y=s[1]*t+s[4]*i+s[7],this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this}clampLength(e,t){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(e,Math.min(t,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(e){return this.x*e.x+this.y*e.y}cross(e){return this.x*e.y-this.y*e.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const i=this.dot(e)/t;return Math.acos(Pt(i,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,i=this.y-e.y;return t*t+i*i}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}lerpVectors(e,t,i){return this.x=e.x+(t.x-e.x)*i,this.y=e.y+(t.y-e.y)*i,this}equals(e){return e.x===this.x&&e.y===this.y}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this}rotateAround(e,t){const i=Math.cos(t),s=Math.sin(t),r=this.x-e.x,o=this.y-e.y;return this.x=r*i-o*s+e.x,this.y=r*s+o*i+e.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class Ke{constructor(e,t,i,s,r,o,a,l,c){Ke.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],e!==void 0&&this.set(e,t,i,s,r,o,a,l,c)}set(e,t,i,s,r,o,a,l,c){const h=this.elements;return h[0]=e,h[1]=s,h[2]=a,h[3]=t,h[4]=r,h[5]=l,h[6]=i,h[7]=o,h[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(e){const t=this.elements,i=e.elements;return t[0]=i[0],t[1]=i[1],t[2]=i[2],t[3]=i[3],t[4]=i[4],t[5]=i[5],t[6]=i[6],t[7]=i[7],t[8]=i[8],this}extractBasis(e,t,i){return e.setFromMatrix3Column(this,0),t.setFromMatrix3Column(this,1),i.setFromMatrix3Column(this,2),this}setFromMatrix4(e){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const i=e.elements,s=t.elements,r=this.elements,o=i[0],a=i[3],l=i[6],c=i[1],h=i[4],u=i[7],d=i[2],f=i[5],m=i[8],y=s[0],g=s[3],p=s[6],v=s[1],_=s[4],x=s[7],P=s[2],M=s[5],A=s[8];return r[0]=o*y+a*v+l*P,r[3]=o*g+a*_+l*M,r[6]=o*p+a*x+l*A,r[1]=c*y+h*v+u*P,r[4]=c*g+h*_+u*M,r[7]=c*p+h*x+u*A,r[2]=d*y+f*v+m*P,r[5]=d*g+f*_+m*M,r[8]=d*p+f*x+m*A,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[3]*=e,t[6]*=e,t[1]*=e,t[4]*=e,t[7]*=e,t[2]*=e,t[5]*=e,t[8]*=e,this}determinant(){const e=this.elements,t=e[0],i=e[1],s=e[2],r=e[3],o=e[4],a=e[5],l=e[6],c=e[7],h=e[8];return t*o*h-t*a*c-i*r*h+i*a*l+s*r*c-s*o*l}invert(){const e=this.elements,t=e[0],i=e[1],s=e[2],r=e[3],o=e[4],a=e[5],l=e[6],c=e[7],h=e[8],u=h*o-a*c,d=a*l-h*r,f=c*r-o*l,m=t*u+i*d+s*f;if(m===0)return this.set(0,0,0,0,0,0,0,0,0);const y=1/m;return e[0]=u*y,e[1]=(s*c-h*i)*y,e[2]=(a*i-s*o)*y,e[3]=d*y,e[4]=(h*t-s*l)*y,e[5]=(s*r-a*t)*y,e[6]=f*y,e[7]=(i*l-c*t)*y,e[8]=(o*t-i*r)*y,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e){return this.setFromMatrix4(e).invert().transpose()}transposeIntoArray(e){const t=this.elements;return e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8],this}setUvTransform(e,t,i,s,r,o,a){const l=Math.cos(r),c=Math.sin(r);return this.set(i*l,i*c,-i*(l*o+c*a)+o+e,-s*c,s*l,-s*(-c*o+l*a)+a+t,0,0,1),this}scale(e,t){return this.premultiply(eh.makeScale(e,t)),this}rotate(e){return this.premultiply(eh.makeRotation(-e)),this}translate(e,t){return this.premultiply(eh.makeTranslation(e,t)),this}makeTranslation(e,t){return e.isVector2?this.set(1,0,e.x,0,1,e.y,0,0,1):this.set(1,0,e,0,1,t,0,0,1),this}makeRotation(e){const t=Math.cos(e),i=Math.sin(e);return this.set(t,-i,0,i,t,0,0,0,1),this}makeScale(e,t){return this.set(e,0,0,0,t,0,0,0,1),this}equals(e){const t=this.elements,i=e.elements;for(let s=0;s<9;s++)if(t[s]!==i[s])return!1;return!0}fromArray(e,t=0){for(let i=0;i<9;i++)this.elements[i]=e[i+t];return this}toArray(e=[],t=0){const i=this.elements;return e[t]=i[0],e[t+1]=i[1],e[t+2]=i[2],e[t+3]=i[3],e[t+4]=i[4],e[t+5]=i[5],e[t+6]=i[6],e[t+7]=i[7],e[t+8]=i[8],e}clone(){return new this.constructor().fromArray(this.elements)}}const eh=new Ke;function s_(n){for(let e=n.length-1;e>=0;--e)if(n[e]>=65535)return!0;return!1}const sE={Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function _r(n,e){return new sE[n](e)}function Ho(n){return document.createElementNS("http://www.w3.org/1999/xhtml",n)}function r_(){const n=Ho("canvas");return n.style.display="block",n}const yp={};function vo(n){n in yp||(yp[n]=!0,console.warn(n))}const _p=new Ke().set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),vp=new Ke().set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),Ma={[ri]:{transfer:ko,primaries:Bo,toReference:n=>n,fromReference:n=>n},[Ft]:{transfer:yt,primaries:Bo,toReference:n=>n.convertSRGBToLinear(),fromReference:n=>n.convertLinearToSRGB()},[sa]:{transfer:ko,primaries:zo,toReference:n=>n.applyMatrix3(vp),fromReference:n=>n.applyMatrix3(_p)},[pc]:{transfer:yt,primaries:zo,toReference:n=>n.convertSRGBToLinear().applyMatrix3(vp),fromReference:n=>n.applyMatrix3(_p).convertLinearToSRGB()}},rE=new Set([ri,sa]),ut={enabled:!0,_workingColorSpace:ri,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(n){if(!rE.has(n))throw new Error(`Unsupported working color space, "${n}".`);this._workingColorSpace=n},convert:function(n,e,t){if(this.enabled===!1||e===t||!e||!t)return n;const i=Ma[e].toReference,s=Ma[t].fromReference;return s(i(n))},fromWorkingColorSpace:function(n,e){return this.convert(n,this._workingColorSpace,e)},toWorkingColorSpace:function(n,e){return this.convert(n,e,this._workingColorSpace)},getPrimaries:function(n){return Ma[n].primaries},getTransfer:function(n){return n===Cn?ko:Ma[n].transfer}};function Ar(n){return n<.04045?n*.0773993808:Math.pow(n*.9478672986+.0521327014,2.4)}function th(n){return n<.0031308?n*12.92:1.055*Math.pow(n,.41666)-.055}let js;class Dd{static getDataURL(e){if(/^data:/i.test(e.src)||typeof HTMLCanvasElement>"u")return e.src;let t;if(e instanceof HTMLCanvasElement)t=e;else{js===void 0&&(js=Ho("canvas")),js.width=e.width,js.height=e.height;const i=js.getContext("2d");e instanceof ImageData?i.putImageData(e,0,0):i.drawImage(e,0,0,e.width,e.height),t=js}return t.width>2048||t.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",e),t.toDataURL("image/jpeg",.6)):t.toDataURL("image/png")}static sRGBToLinear(e){if(typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&e instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&e instanceof ImageBitmap){const t=Ho("canvas");t.width=e.width,t.height=e.height;const i=t.getContext("2d");i.drawImage(e,0,0,e.width,e.height);const s=i.getImageData(0,0,e.width,e.height),r=s.data;for(let o=0;o<r.length;o++)r[o]=Ar(r[o]/255)*255;return i.putImageData(s,0,0),t}else if(e.data){const t=e.data.slice(0);for(let i=0;i<t.length;i++)t instanceof Uint8Array||t instanceof Uint8ClampedArray?t[i]=Math.floor(Ar(t[i]/255)*255):t[i]=Ar(t[i]);return{data:t,width:e.width,height:e.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),e}}let oE=0;class Ts{constructor(e=null){this.isSource=!0,Object.defineProperty(this,"id",{value:oE++}),this.uuid=Rn(),this.data=e,this.version=0}set needsUpdate(e){e===!0&&this.version++}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.images[this.uuid]!==void 0)return e.images[this.uuid];const i={uuid:this.uuid,url:""},s=this.data;if(s!==null){let r;if(Array.isArray(s)){r=[];for(let o=0,a=s.length;o<a;o++)s[o].isDataTexture?r.push(nh(s[o].image)):r.push(nh(s[o]))}else r=nh(s);i.url=r}return t||(e.images[this.uuid]=i),i}}function nh(n){return typeof HTMLImageElement<"u"&&n instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&n instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&n instanceof ImageBitmap?Dd.getDataURL(n):n.data?{data:Array.from(n.data),width:n.width,height:n.height,type:n.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let aE=0;class Nt extends Ci{constructor(e=Nt.DEFAULT_IMAGE,t=Nt.DEFAULT_MAPPING,i=nn,s=nn,r=Ut,o=Ji,a=vn,l=wi,c=Nt.DEFAULT_ANISOTROPY,h=Cn){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:aE++}),this.uuid=Rn(),this.name="",this.source=new Ts(e),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=i,this.wrapT=s,this.magFilter=r,this.minFilter=o,this.anisotropy=c,this.format=a,this.internalFormat=null,this.type=l,this.offset=new ue(0,0),this.repeat=new ue(1,1),this.center=new ue(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Ke,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,typeof h=="string"?this.colorSpace=h:(vo("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=h===ji?Ft:Cn),this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(e=null){this.source.data=e}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(e){return this.name=e.name,this.source=e.source,this.mipmaps=e.mipmaps.slice(0),this.mapping=e.mapping,this.channel=e.channel,this.wrapS=e.wrapS,this.wrapT=e.wrapT,this.magFilter=e.magFilter,this.minFilter=e.minFilter,this.anisotropy=e.anisotropy,this.format=e.format,this.internalFormat=e.internalFormat,this.type=e.type,this.offset.copy(e.offset),this.repeat.copy(e.repeat),this.center.copy(e.center),this.rotation=e.rotation,this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrix.copy(e.matrix),this.generateMipmaps=e.generateMipmaps,this.premultiplyAlpha=e.premultiplyAlpha,this.flipY=e.flipY,this.unpackAlignment=e.unpackAlignment,this.colorSpace=e.colorSpace,this.userData=JSON.parse(JSON.stringify(e.userData)),this.needsUpdate=!0,this}toJSON(e){const t=e===void 0||typeof e=="string";if(!t&&e.textures[this.uuid]!==void 0)return e.textures[this.uuid];const i={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(e).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(i.userData=this.userData),t||(e.textures[this.uuid]=i),i}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(e){if(this.mapping!==uc)return e;if(e.applyMatrix3(this.matrix),e.x<0||e.x>1)switch(this.wrapS){case Do:e.x=e.x-Math.floor(e.x);break;case nn:e.x=e.x<0?0:1;break;case Uo:Math.abs(Math.floor(e.x)%2)===1?e.x=Math.ceil(e.x)-e.x:e.x=e.x-Math.floor(e.x);break}if(e.y<0||e.y>1)switch(this.wrapT){case Do:e.y=e.y-Math.floor(e.y);break;case nn:e.y=e.y<0?0:1;break;case Uo:Math.abs(Math.floor(e.y)%2)===1?e.y=Math.ceil(e.y)-e.y:e.y=e.y-Math.floor(e.y);break}return this.flipY&&(e.y=1-e.y),e}set needsUpdate(e){e===!0&&(this.version++,this.source.needsUpdate=!0)}get encoding(){return vo("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace===Ft?ji:Pd}set encoding(e){vo("THREE.Texture: Property .encoding has been replaced by .colorSpace."),this.colorSpace=e===ji?Ft:Cn}}Nt.DEFAULT_IMAGE=null;Nt.DEFAULT_MAPPING=uc;Nt.DEFAULT_ANISOTROPY=1;class dt{constructor(e=0,t=0,i=0,s=1){dt.prototype.isVector4=!0,this.x=e,this.y=t,this.z=i,this.w=s}get width(){return this.z}set width(e){this.z=e}get height(){return this.w}set height(e){this.w=e}set(e,t,i,s){return this.x=e,this.y=t,this.z=i,this.w=s,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this.w=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setW(e){return this.w=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;case 3:this.w=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this.w=e.w!==void 0?e.w:1,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this.w+=e.w,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this.w+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this.w=e.w+t.w,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this.w+=e.w*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this.w-=e.w,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this.w-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this.w=e.w-t.w,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this.w*=e.w,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this.w*=e,this}applyMatrix4(e){const t=this.x,i=this.y,s=this.z,r=this.w,o=e.elements;return this.x=o[0]*t+o[4]*i+o[8]*s+o[12]*r,this.y=o[1]*t+o[5]*i+o[9]*s+o[13]*r,this.z=o[2]*t+o[6]*i+o[10]*s+o[14]*r,this.w=o[3]*t+o[7]*i+o[11]*s+o[15]*r,this}divideScalar(e){return this.multiplyScalar(1/e)}setAxisAngleFromQuaternion(e){this.w=2*Math.acos(e.w);const t=Math.sqrt(1-e.w*e.w);return t<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=e.x/t,this.y=e.y/t,this.z=e.z/t),this}setAxisAngleFromRotationMatrix(e){let t,i,s,r;const l=e.elements,c=l[0],h=l[4],u=l[8],d=l[1],f=l[5],m=l[9],y=l[2],g=l[6],p=l[10];if(Math.abs(h-d)<.01&&Math.abs(u-y)<.01&&Math.abs(m-g)<.01){if(Math.abs(h+d)<.1&&Math.abs(u+y)<.1&&Math.abs(m+g)<.1&&Math.abs(c+f+p-3)<.1)return this.set(1,0,0,0),this;t=Math.PI;const _=(c+1)/2,x=(f+1)/2,P=(p+1)/2,M=(h+d)/4,A=(u+y)/4,O=(m+g)/4;return _>x&&_>P?_<.01?(i=0,s=.707106781,r=.707106781):(i=Math.sqrt(_),s=M/i,r=A/i):x>P?x<.01?(i=.707106781,s=0,r=.707106781):(s=Math.sqrt(x),i=M/s,r=O/s):P<.01?(i=.707106781,s=.707106781,r=0):(r=Math.sqrt(P),i=A/r,s=O/r),this.set(i,s,r,t),this}let v=Math.sqrt((g-m)*(g-m)+(u-y)*(u-y)+(d-h)*(d-h));return Math.abs(v)<.001&&(v=1),this.x=(g-m)/v,this.y=(u-y)/v,this.z=(d-h)/v,this.w=Math.acos((c+f+p-1)/2),this}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this.w=Math.min(this.w,e.w),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this.w=Math.max(this.w,e.w),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this.w=Math.max(e.w,Math.min(t.w,this.w)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this.w=Math.max(e,Math.min(t,this.w)),this}clampLength(e,t){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(e,Math.min(t,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z+this.w*e.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this.w+=(e.w-this.w)*t,this}lerpVectors(e,t,i){return this.x=e.x+(t.x-e.x)*i,this.y=e.y+(t.y-e.y)*i,this.z=e.z+(t.z-e.z)*i,this.w=e.w+(t.w-e.w)*i,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z&&e.w===this.w}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this.w=e[t+3],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e[t+3]=this.w,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this.w=e.getW(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class o_ extends Ci{constructor(e=1,t=1,i={}){super(),this.isRenderTarget=!0,this.width=e,this.height=t,this.depth=1,this.scissor=new dt(0,0,e,t),this.scissorTest=!1,this.viewport=new dt(0,0,e,t);const s={width:e,height:t,depth:1};i.encoding!==void 0&&(vo("THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace."),i.colorSpace=i.encoding===ji?Ft:Cn),i=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:Ut,depthBuffer:!0,stencilBuffer:!1,depthTexture:null,samples:0},i),this.texture=new Nt(s,i.mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.flipY=!1,this.texture.generateMipmaps=i.generateMipmaps,this.texture.internalFormat=i.internalFormat,this.depthBuffer=i.depthBuffer,this.stencilBuffer=i.stencilBuffer,this.depthTexture=i.depthTexture,this.samples=i.samples}setSize(e,t,i=1){(this.width!==e||this.height!==t||this.depth!==i)&&(this.width=e,this.height=t,this.depth=i,this.texture.image.width=e,this.texture.image.height=t,this.texture.image.depth=i,this.dispose()),this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}clone(){return new this.constructor().copy(this)}copy(e){this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.texture=e.texture.clone(),this.texture.isRenderTargetTexture=!0;const t=Object.assign({},e.texture.image);return this.texture.source=new Ts(t),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.samples=e.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class $n extends o_{constructor(e=1,t=1,i={}){super(e,t,i),this.isWebGLRenderTarget=!0}}class mc extends Nt{constructor(e=null,t=1,i=1,s=1){super(null),this.isDataArrayTexture=!0,this.image={data:e,width:t,height:i,depth:s},this.magFilter=Dt,this.minFilter=Dt,this.wrapR=nn,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class lE extends $n{constructor(e=1,t=1,i=1,s={}){super(e,t,s),this.isWebGLArrayRenderTarget=!0,this.depth=i,this.texture=new mc(null,e,t,i),this.texture.isRenderTargetTexture=!0}}class Ud extends Nt{constructor(e=null,t=1,i=1,s=1){super(null),this.isData3DTexture=!0,this.image={data:e,width:t,height:i,depth:s},this.magFilter=Dt,this.minFilter=Dt,this.wrapR=nn,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class cE extends $n{constructor(e=1,t=1,i=1,s={}){super(e,t,s),this.isWebGL3DRenderTarget=!0,this.depth=i,this.texture=new Ud(null,e,t,i),this.texture.isRenderTargetTexture=!0}}class hE extends $n{constructor(e=1,t=1,i=1,s={}){super(e,t,s),this.isWebGLMultipleRenderTargets=!0;const r=this.texture;this.texture=[];for(let o=0;o<i;o++)this.texture[o]=r.clone(),this.texture[o].isRenderTargetTexture=!0}setSize(e,t,i=1){if(this.width!==e||this.height!==t||this.depth!==i){this.width=e,this.height=t,this.depth=i;for(let s=0,r=this.texture.length;s<r;s++)this.texture[s].image.width=e,this.texture[s].image.height=t,this.texture[s].image.depth=i;this.dispose()}this.viewport.set(0,0,e,t),this.scissor.set(0,0,e,t)}copy(e){this.dispose(),this.width=e.width,this.height=e.height,this.depth=e.depth,this.scissor.copy(e.scissor),this.scissorTest=e.scissorTest,this.viewport.copy(e.viewport),this.depthBuffer=e.depthBuffer,this.stencilBuffer=e.stencilBuffer,e.depthTexture!==null&&(this.depthTexture=e.depthTexture.clone()),this.texture.length=0;for(let t=0,i=e.texture.length;t<i;t++)this.texture[t]=e.texture[t].clone(),this.texture[t].isRenderTargetTexture=!0;return this}}class bn{constructor(e=0,t=0,i=0,s=1){this.isQuaternion=!0,this._x=e,this._y=t,this._z=i,this._w=s}static slerpFlat(e,t,i,s,r,o,a){let l=i[s+0],c=i[s+1],h=i[s+2],u=i[s+3];const d=r[o+0],f=r[o+1],m=r[o+2],y=r[o+3];if(a===0){e[t+0]=l,e[t+1]=c,e[t+2]=h,e[t+3]=u;return}if(a===1){e[t+0]=d,e[t+1]=f,e[t+2]=m,e[t+3]=y;return}if(u!==y||l!==d||c!==f||h!==m){let g=1-a;const p=l*d+c*f+h*m+u*y,v=p>=0?1:-1,_=1-p*p;if(_>Number.EPSILON){const P=Math.sqrt(_),M=Math.atan2(P,p*v);g=Math.sin(g*M)/P,a=Math.sin(a*M)/P}const x=a*v;if(l=l*g+d*x,c=c*g+f*x,h=h*g+m*x,u=u*g+y*x,g===1-a){const P=1/Math.sqrt(l*l+c*c+h*h+u*u);l*=P,c*=P,h*=P,u*=P}}e[t]=l,e[t+1]=c,e[t+2]=h,e[t+3]=u}static multiplyQuaternionsFlat(e,t,i,s,r,o){const a=i[s],l=i[s+1],c=i[s+2],h=i[s+3],u=r[o],d=r[o+1],f=r[o+2],m=r[o+3];return e[t]=a*m+h*u+l*f-c*d,e[t+1]=l*m+h*d+c*u-a*f,e[t+2]=c*m+h*f+a*d-l*u,e[t+3]=h*m-a*u-l*d-c*f,e}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get w(){return this._w}set w(e){this._w=e,this._onChangeCallback()}set(e,t,i,s){return this._x=e,this._y=t,this._z=i,this._w=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(e){return this._x=e.x,this._y=e.y,this._z=e.z,this._w=e.w,this._onChangeCallback(),this}setFromEuler(e,t=!0){const i=e._x,s=e._y,r=e._z,o=e._order,a=Math.cos,l=Math.sin,c=a(i/2),h=a(s/2),u=a(r/2),d=l(i/2),f=l(s/2),m=l(r/2);switch(o){case"XYZ":this._x=d*h*u+c*f*m,this._y=c*f*u-d*h*m,this._z=c*h*m+d*f*u,this._w=c*h*u-d*f*m;break;case"YXZ":this._x=d*h*u+c*f*m,this._y=c*f*u-d*h*m,this._z=c*h*m-d*f*u,this._w=c*h*u+d*f*m;break;case"ZXY":this._x=d*h*u-c*f*m,this._y=c*f*u+d*h*m,this._z=c*h*m+d*f*u,this._w=c*h*u-d*f*m;break;case"ZYX":this._x=d*h*u-c*f*m,this._y=c*f*u+d*h*m,this._z=c*h*m-d*f*u,this._w=c*h*u+d*f*m;break;case"YZX":this._x=d*h*u+c*f*m,this._y=c*f*u+d*h*m,this._z=c*h*m-d*f*u,this._w=c*h*u-d*f*m;break;case"XZY":this._x=d*h*u-c*f*m,this._y=c*f*u-d*h*m,this._z=c*h*m+d*f*u,this._w=c*h*u+d*f*m;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return t===!0&&this._onChangeCallback(),this}setFromAxisAngle(e,t){const i=t/2,s=Math.sin(i);return this._x=e.x*s,this._y=e.y*s,this._z=e.z*s,this._w=Math.cos(i),this._onChangeCallback(),this}setFromRotationMatrix(e){const t=e.elements,i=t[0],s=t[4],r=t[8],o=t[1],a=t[5],l=t[9],c=t[2],h=t[6],u=t[10],d=i+a+u;if(d>0){const f=.5/Math.sqrt(d+1);this._w=.25/f,this._x=(h-l)*f,this._y=(r-c)*f,this._z=(o-s)*f}else if(i>a&&i>u){const f=2*Math.sqrt(1+i-a-u);this._w=(h-l)/f,this._x=.25*f,this._y=(s+o)/f,this._z=(r+c)/f}else if(a>u){const f=2*Math.sqrt(1+a-i-u);this._w=(r-c)/f,this._x=(s+o)/f,this._y=.25*f,this._z=(l+h)/f}else{const f=2*Math.sqrt(1+u-i-a);this._w=(o-s)/f,this._x=(r+c)/f,this._y=(l+h)/f,this._z=.25*f}return this._onChangeCallback(),this}setFromUnitVectors(e,t){let i=e.dot(t)+1;return i<Number.EPSILON?(i=0,Math.abs(e.x)>Math.abs(e.z)?(this._x=-e.y,this._y=e.x,this._z=0,this._w=i):(this._x=0,this._y=-e.z,this._z=e.y,this._w=i)):(this._x=e.y*t.z-e.z*t.y,this._y=e.z*t.x-e.x*t.z,this._z=e.x*t.y-e.y*t.x,this._w=i),this.normalize()}angleTo(e){return 2*Math.acos(Math.abs(Pt(this.dot(e),-1,1)))}rotateTowards(e,t){const i=this.angleTo(e);if(i===0)return this;const s=Math.min(1,t/i);return this.slerp(e,s),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(e){return this._x*e._x+this._y*e._y+this._z*e._z+this._w*e._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let e=this.length();return e===0?(this._x=0,this._y=0,this._z=0,this._w=1):(e=1/e,this._x=this._x*e,this._y=this._y*e,this._z=this._z*e,this._w=this._w*e),this._onChangeCallback(),this}multiply(e){return this.multiplyQuaternions(this,e)}premultiply(e){return this.multiplyQuaternions(e,this)}multiplyQuaternions(e,t){const i=e._x,s=e._y,r=e._z,o=e._w,a=t._x,l=t._y,c=t._z,h=t._w;return this._x=i*h+o*a+s*c-r*l,this._y=s*h+o*l+r*a-i*c,this._z=r*h+o*c+i*l-s*a,this._w=o*h-i*a-s*l-r*c,this._onChangeCallback(),this}slerp(e,t){if(t===0)return this;if(t===1)return this.copy(e);const i=this._x,s=this._y,r=this._z,o=this._w;let a=o*e._w+i*e._x+s*e._y+r*e._z;if(a<0?(this._w=-e._w,this._x=-e._x,this._y=-e._y,this._z=-e._z,a=-a):this.copy(e),a>=1)return this._w=o,this._x=i,this._y=s,this._z=r,this;const l=1-a*a;if(l<=Number.EPSILON){const f=1-t;return this._w=f*o+t*this._w,this._x=f*i+t*this._x,this._y=f*s+t*this._y,this._z=f*r+t*this._z,this.normalize(),this}const c=Math.sqrt(l),h=Math.atan2(c,a),u=Math.sin((1-t)*h)/c,d=Math.sin(t*h)/c;return this._w=o*u+this._w*d,this._x=i*u+this._x*d,this._y=s*u+this._y*d,this._z=r*u+this._z*d,this._onChangeCallback(),this}slerpQuaternions(e,t,i){return this.copy(e).slerp(t,i)}random(){const e=Math.random(),t=Math.sqrt(1-e),i=Math.sqrt(e),s=2*Math.PI*Math.random(),r=2*Math.PI*Math.random();return this.set(t*Math.cos(s),i*Math.sin(r),i*Math.cos(r),t*Math.sin(s))}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._w===this._w}fromArray(e,t=0){return this._x=e[t],this._y=e[t+1],this._z=e[t+2],this._w=e[t+3],this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._w,e}fromBufferAttribute(e,t){return this._x=e.getX(t),this._y=e.getY(t),this._z=e.getZ(t),this._w=e.getW(t),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class I{constructor(e=0,t=0,i=0){I.prototype.isVector3=!0,this.x=e,this.y=t,this.z=i}set(e,t,i){return i===void 0&&(i=this.z),this.x=e,this.y=t,this.z=i,this}setScalar(e){return this.x=e,this.y=e,this.z=e,this}setX(e){return this.x=e,this}setY(e){return this.y=e,this}setZ(e){return this.z=e,this}setComponent(e,t){switch(e){case 0:this.x=t;break;case 1:this.y=t;break;case 2:this.z=t;break;default:throw new Error("index is out of range: "+e)}return this}getComponent(e){switch(e){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+e)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(e){return this.x=e.x,this.y=e.y,this.z=e.z,this}add(e){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e){return this.x+=e,this.y+=e,this.z+=e,this}addVectors(e,t){return this.x=e.x+t.x,this.y=e.y+t.y,this.z=e.z+t.z,this}addScaledVector(e,t){return this.x+=e.x*t,this.y+=e.y*t,this.z+=e.z*t,this}sub(e){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e){return this.x-=e,this.y-=e,this.z-=e,this}subVectors(e,t){return this.x=e.x-t.x,this.y=e.y-t.y,this.z=e.z-t.z,this}multiply(e){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e){return this.x*=e,this.y*=e,this.z*=e,this}multiplyVectors(e,t){return this.x=e.x*t.x,this.y=e.y*t.y,this.z=e.z*t.z,this}applyEuler(e){return this.applyQuaternion(xp.setFromEuler(e))}applyAxisAngle(e,t){return this.applyQuaternion(xp.setFromAxisAngle(e,t))}applyMatrix3(e){const t=this.x,i=this.y,s=this.z,r=e.elements;return this.x=r[0]*t+r[3]*i+r[6]*s,this.y=r[1]*t+r[4]*i+r[7]*s,this.z=r[2]*t+r[5]*i+r[8]*s,this}applyNormalMatrix(e){return this.applyMatrix3(e).normalize()}applyMatrix4(e){const t=this.x,i=this.y,s=this.z,r=e.elements,o=1/(r[3]*t+r[7]*i+r[11]*s+r[15]);return this.x=(r[0]*t+r[4]*i+r[8]*s+r[12])*o,this.y=(r[1]*t+r[5]*i+r[9]*s+r[13])*o,this.z=(r[2]*t+r[6]*i+r[10]*s+r[14])*o,this}applyQuaternion(e){const t=this.x,i=this.y,s=this.z,r=e.x,o=e.y,a=e.z,l=e.w,c=2*(o*s-a*i),h=2*(a*t-r*s),u=2*(r*i-o*t);return this.x=t+l*c+o*u-a*h,this.y=i+l*h+a*c-r*u,this.z=s+l*u+r*h-o*c,this}project(e){return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix)}unproject(e){return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld)}transformDirection(e){const t=this.x,i=this.y,s=this.z,r=e.elements;return this.x=r[0]*t+r[4]*i+r[8]*s,this.y=r[1]*t+r[5]*i+r[9]*s,this.z=r[2]*t+r[6]*i+r[10]*s,this.normalize()}divide(e){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e){return this.multiplyScalar(1/e)}min(e){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}max(e){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}clamp(e,t){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}clampScalar(e,t){return this.x=Math.max(e,Math.min(t,this.x)),this.y=Math.max(e,Math.min(t,this.y)),this.z=Math.max(e,Math.min(t,this.z)),this}clampLength(e,t){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(e,Math.min(t,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(e){return this.x*e.x+this.y*e.y+this.z*e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(e){return this.normalize().multiplyScalar(e)}lerp(e,t){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}lerpVectors(e,t,i){return this.x=e.x+(t.x-e.x)*i,this.y=e.y+(t.y-e.y)*i,this.z=e.z+(t.z-e.z)*i,this}cross(e){return this.crossVectors(this,e)}crossVectors(e,t){const i=e.x,s=e.y,r=e.z,o=t.x,a=t.y,l=t.z;return this.x=s*l-r*a,this.y=r*o-i*l,this.z=i*a-s*o,this}projectOnVector(e){const t=e.lengthSq();if(t===0)return this.set(0,0,0);const i=e.dot(this)/t;return this.copy(e).multiplyScalar(i)}projectOnPlane(e){return ih.copy(this).projectOnVector(e),this.sub(ih)}reflect(e){return this.sub(ih.copy(e).multiplyScalar(2*this.dot(e)))}angleTo(e){const t=Math.sqrt(this.lengthSq()*e.lengthSq());if(t===0)return Math.PI/2;const i=this.dot(e)/t;return Math.acos(Pt(i,-1,1))}distanceTo(e){return Math.sqrt(this.distanceToSquared(e))}distanceToSquared(e){const t=this.x-e.x,i=this.y-e.y,s=this.z-e.z;return t*t+i*i+s*s}manhattanDistanceTo(e){return Math.abs(this.x-e.x)+Math.abs(this.y-e.y)+Math.abs(this.z-e.z)}setFromSpherical(e){return this.setFromSphericalCoords(e.radius,e.phi,e.theta)}setFromSphericalCoords(e,t,i){const s=Math.sin(t)*e;return this.x=s*Math.sin(i),this.y=Math.cos(t)*e,this.z=s*Math.cos(i),this}setFromCylindrical(e){return this.setFromCylindricalCoords(e.radius,e.theta,e.y)}setFromCylindricalCoords(e,t,i){return this.x=e*Math.sin(t),this.y=i,this.z=e*Math.cos(t),this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}setFromMatrixScale(e){const t=this.setFromMatrixColumn(e,0).length(),i=this.setFromMatrixColumn(e,1).length(),s=this.setFromMatrixColumn(e,2).length();return this.x=t,this.y=i,this.z=s,this}setFromMatrixColumn(e,t){return this.fromArray(e.elements,t*4)}setFromMatrix3Column(e,t){return this.fromArray(e.elements,t*3)}setFromEuler(e){return this.x=e._x,this.y=e._y,this.z=e._z,this}setFromColor(e){return this.x=e.r,this.y=e.g,this.z=e.b,this}equals(e){return e.x===this.x&&e.y===this.y&&e.z===this.z}fromArray(e,t=0){return this.x=e[t],this.y=e[t+1],this.z=e[t+2],this}toArray(e=[],t=0){return e[t]=this.x,e[t+1]=this.y,e[t+2]=this.z,e}fromBufferAttribute(e,t){return this.x=e.getX(t),this.y=e.getY(t),this.z=e.getZ(t),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const e=(Math.random()-.5)*2,t=Math.random()*Math.PI*2,i=Math.sqrt(1-e**2);return this.x=i*Math.cos(t),this.y=i*Math.sin(t),this.z=e,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const ih=new I,xp=new bn;class fn{constructor(e=new I(1/0,1/0,1/0),t=new I(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromArray(e){this.makeEmpty();for(let t=0,i=e.length;t<i;t+=3)this.expandByPoint(On.fromArray(e,t));return this}setFromBufferAttribute(e){this.makeEmpty();for(let t=0,i=e.count;t<i;t++)this.expandByPoint(On.fromBufferAttribute(e,t));return this}setFromPoints(e){this.makeEmpty();for(let t=0,i=e.length;t<i;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const i=On.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(i),this.max.copy(e).add(i),this}setFromObject(e,t=!1){return this.makeEmpty(),this.expandByObject(e,t)}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(e){return this.isEmpty()?e.set(0,0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}expandByObject(e,t=!1){e.updateWorldMatrix(!1,!1);const i=e.geometry;if(i!==void 0){const r=i.getAttribute("position");if(t===!0&&r!==void 0&&e.isInstancedMesh!==!0)for(let o=0,a=r.count;o<a;o++)e.isMesh===!0?e.getVertexPosition(o,On):On.fromBufferAttribute(r,o),On.applyMatrix4(e.matrixWorld),this.expandByPoint(On);else e.boundingBox!==void 0?(e.boundingBox===null&&e.computeBoundingBox(),Sa.copy(e.boundingBox)):(i.boundingBox===null&&i.computeBoundingBox(),Sa.copy(i.boundingBox)),Sa.applyMatrix4(e.matrixWorld),this.union(Sa)}const s=e.children;for(let r=0,o=s.length;r<o;r++)this.expandByObject(s[r],t);return this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y||e.z<this.min.z||e.z>this.max.z)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y&&this.min.z<=e.min.z&&e.max.z<=this.max.z}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y),(e.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y||e.max.z<this.min.z||e.min.z>this.max.z)}intersectsSphere(e){return this.clampPoint(e.center,On),On.distanceToSquared(e.center)<=e.radius*e.radius}intersectsPlane(e){let t,i;return e.normal.x>0?(t=e.normal.x*this.min.x,i=e.normal.x*this.max.x):(t=e.normal.x*this.max.x,i=e.normal.x*this.min.x),e.normal.y>0?(t+=e.normal.y*this.min.y,i+=e.normal.y*this.max.y):(t+=e.normal.y*this.max.y,i+=e.normal.y*this.min.y),e.normal.z>0?(t+=e.normal.z*this.min.z,i+=e.normal.z*this.max.z):(t+=e.normal.z*this.max.z,i+=e.normal.z*this.min.z),t<=-e.constant&&i>=-e.constant}intersectsTriangle(e){if(this.isEmpty())return!1;this.getCenter(Kr),Ea.subVectors(this.max,Kr),Zs.subVectors(e.a,Kr),Ks.subVectors(e.b,Kr),Js.subVectors(e.c,Kr),Li.subVectors(Ks,Zs),Di.subVectors(Js,Ks),hs.subVectors(Zs,Js);let t=[0,-Li.z,Li.y,0,-Di.z,Di.y,0,-hs.z,hs.y,Li.z,0,-Li.x,Di.z,0,-Di.x,hs.z,0,-hs.x,-Li.y,Li.x,0,-Di.y,Di.x,0,-hs.y,hs.x,0];return!sh(t,Zs,Ks,Js,Ea)||(t=[1,0,0,0,1,0,0,0,1],!sh(t,Zs,Ks,Js,Ea))?!1:(Ta.crossVectors(Li,Di),t=[Ta.x,Ta.y,Ta.z],sh(t,Zs,Ks,Js,Ea))}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,On).distanceTo(e)}getBoundingSphere(e){return this.isEmpty()?e.makeEmpty():(this.getCenter(e.center),e.radius=this.getSize(On).length()*.5),e}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}applyMatrix4(e){return this.isEmpty()?this:(hi[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(e),hi[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(e),hi[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(e),hi[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(e),hi[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(e),hi[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(e),hi[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(e),hi[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(e),this.setFromPoints(hi),this)}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const hi=[new I,new I,new I,new I,new I,new I,new I,new I],On=new I,Sa=new fn,Zs=new I,Ks=new I,Js=new I,Li=new I,Di=new I,hs=new I,Kr=new I,Ea=new I,Ta=new I,us=new I;function sh(n,e,t,i,s){for(let r=0,o=n.length-3;r<=o;r+=3){us.fromArray(n,r);const a=s.x*Math.abs(us.x)+s.y*Math.abs(us.y)+s.z*Math.abs(us.z),l=e.dot(us),c=t.dot(us),h=i.dot(us);if(Math.max(-Math.max(l,c,h),Math.min(l,c,h))>a)return!1}return!0}const uE=new fn,Jr=new I,rh=new I;class rn{constructor(e=new I,t=-1){this.isSphere=!0,this.center=e,this.radius=t}set(e,t){return this.center.copy(e),this.radius=t,this}setFromPoints(e,t){const i=this.center;t!==void 0?i.copy(t):uE.setFromPoints(e).getCenter(i);let s=0;for(let r=0,o=e.length;r<o;r++)s=Math.max(s,i.distanceToSquared(e[r]));return this.radius=Math.sqrt(s),this}copy(e){return this.center.copy(e.center),this.radius=e.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(e){return e.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(e){return e.distanceTo(this.center)-this.radius}intersectsSphere(e){const t=this.radius+e.radius;return e.center.distanceToSquared(this.center)<=t*t}intersectsBox(e){return e.intersectsSphere(this)}intersectsPlane(e){return Math.abs(e.distanceToPoint(this.center))<=this.radius}clampPoint(e,t){const i=this.center.distanceToSquared(e);return t.copy(e),i>this.radius*this.radius&&(t.sub(this.center).normalize(),t.multiplyScalar(this.radius).add(this.center)),t}getBoundingBox(e){return this.isEmpty()?(e.makeEmpty(),e):(e.set(this.center,this.center),e.expandByScalar(this.radius),e)}applyMatrix4(e){return this.center.applyMatrix4(e),this.radius=this.radius*e.getMaxScaleOnAxis(),this}translate(e){return this.center.add(e),this}expandByPoint(e){if(this.isEmpty())return this.center.copy(e),this.radius=0,this;Jr.subVectors(e,this.center);const t=Jr.lengthSq();if(t>this.radius*this.radius){const i=Math.sqrt(t),s=(i-this.radius)*.5;this.center.addScaledVector(Jr,s/i),this.radius+=s}return this}union(e){return e.isEmpty()?this:this.isEmpty()?(this.copy(e),this):(this.center.equals(e.center)===!0?this.radius=Math.max(this.radius,e.radius):(rh.subVectors(e.center,this.center).setLength(e.radius),this.expandByPoint(Jr.copy(e.center).add(rh)),this.expandByPoint(Jr.copy(e.center).sub(rh))),this)}equals(e){return e.center.equals(this.center)&&e.radius===this.radius}clone(){return new this.constructor().copy(this)}}const ui=new I,oh=new I,Aa=new I,Ui=new I,ah=new I,Ca=new I,lh=new I;class Wr{constructor(e=new I,t=new I(0,0,-1)){this.origin=e,this.direction=t}set(e,t){return this.origin.copy(e),this.direction.copy(t),this}copy(e){return this.origin.copy(e.origin),this.direction.copy(e.direction),this}at(e,t){return t.copy(this.origin).addScaledVector(this.direction,e)}lookAt(e){return this.direction.copy(e).sub(this.origin).normalize(),this}recast(e){return this.origin.copy(this.at(e,ui)),this}closestPointToPoint(e,t){t.subVectors(e,this.origin);const i=t.dot(this.direction);return i<0?t.copy(this.origin):t.copy(this.origin).addScaledVector(this.direction,i)}distanceToPoint(e){return Math.sqrt(this.distanceSqToPoint(e))}distanceSqToPoint(e){const t=ui.subVectors(e,this.origin).dot(this.direction);return t<0?this.origin.distanceToSquared(e):(ui.copy(this.origin).addScaledVector(this.direction,t),ui.distanceToSquared(e))}distanceSqToSegment(e,t,i,s){oh.copy(e).add(t).multiplyScalar(.5),Aa.copy(t).sub(e).normalize(),Ui.copy(this.origin).sub(oh);const r=e.distanceTo(t)*.5,o=-this.direction.dot(Aa),a=Ui.dot(this.direction),l=-Ui.dot(Aa),c=Ui.lengthSq(),h=Math.abs(1-o*o);let u,d,f,m;if(h>0)if(u=o*l-a,d=o*a-l,m=r*h,u>=0)if(d>=-m)if(d<=m){const y=1/h;u*=y,d*=y,f=u*(u+o*d+2*a)+d*(o*u+d+2*l)+c}else d=r,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d=-r,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d<=-m?(u=Math.max(0,-(-o*r+a)),d=u>0?-r:Math.min(Math.max(-r,-l),r),f=-u*u+d*(d+2*l)+c):d<=m?(u=0,d=Math.min(Math.max(-r,-l),r),f=d*(d+2*l)+c):(u=Math.max(0,-(o*r+a)),d=u>0?r:Math.min(Math.max(-r,-l),r),f=-u*u+d*(d+2*l)+c);else d=o>0?-r:r,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;return i&&i.copy(this.origin).addScaledVector(this.direction,u),s&&s.copy(oh).addScaledVector(Aa,d),f}intersectSphere(e,t){ui.subVectors(e.center,this.origin);const i=ui.dot(this.direction),s=ui.dot(ui)-i*i,r=e.radius*e.radius;if(s>r)return null;const o=Math.sqrt(r-s),a=i-o,l=i+o;return l<0?null:a<0?this.at(l,t):this.at(a,t)}intersectsSphere(e){return this.distanceSqToPoint(e.center)<=e.radius*e.radius}distanceToPlane(e){const t=e.normal.dot(this.direction);if(t===0)return e.distanceToPoint(this.origin)===0?0:null;const i=-(this.origin.dot(e.normal)+e.constant)/t;return i>=0?i:null}intersectPlane(e,t){const i=this.distanceToPlane(e);return i===null?null:this.at(i,t)}intersectsPlane(e){const t=e.distanceToPoint(this.origin);return t===0||e.normal.dot(this.direction)*t<0}intersectBox(e,t){let i,s,r,o,a,l;const c=1/this.direction.x,h=1/this.direction.y,u=1/this.direction.z,d=this.origin;return c>=0?(i=(e.min.x-d.x)*c,s=(e.max.x-d.x)*c):(i=(e.max.x-d.x)*c,s=(e.min.x-d.x)*c),h>=0?(r=(e.min.y-d.y)*h,o=(e.max.y-d.y)*h):(r=(e.max.y-d.y)*h,o=(e.min.y-d.y)*h),i>o||r>s||((r>i||isNaN(i))&&(i=r),(o<s||isNaN(s))&&(s=o),u>=0?(a=(e.min.z-d.z)*u,l=(e.max.z-d.z)*u):(a=(e.max.z-d.z)*u,l=(e.min.z-d.z)*u),i>l||a>s)||((a>i||i!==i)&&(i=a),(l<s||s!==s)&&(s=l),s<0)?null:this.at(i>=0?i:s,t)}intersectsBox(e){return this.intersectBox(e,ui)!==null}intersectTriangle(e,t,i,s,r){ah.subVectors(t,e),Ca.subVectors(i,e),lh.crossVectors(ah,Ca);let o=this.direction.dot(lh),a;if(o>0){if(s)return null;a=1}else if(o<0)a=-1,o=-o;else return null;Ui.subVectors(this.origin,e);const l=a*this.direction.dot(Ca.crossVectors(Ui,Ca));if(l<0)return null;const c=a*this.direction.dot(ah.cross(Ui));if(c<0||l+c>o)return null;const h=-a*Ui.dot(lh);return h<0?null:this.at(h/o,r)}applyMatrix4(e){return this.origin.applyMatrix4(e),this.direction.transformDirection(e),this}equals(e){return e.origin.equals(this.origin)&&e.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class Oe{constructor(e,t,i,s,r,o,a,l,c,h,u,d,f,m,y,g){Oe.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],e!==void 0&&this.set(e,t,i,s,r,o,a,l,c,h,u,d,f,m,y,g)}set(e,t,i,s,r,o,a,l,c,h,u,d,f,m,y,g){const p=this.elements;return p[0]=e,p[4]=t,p[8]=i,p[12]=s,p[1]=r,p[5]=o,p[9]=a,p[13]=l,p[2]=c,p[6]=h,p[10]=u,p[14]=d,p[3]=f,p[7]=m,p[11]=y,p[15]=g,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Oe().fromArray(this.elements)}copy(e){const t=this.elements,i=e.elements;return t[0]=i[0],t[1]=i[1],t[2]=i[2],t[3]=i[3],t[4]=i[4],t[5]=i[5],t[6]=i[6],t[7]=i[7],t[8]=i[8],t[9]=i[9],t[10]=i[10],t[11]=i[11],t[12]=i[12],t[13]=i[13],t[14]=i[14],t[15]=i[15],this}copyPosition(e){const t=this.elements,i=e.elements;return t[12]=i[12],t[13]=i[13],t[14]=i[14],this}setFromMatrix3(e){const t=e.elements;return this.set(t[0],t[3],t[6],0,t[1],t[4],t[7],0,t[2],t[5],t[8],0,0,0,0,1),this}extractBasis(e,t,i){return e.setFromMatrixColumn(this,0),t.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this}makeBasis(e,t,i){return this.set(e.x,t.x,i.x,0,e.y,t.y,i.y,0,e.z,t.z,i.z,0,0,0,0,1),this}extractRotation(e){const t=this.elements,i=e.elements,s=1/Qs.setFromMatrixColumn(e,0).length(),r=1/Qs.setFromMatrixColumn(e,1).length(),o=1/Qs.setFromMatrixColumn(e,2).length();return t[0]=i[0]*s,t[1]=i[1]*s,t[2]=i[2]*s,t[3]=0,t[4]=i[4]*r,t[5]=i[5]*r,t[6]=i[6]*r,t[7]=0,t[8]=i[8]*o,t[9]=i[9]*o,t[10]=i[10]*o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromEuler(e){const t=this.elements,i=e.x,s=e.y,r=e.z,o=Math.cos(i),a=Math.sin(i),l=Math.cos(s),c=Math.sin(s),h=Math.cos(r),u=Math.sin(r);if(e.order==="XYZ"){const d=o*h,f=o*u,m=a*h,y=a*u;t[0]=l*h,t[4]=-l*u,t[8]=c,t[1]=f+m*c,t[5]=d-y*c,t[9]=-a*l,t[2]=y-d*c,t[6]=m+f*c,t[10]=o*l}else if(e.order==="YXZ"){const d=l*h,f=l*u,m=c*h,y=c*u;t[0]=d+y*a,t[4]=m*a-f,t[8]=o*c,t[1]=o*u,t[5]=o*h,t[9]=-a,t[2]=f*a-m,t[6]=y+d*a,t[10]=o*l}else if(e.order==="ZXY"){const d=l*h,f=l*u,m=c*h,y=c*u;t[0]=d-y*a,t[4]=-o*u,t[8]=m+f*a,t[1]=f+m*a,t[5]=o*h,t[9]=y-d*a,t[2]=-o*c,t[6]=a,t[10]=o*l}else if(e.order==="ZYX"){const d=o*h,f=o*u,m=a*h,y=a*u;t[0]=l*h,t[4]=m*c-f,t[8]=d*c+y,t[1]=l*u,t[5]=y*c+d,t[9]=f*c-m,t[2]=-c,t[6]=a*l,t[10]=o*l}else if(e.order==="YZX"){const d=o*l,f=o*c,m=a*l,y=a*c;t[0]=l*h,t[4]=y-d*u,t[8]=m*u+f,t[1]=u,t[5]=o*h,t[9]=-a*h,t[2]=-c*h,t[6]=f*u+m,t[10]=d-y*u}else if(e.order==="XZY"){const d=o*l,f=o*c,m=a*l,y=a*c;t[0]=l*h,t[4]=-u,t[8]=c*h,t[1]=d*u+y,t[5]=o*h,t[9]=f*u-m,t[2]=m*u-f,t[6]=a*h,t[10]=y*u+d}return t[3]=0,t[7]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,this}makeRotationFromQuaternion(e){return this.compose(dE,e,fE)}lookAt(e,t,i){const s=this.elements;return En.subVectors(e,t),En.lengthSq()===0&&(En.z=1),En.normalize(),Ni.crossVectors(i,En),Ni.lengthSq()===0&&(Math.abs(i.z)===1?En.x+=1e-4:En.z+=1e-4,En.normalize(),Ni.crossVectors(i,En)),Ni.normalize(),Ra.crossVectors(En,Ni),s[0]=Ni.x,s[4]=Ra.x,s[8]=En.x,s[1]=Ni.y,s[5]=Ra.y,s[9]=En.y,s[2]=Ni.z,s[6]=Ra.z,s[10]=En.z,this}multiply(e){return this.multiplyMatrices(this,e)}premultiply(e){return this.multiplyMatrices(e,this)}multiplyMatrices(e,t){const i=e.elements,s=t.elements,r=this.elements,o=i[0],a=i[4],l=i[8],c=i[12],h=i[1],u=i[5],d=i[9],f=i[13],m=i[2],y=i[6],g=i[10],p=i[14],v=i[3],_=i[7],x=i[11],P=i[15],M=s[0],A=s[4],O=s[8],S=s[12],C=s[1],G=s[5],J=s[9],de=s[13],F=s[2],q=s[6],X=s[10],te=s[14],Q=s[3],re=s[7],he=s[11],pe=s[15];return r[0]=o*M+a*C+l*F+c*Q,r[4]=o*A+a*G+l*q+c*re,r[8]=o*O+a*J+l*X+c*he,r[12]=o*S+a*de+l*te+c*pe,r[1]=h*M+u*C+d*F+f*Q,r[5]=h*A+u*G+d*q+f*re,r[9]=h*O+u*J+d*X+f*he,r[13]=h*S+u*de+d*te+f*pe,r[2]=m*M+y*C+g*F+p*Q,r[6]=m*A+y*G+g*q+p*re,r[10]=m*O+y*J+g*X+p*he,r[14]=m*S+y*de+g*te+p*pe,r[3]=v*M+_*C+x*F+P*Q,r[7]=v*A+_*G+x*q+P*re,r[11]=v*O+_*J+x*X+P*he,r[15]=v*S+_*de+x*te+P*pe,this}multiplyScalar(e){const t=this.elements;return t[0]*=e,t[4]*=e,t[8]*=e,t[12]*=e,t[1]*=e,t[5]*=e,t[9]*=e,t[13]*=e,t[2]*=e,t[6]*=e,t[10]*=e,t[14]*=e,t[3]*=e,t[7]*=e,t[11]*=e,t[15]*=e,this}determinant(){const e=this.elements,t=e[0],i=e[4],s=e[8],r=e[12],o=e[1],a=e[5],l=e[9],c=e[13],h=e[2],u=e[6],d=e[10],f=e[14],m=e[3],y=e[7],g=e[11],p=e[15];return m*(+r*l*u-s*c*u-r*a*d+i*c*d+s*a*f-i*l*f)+y*(+t*l*f-t*c*d+r*o*d-s*o*f+s*c*h-r*l*h)+g*(+t*c*u-t*a*f-r*o*u+i*o*f+r*a*h-i*c*h)+p*(-s*a*h-t*l*u+t*a*d+s*o*u-i*o*d+i*l*h)}transpose(){const e=this.elements;let t;return t=e[1],e[1]=e[4],e[4]=t,t=e[2],e[2]=e[8],e[8]=t,t=e[6],e[6]=e[9],e[9]=t,t=e[3],e[3]=e[12],e[12]=t,t=e[7],e[7]=e[13],e[13]=t,t=e[11],e[11]=e[14],e[14]=t,this}setPosition(e,t,i){const s=this.elements;return e.isVector3?(s[12]=e.x,s[13]=e.y,s[14]=e.z):(s[12]=e,s[13]=t,s[14]=i),this}invert(){const e=this.elements,t=e[0],i=e[1],s=e[2],r=e[3],o=e[4],a=e[5],l=e[6],c=e[7],h=e[8],u=e[9],d=e[10],f=e[11],m=e[12],y=e[13],g=e[14],p=e[15],v=u*g*c-y*d*c+y*l*f-a*g*f-u*l*p+a*d*p,_=m*d*c-h*g*c-m*l*f+o*g*f+h*l*p-o*d*p,x=h*y*c-m*u*c+m*a*f-o*y*f-h*a*p+o*u*p,P=m*u*l-h*y*l-m*a*d+o*y*d+h*a*g-o*u*g,M=t*v+i*_+s*x+r*P;if(M===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const A=1/M;return e[0]=v*A,e[1]=(y*d*r-u*g*r-y*s*f+i*g*f+u*s*p-i*d*p)*A,e[2]=(a*g*r-y*l*r+y*s*c-i*g*c-a*s*p+i*l*p)*A,e[3]=(u*l*r-a*d*r-u*s*c+i*d*c+a*s*f-i*l*f)*A,e[4]=_*A,e[5]=(h*g*r-m*d*r+m*s*f-t*g*f-h*s*p+t*d*p)*A,e[6]=(m*l*r-o*g*r-m*s*c+t*g*c+o*s*p-t*l*p)*A,e[7]=(o*d*r-h*l*r+h*s*c-t*d*c-o*s*f+t*l*f)*A,e[8]=x*A,e[9]=(m*u*r-h*y*r-m*i*f+t*y*f+h*i*p-t*u*p)*A,e[10]=(o*y*r-m*a*r+m*i*c-t*y*c-o*i*p+t*a*p)*A,e[11]=(h*a*r-o*u*r-h*i*c+t*u*c+o*i*f-t*a*f)*A,e[12]=P*A,e[13]=(h*y*s-m*u*s+m*i*d-t*y*d-h*i*g+t*u*g)*A,e[14]=(m*a*s-o*y*s-m*i*l+t*y*l+o*i*g-t*a*g)*A,e[15]=(o*u*s-h*a*s+h*i*l-t*u*l-o*i*d+t*a*d)*A,this}scale(e){const t=this.elements,i=e.x,s=e.y,r=e.z;return t[0]*=i,t[4]*=s,t[8]*=r,t[1]*=i,t[5]*=s,t[9]*=r,t[2]*=i,t[6]*=s,t[10]*=r,t[3]*=i,t[7]*=s,t[11]*=r,this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],i=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],s=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,i,s))}makeTranslation(e,t,i){return e.isVector3?this.set(1,0,0,e.x,0,1,0,e.y,0,0,1,e.z,0,0,0,1):this.set(1,0,0,e,0,1,0,t,0,0,1,i,0,0,0,1),this}makeRotationX(e){const t=Math.cos(e),i=Math.sin(e);return this.set(1,0,0,0,0,t,-i,0,0,i,t,0,0,0,0,1),this}makeRotationY(e){const t=Math.cos(e),i=Math.sin(e);return this.set(t,0,i,0,0,1,0,0,-i,0,t,0,0,0,0,1),this}makeRotationZ(e){const t=Math.cos(e),i=Math.sin(e);return this.set(t,-i,0,0,i,t,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(e,t){const i=Math.cos(t),s=Math.sin(t),r=1-i,o=e.x,a=e.y,l=e.z,c=r*o,h=r*a;return this.set(c*o+i,c*a-s*l,c*l+s*a,0,c*a+s*l,h*a+i,h*l-s*o,0,c*l-s*a,h*l+s*o,r*l*l+i,0,0,0,0,1),this}makeScale(e,t,i){return this.set(e,0,0,0,0,t,0,0,0,0,i,0,0,0,0,1),this}makeShear(e,t,i,s,r,o){return this.set(1,i,r,0,e,1,o,0,t,s,1,0,0,0,0,1),this}compose(e,t,i){const s=this.elements,r=t._x,o=t._y,a=t._z,l=t._w,c=r+r,h=o+o,u=a+a,d=r*c,f=r*h,m=r*u,y=o*h,g=o*u,p=a*u,v=l*c,_=l*h,x=l*u,P=i.x,M=i.y,A=i.z;return s[0]=(1-(y+p))*P,s[1]=(f+x)*P,s[2]=(m-_)*P,s[3]=0,s[4]=(f-x)*M,s[5]=(1-(d+p))*M,s[6]=(g+v)*M,s[7]=0,s[8]=(m+_)*A,s[9]=(g-v)*A,s[10]=(1-(d+y))*A,s[11]=0,s[12]=e.x,s[13]=e.y,s[14]=e.z,s[15]=1,this}decompose(e,t,i){const s=this.elements;let r=Qs.set(s[0],s[1],s[2]).length();const o=Qs.set(s[4],s[5],s[6]).length(),a=Qs.set(s[8],s[9],s[10]).length();this.determinant()<0&&(r=-r),e.x=s[12],e.y=s[13],e.z=s[14],Fn.copy(this);const c=1/r,h=1/o,u=1/a;return Fn.elements[0]*=c,Fn.elements[1]*=c,Fn.elements[2]*=c,Fn.elements[4]*=h,Fn.elements[5]*=h,Fn.elements[6]*=h,Fn.elements[8]*=u,Fn.elements[9]*=u,Fn.elements[10]*=u,t.setFromRotationMatrix(Fn),i.x=r,i.y=o,i.z=a,this}makePerspective(e,t,i,s,r,o,a=Hn){const l=this.elements,c=2*r/(t-e),h=2*r/(i-s),u=(t+e)/(t-e),d=(i+s)/(i-s);let f,m;if(a===Hn)f=-(o+r)/(o-r),m=-2*o*r/(o-r);else if(a===Nr)f=-o/(o-r),m=-o*r/(o-r);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return l[0]=c,l[4]=0,l[8]=u,l[12]=0,l[1]=0,l[5]=h,l[9]=d,l[13]=0,l[2]=0,l[6]=0,l[10]=f,l[14]=m,l[3]=0,l[7]=0,l[11]=-1,l[15]=0,this}makeOrthographic(e,t,i,s,r,o,a=Hn){const l=this.elements,c=1/(t-e),h=1/(i-s),u=1/(o-r),d=(t+e)*c,f=(i+s)*h;let m,y;if(a===Hn)m=(o+r)*u,y=-2*u;else if(a===Nr)m=r*u,y=-1*u;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return l[0]=2*c,l[4]=0,l[8]=0,l[12]=-d,l[1]=0,l[5]=2*h,l[9]=0,l[13]=-f,l[2]=0,l[6]=0,l[10]=y,l[14]=-m,l[3]=0,l[7]=0,l[11]=0,l[15]=1,this}equals(e){const t=this.elements,i=e.elements;for(let s=0;s<16;s++)if(t[s]!==i[s])return!1;return!0}fromArray(e,t=0){for(let i=0;i<16;i++)this.elements[i]=e[i+t];return this}toArray(e=[],t=0){const i=this.elements;return e[t]=i[0],e[t+1]=i[1],e[t+2]=i[2],e[t+3]=i[3],e[t+4]=i[4],e[t+5]=i[5],e[t+6]=i[6],e[t+7]=i[7],e[t+8]=i[8],e[t+9]=i[9],e[t+10]=i[10],e[t+11]=i[11],e[t+12]=i[12],e[t+13]=i[13],e[t+14]=i[14],e[t+15]=i[15],e}}const Qs=new I,Fn=new Oe,dE=new I(0,0,0),fE=new I(1,1,1),Ni=new I,Ra=new I,En=new I,bp=new Oe,wp=new bn;class ra{constructor(e=0,t=0,i=0,s=ra.DEFAULT_ORDER){this.isEuler=!0,this._x=e,this._y=t,this._z=i,this._order=s}get x(){return this._x}set x(e){this._x=e,this._onChangeCallback()}get y(){return this._y}set y(e){this._y=e,this._onChangeCallback()}get z(){return this._z}set z(e){this._z=e,this._onChangeCallback()}get order(){return this._order}set order(e){this._order=e,this._onChangeCallback()}set(e,t,i,s=this._order){return this._x=e,this._y=t,this._z=i,this._order=s,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(e){return this._x=e._x,this._y=e._y,this._z=e._z,this._order=e._order,this._onChangeCallback(),this}setFromRotationMatrix(e,t=this._order,i=!0){const s=e.elements,r=s[0],o=s[4],a=s[8],l=s[1],c=s[5],h=s[9],u=s[2],d=s[6],f=s[10];switch(t){case"XYZ":this._y=Math.asin(Pt(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-h,f),this._z=Math.atan2(-o,r)):(this._x=Math.atan2(d,c),this._z=0);break;case"YXZ":this._x=Math.asin(-Pt(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(a,f),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-u,r),this._z=0);break;case"ZXY":this._x=Math.asin(Pt(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-u,f),this._z=Math.atan2(-o,c)):(this._y=0,this._z=Math.atan2(l,r));break;case"ZYX":this._y=Math.asin(-Pt(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(d,f),this._z=Math.atan2(l,r)):(this._x=0,this._z=Math.atan2(-o,c));break;case"YZX":this._z=Math.asin(Pt(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-u,r)):(this._x=0,this._y=Math.atan2(a,f));break;case"XZY":this._z=Math.asin(-Pt(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(d,c),this._y=Math.atan2(a,r)):(this._x=Math.atan2(-h,f),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+t)}return this._order=t,i===!0&&this._onChangeCallback(),this}setFromQuaternion(e,t,i){return bp.makeRotationFromQuaternion(e),this.setFromRotationMatrix(bp,t,i)}setFromVector3(e,t=this._order){return this.set(e.x,e.y,e.z,t)}reorder(e){return wp.setFromEuler(this),this.setFromQuaternion(wp,e)}equals(e){return e._x===this._x&&e._y===this._y&&e._z===this._z&&e._order===this._order}fromArray(e){return this._x=e[0],this._y=e[1],this._z=e[2],e[3]!==void 0&&(this._order=e[3]),this._onChangeCallback(),this}toArray(e=[],t=0){return e[t]=this._x,e[t+1]=this._y,e[t+2]=this._z,e[t+3]=this._order,e}_onChange(e){return this._onChangeCallback=e,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}ra.DEFAULT_ORDER="XYZ";class gc{constructor(){this.mask=1}set(e){this.mask=(1<<e|0)>>>0}enable(e){this.mask|=1<<e|0}enableAll(){this.mask=-1}toggle(e){this.mask^=1<<e|0}disable(e){this.mask&=~(1<<e|0)}disableAll(){this.mask=0}test(e){return(this.mask&e.mask)!==0}isEnabled(e){return(this.mask&(1<<e|0))!==0}}let pE=0;const Mp=new I,er=new bn,di=new Oe,Pa=new I,Qr=new I,mE=new I,gE=new bn,Sp=new I(1,0,0),Ep=new I(0,1,0),Tp=new I(0,0,1),yE={type:"added"},_E={type:"removed"};class lt extends Ci{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:pE++}),this.uuid=Rn(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=lt.DEFAULT_UP.clone();const e=new I,t=new ra,i=new bn,s=new I(1,1,1);function r(){i.setFromEuler(t,!1)}function o(){t.setFromQuaternion(i,void 0,!1)}t._onChange(r),i._onChange(o),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:e},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:s},modelViewMatrix:{value:new Oe},normalMatrix:{value:new Ke}}),this.matrix=new Oe,this.matrixWorld=new Oe,this.matrixAutoUpdate=lt.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=lt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new gc,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(e){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(e),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(e){return this.quaternion.premultiply(e),this}setRotationFromAxisAngle(e,t){this.quaternion.setFromAxisAngle(e,t)}setRotationFromEuler(e){this.quaternion.setFromEuler(e,!0)}setRotationFromMatrix(e){this.quaternion.setFromRotationMatrix(e)}setRotationFromQuaternion(e){this.quaternion.copy(e)}rotateOnAxis(e,t){return er.setFromAxisAngle(e,t),this.quaternion.multiply(er),this}rotateOnWorldAxis(e,t){return er.setFromAxisAngle(e,t),this.quaternion.premultiply(er),this}rotateX(e){return this.rotateOnAxis(Sp,e)}rotateY(e){return this.rotateOnAxis(Ep,e)}rotateZ(e){return this.rotateOnAxis(Tp,e)}translateOnAxis(e,t){return Mp.copy(e).applyQuaternion(this.quaternion),this.position.add(Mp.multiplyScalar(t)),this}translateX(e){return this.translateOnAxis(Sp,e)}translateY(e){return this.translateOnAxis(Ep,e)}translateZ(e){return this.translateOnAxis(Tp,e)}localToWorld(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(this.matrixWorld)}worldToLocal(e){return this.updateWorldMatrix(!0,!1),e.applyMatrix4(di.copy(this.matrixWorld).invert())}lookAt(e,t,i){e.isVector3?Pa.copy(e):Pa.set(e,t,i);const s=this.parent;this.updateWorldMatrix(!0,!1),Qr.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?di.lookAt(Qr,Pa,this.up):di.lookAt(Pa,Qr,this.up),this.quaternion.setFromRotationMatrix(di),s&&(di.extractRotation(s.matrixWorld),er.setFromRotationMatrix(di),this.quaternion.premultiply(er.invert()))}add(e){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return e===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",e),this):(e&&e.isObject3D?(e.parent!==null&&e.parent.remove(e),e.parent=this,this.children.push(e),e.dispatchEvent(yE)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",e),this)}remove(e){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.remove(arguments[i]);return this}const t=this.children.indexOf(e);return t!==-1&&(e.parent=null,this.children.splice(t,1),e.dispatchEvent(_E)),this}removeFromParent(){const e=this.parent;return e!==null&&e.remove(this),this}clear(){return this.remove(...this.children)}attach(e){return this.updateWorldMatrix(!0,!1),di.copy(this.matrixWorld).invert(),e.parent!==null&&(e.parent.updateWorldMatrix(!0,!1),di.multiply(e.parent.matrixWorld)),e.applyMatrix4(di),this.add(e),e.updateWorldMatrix(!1,!0),this}getObjectById(e){return this.getObjectByProperty("id",e)}getObjectByName(e){return this.getObjectByProperty("name",e)}getObjectByProperty(e,t){if(this[e]===t)return this;for(let i=0,s=this.children.length;i<s;i++){const o=this.children[i].getObjectByProperty(e,t);if(o!==void 0)return o}}getObjectsByProperty(e,t,i=[]){this[e]===t&&i.push(this);const s=this.children;for(let r=0,o=s.length;r<o;r++)s[r].getObjectsByProperty(e,t,i);return i}getWorldPosition(e){return this.updateWorldMatrix(!0,!1),e.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Qr,e,mE),e}getWorldScale(e){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Qr,gE,e),e}getWorldDirection(e){this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return e.set(t[8],t[9],t[10]).normalize()}raycast(){}traverse(e){e(this);const t=this.children;for(let i=0,s=t.length;i<s;i++)t[i].traverse(e)}traverseVisible(e){if(this.visible===!1)return;e(this);const t=this.children;for(let i=0,s=t.length;i<s;i++)t[i].traverseVisible(e)}traverseAncestors(e){const t=this.parent;t!==null&&(e(t),t.traverseAncestors(e))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(e){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||e)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,e=!0);const t=this.children;for(let i=0,s=t.length;i<s;i++){const r=t[i];(r.matrixWorldAutoUpdate===!0||e===!0)&&r.updateMatrixWorld(e)}}updateWorldMatrix(e,t){const i=this.parent;if(e===!0&&i!==null&&i.matrixWorldAutoUpdate===!0&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),t===!0){const s=this.children;for(let r=0,o=s.length;r<o;r++){const a=s[r];a.matrixWorldAutoUpdate===!0&&a.updateWorldMatrix(!1,!0)}}}toJSON(e){const t=e===void 0||typeof e=="string",i={};t&&(e={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},i.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const s={};s.uuid=this.uuid,s.type=this.type,this.name!==""&&(s.name=this.name),this.castShadow===!0&&(s.castShadow=!0),this.receiveShadow===!0&&(s.receiveShadow=!0),this.visible===!1&&(s.visible=!1),this.frustumCulled===!1&&(s.frustumCulled=!1),this.renderOrder!==0&&(s.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(s.userData=this.userData),s.layers=this.layers.mask,s.matrix=this.matrix.toArray(),s.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(s.matrixAutoUpdate=!1),this.isInstancedMesh&&(s.type="InstancedMesh",s.count=this.count,s.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(s.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(s.type="BatchedMesh",s.perObjectFrustumCulled=this.perObjectFrustumCulled,s.sortObjects=this.sortObjects,s.drawRanges=this._drawRanges,s.reservedRanges=this._reservedRanges,s.visibility=this._visibility,s.active=this._active,s.bounds=this._bounds.map(a=>({boxInitialized:a.boxInitialized,boxMin:a.box.min.toArray(),boxMax:a.box.max.toArray(),sphereInitialized:a.sphereInitialized,sphereRadius:a.sphere.radius,sphereCenter:a.sphere.center.toArray()})),s.maxGeometryCount=this._maxGeometryCount,s.maxVertexCount=this._maxVertexCount,s.maxIndexCount=this._maxIndexCount,s.geometryInitialized=this._geometryInitialized,s.geometryCount=this._geometryCount,s.matricesTexture=this._matricesTexture.toJSON(e),this.boundingSphere!==null&&(s.boundingSphere={center:s.boundingSphere.center.toArray(),radius:s.boundingSphere.radius}),this.boundingBox!==null&&(s.boundingBox={min:s.boundingBox.min.toArray(),max:s.boundingBox.max.toArray()}));function r(a,l){return a[l.uuid]===void 0&&(a[l.uuid]=l.toJSON(e)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?s.background=this.background.toJSON():this.background.isTexture&&(s.background=this.background.toJSON(e).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(s.environment=this.environment.toJSON(e).uuid);else if(this.isMesh||this.isLine||this.isPoints){s.geometry=r(e.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const l=a.shapes;if(Array.isArray(l))for(let c=0,h=l.length;c<h;c++){const u=l[c];r(e.shapes,u)}else r(e.shapes,l)}}if(this.isSkinnedMesh&&(s.bindMode=this.bindMode,s.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(r(e.skeletons,this.skeleton),s.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let l=0,c=this.material.length;l<c;l++)a.push(r(e.materials,this.material[l]));s.material=a}else s.material=r(e.materials,this.material);if(this.children.length>0){s.children=[];for(let a=0;a<this.children.length;a++)s.children.push(this.children[a].toJSON(e).object)}if(this.animations.length>0){s.animations=[];for(let a=0;a<this.animations.length;a++){const l=this.animations[a];s.animations.push(r(e.animations,l))}}if(t){const a=o(e.geometries),l=o(e.materials),c=o(e.textures),h=o(e.images),u=o(e.shapes),d=o(e.skeletons),f=o(e.animations),m=o(e.nodes);a.length>0&&(i.geometries=a),l.length>0&&(i.materials=l),c.length>0&&(i.textures=c),h.length>0&&(i.images=h),u.length>0&&(i.shapes=u),d.length>0&&(i.skeletons=d),f.length>0&&(i.animations=f),m.length>0&&(i.nodes=m)}return i.object=s,i;function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata,l.push(h)}return l}}clone(e){return new this.constructor().copy(this,e)}copy(e,t=!0){if(this.name=e.name,this.up.copy(e.up),this.position.copy(e.position),this.rotation.order=e.rotation.order,this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.matrix.copy(e.matrix),this.matrixWorld.copy(e.matrixWorld),this.matrixAutoUpdate=e.matrixAutoUpdate,this.matrixWorldAutoUpdate=e.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=e.matrixWorldNeedsUpdate,this.layers.mask=e.layers.mask,this.visible=e.visible,this.castShadow=e.castShadow,this.receiveShadow=e.receiveShadow,this.frustumCulled=e.frustumCulled,this.renderOrder=e.renderOrder,this.animations=e.animations.slice(),this.userData=JSON.parse(JSON.stringify(e.userData)),t===!0)for(let i=0;i<e.children.length;i++){const s=e.children[i];this.add(s.clone())}return this}}lt.DEFAULT_UP=new I(0,1,0);lt.DEFAULT_MATRIX_AUTO_UPDATE=!0;lt.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const kn=new I,fi=new I,ch=new I,pi=new I,tr=new I,nr=new I,Ap=new I,hh=new I,uh=new I,dh=new I;let Ia=!1;class _n{constructor(e=new I,t=new I,i=new I){this.a=e,this.b=t,this.c=i}static getNormal(e,t,i,s){s.subVectors(i,t),kn.subVectors(e,t),s.cross(kn);const r=s.lengthSq();return r>0?s.multiplyScalar(1/Math.sqrt(r)):s.set(0,0,0)}static getBarycoord(e,t,i,s,r){kn.subVectors(s,t),fi.subVectors(i,t),ch.subVectors(e,t);const o=kn.dot(kn),a=kn.dot(fi),l=kn.dot(ch),c=fi.dot(fi),h=fi.dot(ch),u=o*c-a*a;if(u===0)return r.set(0,0,0),null;const d=1/u,f=(c*l-a*h)*d,m=(o*h-a*l)*d;return r.set(1-f-m,m,f)}static containsPoint(e,t,i,s){return this.getBarycoord(e,t,i,s,pi)===null?!1:pi.x>=0&&pi.y>=0&&pi.x+pi.y<=1}static getUV(e,t,i,s,r,o,a,l){return Ia===!1&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),Ia=!0),this.getInterpolation(e,t,i,s,r,o,a,l)}static getInterpolation(e,t,i,s,r,o,a,l){return this.getBarycoord(e,t,i,s,pi)===null?(l.x=0,l.y=0,"z"in l&&(l.z=0),"w"in l&&(l.w=0),null):(l.setScalar(0),l.addScaledVector(r,pi.x),l.addScaledVector(o,pi.y),l.addScaledVector(a,pi.z),l)}static isFrontFacing(e,t,i,s){return kn.subVectors(i,t),fi.subVectors(e,t),kn.cross(fi).dot(s)<0}set(e,t,i){return this.a.copy(e),this.b.copy(t),this.c.copy(i),this}setFromPointsAndIndices(e,t,i,s){return this.a.copy(e[t]),this.b.copy(e[i]),this.c.copy(e[s]),this}setFromAttributeAndIndices(e,t,i,s){return this.a.fromBufferAttribute(e,t),this.b.fromBufferAttribute(e,i),this.c.fromBufferAttribute(e,s),this}clone(){return new this.constructor().copy(this)}copy(e){return this.a.copy(e.a),this.b.copy(e.b),this.c.copy(e.c),this}getArea(){return kn.subVectors(this.c,this.b),fi.subVectors(this.a,this.b),kn.cross(fi).length()*.5}getMidpoint(e){return e.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(e){return _n.getNormal(this.a,this.b,this.c,e)}getPlane(e){return e.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(e,t){return _n.getBarycoord(e,this.a,this.b,this.c,t)}getUV(e,t,i,s,r){return Ia===!1&&(console.warn("THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation()."),Ia=!0),_n.getInterpolation(e,this.a,this.b,this.c,t,i,s,r)}getInterpolation(e,t,i,s,r){return _n.getInterpolation(e,this.a,this.b,this.c,t,i,s,r)}containsPoint(e){return _n.containsPoint(e,this.a,this.b,this.c)}isFrontFacing(e){return _n.isFrontFacing(this.a,this.b,this.c,e)}intersectsBox(e){return e.intersectsTriangle(this)}closestPointToPoint(e,t){const i=this.a,s=this.b,r=this.c;let o,a;tr.subVectors(s,i),nr.subVectors(r,i),hh.subVectors(e,i);const l=tr.dot(hh),c=nr.dot(hh);if(l<=0&&c<=0)return t.copy(i);uh.subVectors(e,s);const h=tr.dot(uh),u=nr.dot(uh);if(h>=0&&u<=h)return t.copy(s);const d=l*u-h*c;if(d<=0&&l>=0&&h<=0)return o=l/(l-h),t.copy(i).addScaledVector(tr,o);dh.subVectors(e,r);const f=tr.dot(dh),m=nr.dot(dh);if(m>=0&&f<=m)return t.copy(r);const y=f*c-l*m;if(y<=0&&c>=0&&m<=0)return a=c/(c-m),t.copy(i).addScaledVector(nr,a);const g=h*m-f*u;if(g<=0&&u-h>=0&&f-m>=0)return Ap.subVectors(r,s),a=(u-h)/(u-h+(f-m)),t.copy(s).addScaledVector(Ap,a);const p=1/(g+y+d);return o=y*p,a=d*p,t.copy(i).addScaledVector(tr,o).addScaledVector(nr,a)}equals(e){return e.a.equals(this.a)&&e.b.equals(this.b)&&e.c.equals(this.c)}}const a_={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Oi={h:0,s:0,l:0},La={h:0,s:0,l:0};function fh(n,e,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?n+(e-n)*6*t:t<1/2?e:t<2/3?n+(e-n)*6*(2/3-t):n}class Te{constructor(e,t,i){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(e,t,i)}set(e,t,i){if(t===void 0&&i===void 0){const s=e;s&&s.isColor?this.copy(s):typeof s=="number"?this.setHex(s):typeof s=="string"&&this.setStyle(s)}else this.setRGB(e,t,i);return this}setScalar(e){return this.r=e,this.g=e,this.b=e,this}setHex(e,t=Ft){return e=Math.floor(e),this.r=(e>>16&255)/255,this.g=(e>>8&255)/255,this.b=(e&255)/255,ut.toWorkingColorSpace(this,t),this}setRGB(e,t,i,s=ut.workingColorSpace){return this.r=e,this.g=t,this.b=i,ut.toWorkingColorSpace(this,s),this}setHSL(e,t,i,s=ut.workingColorSpace){if(e=Ld(e,1),t=Pt(t,0,1),i=Pt(i,0,1),t===0)this.r=this.g=this.b=i;else{const r=i<=.5?i*(1+t):i+t-i*t,o=2*i-r;this.r=fh(o,r,e+1/3),this.g=fh(o,r,e),this.b=fh(o,r,e-1/3)}return ut.toWorkingColorSpace(this,s),this}setStyle(e,t=Ft){function i(r){r!==void 0&&parseFloat(r)<1&&console.warn("THREE.Color: Alpha component of "+e+" will be ignored.")}let s;if(s=/^(\w+)\(([^\)]*)\)/.exec(e)){let r;const o=s[1],a=s[2];switch(o){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return i(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,t);if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return i(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,t);break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return i(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+e)}}else if(s=/^\#([A-Fa-f\d]+)$/.exec(e)){const r=s[1],o=r.length;if(o===3)return this.setRGB(parseInt(r.charAt(0),16)/15,parseInt(r.charAt(1),16)/15,parseInt(r.charAt(2),16)/15,t);if(o===6)return this.setHex(parseInt(r,16),t);console.warn("THREE.Color: Invalid hex color "+e)}else if(e&&e.length>0)return this.setColorName(e,t);return this}setColorName(e,t=Ft){const i=a_[e.toLowerCase()];return i!==void 0?this.setHex(i,t):console.warn("THREE.Color: Unknown color "+e),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(e){return this.r=e.r,this.g=e.g,this.b=e.b,this}copySRGBToLinear(e){return this.r=Ar(e.r),this.g=Ar(e.g),this.b=Ar(e.b),this}copyLinearToSRGB(e){return this.r=th(e.r),this.g=th(e.g),this.b=th(e.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(e=Ft){return ut.fromWorkingColorSpace(Qt.copy(this),e),Math.round(Pt(Qt.r*255,0,255))*65536+Math.round(Pt(Qt.g*255,0,255))*256+Math.round(Pt(Qt.b*255,0,255))}getHexString(e=Ft){return("000000"+this.getHex(e).toString(16)).slice(-6)}getHSL(e,t=ut.workingColorSpace){ut.fromWorkingColorSpace(Qt.copy(this),t);const i=Qt.r,s=Qt.g,r=Qt.b,o=Math.max(i,s,r),a=Math.min(i,s,r);let l,c;const h=(a+o)/2;if(a===o)l=0,c=0;else{const u=o-a;switch(c=h<=.5?u/(o+a):u/(2-o-a),o){case i:l=(s-r)/u+(s<r?6:0);break;case s:l=(r-i)/u+2;break;case r:l=(i-s)/u+4;break}l/=6}return e.h=l,e.s=c,e.l=h,e}getRGB(e,t=ut.workingColorSpace){return ut.fromWorkingColorSpace(Qt.copy(this),t),e.r=Qt.r,e.g=Qt.g,e.b=Qt.b,e}getStyle(e=Ft){ut.fromWorkingColorSpace(Qt.copy(this),e);const t=Qt.r,i=Qt.g,s=Qt.b;return e!==Ft?`color(${e} ${t.toFixed(3)} ${i.toFixed(3)} ${s.toFixed(3)})`:`rgb(${Math.round(t*255)},${Math.round(i*255)},${Math.round(s*255)})`}offsetHSL(e,t,i){return this.getHSL(Oi),this.setHSL(Oi.h+e,Oi.s+t,Oi.l+i)}add(e){return this.r+=e.r,this.g+=e.g,this.b+=e.b,this}addColors(e,t){return this.r=e.r+t.r,this.g=e.g+t.g,this.b=e.b+t.b,this}addScalar(e){return this.r+=e,this.g+=e,this.b+=e,this}sub(e){return this.r=Math.max(0,this.r-e.r),this.g=Math.max(0,this.g-e.g),this.b=Math.max(0,this.b-e.b),this}multiply(e){return this.r*=e.r,this.g*=e.g,this.b*=e.b,this}multiplyScalar(e){return this.r*=e,this.g*=e,this.b*=e,this}lerp(e,t){return this.r+=(e.r-this.r)*t,this.g+=(e.g-this.g)*t,this.b+=(e.b-this.b)*t,this}lerpColors(e,t,i){return this.r=e.r+(t.r-e.r)*i,this.g=e.g+(t.g-e.g)*i,this.b=e.b+(t.b-e.b)*i,this}lerpHSL(e,t){this.getHSL(Oi),e.getHSL(La);const i=_o(Oi.h,La.h,t),s=_o(Oi.s,La.s,t),r=_o(Oi.l,La.l,t);return this.setHSL(i,s,r),this}setFromVector3(e){return this.r=e.x,this.g=e.y,this.b=e.z,this}applyMatrix3(e){const t=this.r,i=this.g,s=this.b,r=e.elements;return this.r=r[0]*t+r[3]*i+r[6]*s,this.g=r[1]*t+r[4]*i+r[7]*s,this.b=r[2]*t+r[5]*i+r[8]*s,this}equals(e){return e.r===this.r&&e.g===this.g&&e.b===this.b}fromArray(e,t=0){return this.r=e[t],this.g=e[t+1],this.b=e[t+2],this}toArray(e=[],t=0){return e[t]=this.r,e[t+1]=this.g,e[t+2]=this.b,e}fromBufferAttribute(e,t){return this.r=e.getX(t),this.g=e.getY(t),this.b=e.getZ(t),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const Qt=new Te;Te.NAMES=a_;let vE=0;class on extends Ci{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:vE++}),this.uuid=Rn(),this.name="",this.type="Material",this.blending=Ns,this.side=Mi,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=Bl,this.blendDst=zl,this.blendEquation=Wi,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new Te(0,0,0),this.blendAlpha=0,this.depthFunc=Po,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=Uu,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=xs,this.stencilZFail=xs,this.stencilZPass=xs,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(e){this._alphaTest>0!=e>0&&this.version++,this._alphaTest=e}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(e){if(e!==void 0)for(const t in e){const i=e[t];if(i===void 0){console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);continue}const s=this[t];if(s===void 0){console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);continue}s&&s.isColor?s.set(i):s&&s.isVector3&&i&&i.isVector3?s.copy(i):this[t]=i}}toJSON(e){const t=e===void 0||typeof e=="string";t&&(e={textures:{},images:{}});const i={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),this.roughness!==void 0&&(i.roughness=this.roughness),this.metalness!==void 0&&(i.metalness=this.metalness),this.sheen!==void 0&&(i.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(i.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(i.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(i.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(i.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(i.shininess=this.shininess),this.clearcoat!==void 0&&(i.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(i.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(i.clearcoatMap=this.clearcoatMap.toJSON(e).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(i.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(e).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(i.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(e).uuid,i.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.iridescence!==void 0&&(i.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(i.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(i.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(i.iridescenceMap=this.iridescenceMap.toJSON(e).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(i.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(e).uuid),this.anisotropy!==void 0&&(i.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(i.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(i.anisotropyMap=this.anisotropyMap.toJSON(e).uuid),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(e).uuid),this.matcap&&this.matcap.isTexture&&(i.matcap=this.matcap.toJSON(e).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(e).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(e).uuid,i.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(e).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(e).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(e).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(e).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(e).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(e).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(e).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(e).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(i.specularIntensityMap=this.specularIntensityMap.toJSON(e).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(i.specularColorMap=this.specularColorMap.toJSON(e).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(e).uuid,this.combine!==void 0&&(i.combine=this.combine)),this.envMapIntensity!==void 0&&(i.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(i.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(i.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(e).uuid),this.transmission!==void 0&&(i.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(i.transmissionMap=this.transmissionMap.toJSON(e).uuid),this.thickness!==void 0&&(i.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(i.thicknessMap=this.thicknessMap.toJSON(e).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(i.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(i.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(i.size=this.size),this.shadowSide!==null&&(i.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(i.sizeAttenuation=this.sizeAttenuation),this.blending!==Ns&&(i.blending=this.blending),this.side!==Mi&&(i.side=this.side),this.vertexColors===!0&&(i.vertexColors=!0),this.opacity<1&&(i.opacity=this.opacity),this.transparent===!0&&(i.transparent=!0),this.blendSrc!==Bl&&(i.blendSrc=this.blendSrc),this.blendDst!==zl&&(i.blendDst=this.blendDst),this.blendEquation!==Wi&&(i.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(i.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(i.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(i.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(i.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(i.blendAlpha=this.blendAlpha),this.depthFunc!==Po&&(i.depthFunc=this.depthFunc),this.depthTest===!1&&(i.depthTest=this.depthTest),this.depthWrite===!1&&(i.depthWrite=this.depthWrite),this.colorWrite===!1&&(i.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(i.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==Uu&&(i.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(i.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(i.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==xs&&(i.stencilFail=this.stencilFail),this.stencilZFail!==xs&&(i.stencilZFail=this.stencilZFail),this.stencilZPass!==xs&&(i.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(i.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(i.rotation=this.rotation),this.polygonOffset===!0&&(i.polygonOffset=!0),this.polygonOffsetFactor!==0&&(i.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(i.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(i.linewidth=this.linewidth),this.dashSize!==void 0&&(i.dashSize=this.dashSize),this.gapSize!==void 0&&(i.gapSize=this.gapSize),this.scale!==void 0&&(i.scale=this.scale),this.dithering===!0&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),this.alphaHash===!0&&(i.alphaHash=!0),this.alphaToCoverage===!0&&(i.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(i.premultipliedAlpha=!0),this.forceSinglePass===!0&&(i.forceSinglePass=!0),this.wireframe===!0&&(i.wireframe=!0),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(i.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(i.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(i.flatShading=!0),this.visible===!1&&(i.visible=!1),this.toneMapped===!1&&(i.toneMapped=!1),this.fog===!1&&(i.fog=!1),Object.keys(this.userData).length>0&&(i.userData=this.userData);function s(r){const o=[];for(const a in r){const l=r[a];delete l.metadata,o.push(l)}return o}if(t){const r=s(e.textures),o=s(e.images);r.length>0&&(i.textures=r),o.length>0&&(i.images=o)}return i}clone(){return new this.constructor().copy(this)}copy(e){this.name=e.name,this.blending=e.blending,this.side=e.side,this.vertexColors=e.vertexColors,this.opacity=e.opacity,this.transparent=e.transparent,this.blendSrc=e.blendSrc,this.blendDst=e.blendDst,this.blendEquation=e.blendEquation,this.blendSrcAlpha=e.blendSrcAlpha,this.blendDstAlpha=e.blendDstAlpha,this.blendEquationAlpha=e.blendEquationAlpha,this.blendColor.copy(e.blendColor),this.blendAlpha=e.blendAlpha,this.depthFunc=e.depthFunc,this.depthTest=e.depthTest,this.depthWrite=e.depthWrite,this.stencilWriteMask=e.stencilWriteMask,this.stencilFunc=e.stencilFunc,this.stencilRef=e.stencilRef,this.stencilFuncMask=e.stencilFuncMask,this.stencilFail=e.stencilFail,this.stencilZFail=e.stencilZFail,this.stencilZPass=e.stencilZPass,this.stencilWrite=e.stencilWrite;const t=e.clippingPlanes;let i=null;if(t!==null){const s=t.length;i=new Array(s);for(let r=0;r!==s;++r)i[r]=t[r].clone()}return this.clippingPlanes=i,this.clipIntersection=e.clipIntersection,this.clipShadows=e.clipShadows,this.shadowSide=e.shadowSide,this.colorWrite=e.colorWrite,this.precision=e.precision,this.polygonOffset=e.polygonOffset,this.polygonOffsetFactor=e.polygonOffsetFactor,this.polygonOffsetUnits=e.polygonOffsetUnits,this.dithering=e.dithering,this.alphaTest=e.alphaTest,this.alphaHash=e.alphaHash,this.alphaToCoverage=e.alphaToCoverage,this.premultipliedAlpha=e.premultipliedAlpha,this.forceSinglePass=e.forceSinglePass,this.visible=e.visible,this.toneMapped=e.toneMapped,this.userData=JSON.parse(JSON.stringify(e.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(e){e===!0&&this.version++}}class is extends on{constructor(e){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new Te(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ia,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}const gi=xE();function xE(){const n=new ArrayBuffer(4),e=new Float32Array(n),t=new Uint32Array(n),i=new Uint32Array(512),s=new Uint32Array(512);for(let l=0;l<256;++l){const c=l-127;c<-27?(i[l]=0,i[l|256]=32768,s[l]=24,s[l|256]=24):c<-14?(i[l]=1024>>-c-14,i[l|256]=1024>>-c-14|32768,s[l]=-c-1,s[l|256]=-c-1):c<=15?(i[l]=c+15<<10,i[l|256]=c+15<<10|32768,s[l]=13,s[l|256]=13):c<128?(i[l]=31744,i[l|256]=64512,s[l]=24,s[l|256]=24):(i[l]=31744,i[l|256]=64512,s[l]=13,s[l|256]=13)}const r=new Uint32Array(2048),o=new Uint32Array(64),a=new Uint32Array(64);for(let l=1;l<1024;++l){let c=l<<13,h=0;for(;!(c&8388608);)c<<=1,h-=8388608;c&=-8388609,h+=947912704,r[l]=c|h}for(let l=1024;l<2048;++l)r[l]=939524096+(l-1024<<13);for(let l=1;l<31;++l)o[l]=l<<23;o[31]=1199570944,o[32]=2147483648;for(let l=33;l<63;++l)o[l]=2147483648+(l-32<<23);o[63]=3347054592;for(let l=1;l<64;++l)l!==32&&(a[l]=1024);return{floatView:e,uint32View:t,baseTable:i,shiftTable:s,mantissaTable:r,exponentTable:o,offsetTable:a}}function mn(n){Math.abs(n)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),n=Pt(n,-65504,65504),gi.floatView[0]=n;const e=gi.uint32View[0],t=e>>23&511;return gi.baseTable[t]+((e&8388607)>>gi.shiftTable[t])}function ho(n){const e=n>>10;return gi.uint32View[0]=gi.mantissaTable[gi.offsetTable[e]+(n&1023)]+gi.exponentTable[e],gi.floatView[0]}const bE={toHalfFloat:mn,fromHalfFloat:ho},Ot=new I,Da=new ue;class ct{constructor(e,t,i=!1){if(Array.isArray(e))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=e,this.itemSize=t,this.count=e!==void 0?e.length/t:0,this.normalized=i,this.usage=Vo,this._updateRange={offset:0,count:-1},this.updateRanges=[],this.gpuType=Vn,this.version=0}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}get updateRange(){return console.warn("THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead."),this._updateRange}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.name=e.name,this.array=new e.array.constructor(e.array),this.itemSize=e.itemSize,this.count=e.count,this.normalized=e.normalized,this.usage=e.usage,this.gpuType=e.gpuType,this}copyAt(e,t,i){e*=this.itemSize,i*=t.itemSize;for(let s=0,r=this.itemSize;s<r;s++)this.array[e+s]=t.array[i+s];return this}copyArray(e){return this.array.set(e),this}applyMatrix3(e){if(this.itemSize===2)for(let t=0,i=this.count;t<i;t++)Da.fromBufferAttribute(this,t),Da.applyMatrix3(e),this.setXY(t,Da.x,Da.y);else if(this.itemSize===3)for(let t=0,i=this.count;t<i;t++)Ot.fromBufferAttribute(this,t),Ot.applyMatrix3(e),this.setXYZ(t,Ot.x,Ot.y,Ot.z);return this}applyMatrix4(e){for(let t=0,i=this.count;t<i;t++)Ot.fromBufferAttribute(this,t),Ot.applyMatrix4(e),this.setXYZ(t,Ot.x,Ot.y,Ot.z);return this}applyNormalMatrix(e){for(let t=0,i=this.count;t<i;t++)Ot.fromBufferAttribute(this,t),Ot.applyNormalMatrix(e),this.setXYZ(t,Ot.x,Ot.y,Ot.z);return this}transformDirection(e){for(let t=0,i=this.count;t<i;t++)Ot.fromBufferAttribute(this,t),Ot.transformDirection(e),this.setXYZ(t,Ot.x,Ot.y,Ot.z);return this}set(e,t=0){return this.array.set(e,t),this}getComponent(e,t){let i=this.array[e*this.itemSize+t];return this.normalized&&(i=xn(i,this.array)),i}setComponent(e,t,i){return this.normalized&&(i=Ye(i,this.array)),this.array[e*this.itemSize+t]=i,this}getX(e){let t=this.array[e*this.itemSize];return this.normalized&&(t=xn(t,this.array)),t}setX(e,t){return this.normalized&&(t=Ye(t,this.array)),this.array[e*this.itemSize]=t,this}getY(e){let t=this.array[e*this.itemSize+1];return this.normalized&&(t=xn(t,this.array)),t}setY(e,t){return this.normalized&&(t=Ye(t,this.array)),this.array[e*this.itemSize+1]=t,this}getZ(e){let t=this.array[e*this.itemSize+2];return this.normalized&&(t=xn(t,this.array)),t}setZ(e,t){return this.normalized&&(t=Ye(t,this.array)),this.array[e*this.itemSize+2]=t,this}getW(e){let t=this.array[e*this.itemSize+3];return this.normalized&&(t=xn(t,this.array)),t}setW(e,t){return this.normalized&&(t=Ye(t,this.array)),this.array[e*this.itemSize+3]=t,this}setXY(e,t,i){return e*=this.itemSize,this.normalized&&(t=Ye(t,this.array),i=Ye(i,this.array)),this.array[e+0]=t,this.array[e+1]=i,this}setXYZ(e,t,i,s){return e*=this.itemSize,this.normalized&&(t=Ye(t,this.array),i=Ye(i,this.array),s=Ye(s,this.array)),this.array[e+0]=t,this.array[e+1]=i,this.array[e+2]=s,this}setXYZW(e,t,i,s,r){return e*=this.itemSize,this.normalized&&(t=Ye(t,this.array),i=Ye(i,this.array),s=Ye(s,this.array),r=Ye(r,this.array)),this.array[e+0]=t,this.array[e+1]=i,this.array[e+2]=s,this.array[e+3]=r,this}onUpload(e){return this.onUploadCallback=e,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const e={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(e.name=this.name),this.usage!==Vo&&(e.usage=this.usage),e}}class wE extends ct{constructor(e,t,i){super(new Int8Array(e),t,i)}}class ME extends ct{constructor(e,t,i){super(new Uint8Array(e),t,i)}}class SE extends ct{constructor(e,t,i){super(new Uint8ClampedArray(e),t,i)}}class EE extends ct{constructor(e,t,i){super(new Int16Array(e),t,i)}}class Nd extends ct{constructor(e,t,i){super(new Uint16Array(e),t,i)}}class TE extends ct{constructor(e,t,i){super(new Int32Array(e),t,i)}}class Od extends ct{constructor(e,t,i){super(new Uint32Array(e),t,i)}}class AE extends ct{constructor(e,t,i){super(new Uint16Array(e),t,i),this.isFloat16BufferAttribute=!0}getX(e){let t=ho(this.array[e*this.itemSize]);return this.normalized&&(t=xn(t,this.array)),t}setX(e,t){return this.normalized&&(t=Ye(t,this.array)),this.array[e*this.itemSize]=mn(t),this}getY(e){let t=ho(this.array[e*this.itemSize+1]);return this.normalized&&(t=xn(t,this.array)),t}setY(e,t){return this.normalized&&(t=Ye(t,this.array)),this.array[e*this.itemSize+1]=mn(t),this}getZ(e){let t=ho(this.array[e*this.itemSize+2]);return this.normalized&&(t=xn(t,this.array)),t}setZ(e,t){return this.normalized&&(t=Ye(t,this.array)),this.array[e*this.itemSize+2]=mn(t),this}getW(e){let t=ho(this.array[e*this.itemSize+3]);return this.normalized&&(t=xn(t,this.array)),t}setW(e,t){return this.normalized&&(t=Ye(t,this.array)),this.array[e*this.itemSize+3]=mn(t),this}setXY(e,t,i){return e*=this.itemSize,this.normalized&&(t=Ye(t,this.array),i=Ye(i,this.array)),this.array[e+0]=mn(t),this.array[e+1]=mn(i),this}setXYZ(e,t,i,s){return e*=this.itemSize,this.normalized&&(t=Ye(t,this.array),i=Ye(i,this.array),s=Ye(s,this.array)),this.array[e+0]=mn(t),this.array[e+1]=mn(i),this.array[e+2]=mn(s),this}setXYZW(e,t,i,s,r){return e*=this.itemSize,this.normalized&&(t=Ye(t,this.array),i=Ye(i,this.array),s=Ye(s,this.array),r=Ye(r,this.array)),this.array[e+0]=mn(t),this.array[e+1]=mn(i),this.array[e+2]=mn(s),this.array[e+3]=mn(r),this}}class Pe extends ct{constructor(e,t,i){super(new Float32Array(e),t,i)}}class CE extends ct{constructor(e,t,i){super(new Float64Array(e),t,i)}}let RE=0;const Ln=new Oe,ph=new lt,ir=new I,Tn=new fn,eo=new fn,Xt=new I;class Je extends Ci{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:RE++}),this.uuid=Rn(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(e){return Array.isArray(e)?this.index=new(s_(e)?Od:Nd)(e,1):this.index=e,this}getAttribute(e){return this.attributes[e]}setAttribute(e,t){return this.attributes[e]=t,this}deleteAttribute(e){return delete this.attributes[e],this}hasAttribute(e){return this.attributes[e]!==void 0}addGroup(e,t,i=0){this.groups.push({start:e,count:t,materialIndex:i})}clearGroups(){this.groups=[]}setDrawRange(e,t){this.drawRange.start=e,this.drawRange.count=t}applyMatrix4(e){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(e),t.needsUpdate=!0);const i=this.attributes.normal;if(i!==void 0){const r=new Ke().getNormalMatrix(e);i.applyNormalMatrix(r),i.needsUpdate=!0}const s=this.attributes.tangent;return s!==void 0&&(s.transformDirection(e),s.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(e){return Ln.makeRotationFromQuaternion(e),this.applyMatrix4(Ln),this}rotateX(e){return Ln.makeRotationX(e),this.applyMatrix4(Ln),this}rotateY(e){return Ln.makeRotationY(e),this.applyMatrix4(Ln),this}rotateZ(e){return Ln.makeRotationZ(e),this.applyMatrix4(Ln),this}translate(e,t,i){return Ln.makeTranslation(e,t,i),this.applyMatrix4(Ln),this}scale(e,t,i){return Ln.makeScale(e,t,i),this.applyMatrix4(Ln),this}lookAt(e){return ph.lookAt(e),ph.updateMatrix(),this.applyMatrix4(ph.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(ir).negate(),this.translate(ir.x,ir.y,ir.z),this}setFromPoints(e){const t=[];for(let i=0,s=e.length;i<s;i++){const r=e[i];t.push(r.x,r.y,r.z||0)}return this.setAttribute("position",new Pe(t,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new fn);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new I(-1/0,-1/0,-1/0),new I(1/0,1/0,1/0));return}if(e!==void 0){if(this.boundingBox.setFromBufferAttribute(e),t)for(let i=0,s=t.length;i<s;i++){const r=t[i];Tn.setFromBufferAttribute(r),this.morphTargetsRelative?(Xt.addVectors(this.boundingBox.min,Tn.min),this.boundingBox.expandByPoint(Xt),Xt.addVectors(this.boundingBox.max,Tn.max),this.boundingBox.expandByPoint(Xt)):(this.boundingBox.expandByPoint(Tn.min),this.boundingBox.expandByPoint(Tn.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new rn);const e=this.attributes.position,t=this.morphAttributes.position;if(e&&e.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new I,1/0);return}if(e){const i=this.boundingSphere.center;if(Tn.setFromBufferAttribute(e),t)for(let r=0,o=t.length;r<o;r++){const a=t[r];eo.setFromBufferAttribute(a),this.morphTargetsRelative?(Xt.addVectors(Tn.min,eo.min),Tn.expandByPoint(Xt),Xt.addVectors(Tn.max,eo.max),Tn.expandByPoint(Xt)):(Tn.expandByPoint(eo.min),Tn.expandByPoint(eo.max))}Tn.getCenter(i);let s=0;for(let r=0,o=e.count;r<o;r++)Xt.fromBufferAttribute(e,r),s=Math.max(s,i.distanceToSquared(Xt));if(t)for(let r=0,o=t.length;r<o;r++){const a=t[r],l=this.morphTargetsRelative;for(let c=0,h=a.count;c<h;c++)Xt.fromBufferAttribute(a,c),l&&(ir.fromBufferAttribute(e,c),Xt.add(ir)),s=Math.max(s,i.distanceToSquared(Xt))}this.boundingSphere.radius=Math.sqrt(s),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const e=this.index,t=this.attributes;if(e===null||t.position===void 0||t.normal===void 0||t.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const i=e.array,s=t.position.array,r=t.normal.array,o=t.uv.array,a=s.length/3;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new ct(new Float32Array(4*a),4));const l=this.getAttribute("tangent").array,c=[],h=[];for(let C=0;C<a;C++)c[C]=new I,h[C]=new I;const u=new I,d=new I,f=new I,m=new ue,y=new ue,g=new ue,p=new I,v=new I;function _(C,G,J){u.fromArray(s,C*3),d.fromArray(s,G*3),f.fromArray(s,J*3),m.fromArray(o,C*2),y.fromArray(o,G*2),g.fromArray(o,J*2),d.sub(u),f.sub(u),y.sub(m),g.sub(m);const de=1/(y.x*g.y-g.x*y.y);isFinite(de)&&(p.copy(d).multiplyScalar(g.y).addScaledVector(f,-y.y).multiplyScalar(de),v.copy(f).multiplyScalar(y.x).addScaledVector(d,-g.x).multiplyScalar(de),c[C].add(p),c[G].add(p),c[J].add(p),h[C].add(v),h[G].add(v),h[J].add(v))}let x=this.groups;x.length===0&&(x=[{start:0,count:i.length}]);for(let C=0,G=x.length;C<G;++C){const J=x[C],de=J.start,F=J.count;for(let q=de,X=de+F;q<X;q+=3)_(i[q+0],i[q+1],i[q+2])}const P=new I,M=new I,A=new I,O=new I;function S(C){A.fromArray(r,C*3),O.copy(A);const G=c[C];P.copy(G),P.sub(A.multiplyScalar(A.dot(G))).normalize(),M.crossVectors(O,G);const de=M.dot(h[C])<0?-1:1;l[C*4]=P.x,l[C*4+1]=P.y,l[C*4+2]=P.z,l[C*4+3]=de}for(let C=0,G=x.length;C<G;++C){const J=x[C],de=J.start,F=J.count;for(let q=de,X=de+F;q<X;q+=3)S(i[q+0]),S(i[q+1]),S(i[q+2])}}computeVertexNormals(){const e=this.index,t=this.getAttribute("position");if(t!==void 0){let i=this.getAttribute("normal");if(i===void 0)i=new ct(new Float32Array(t.count*3),3),this.setAttribute("normal",i);else for(let d=0,f=i.count;d<f;d++)i.setXYZ(d,0,0,0);const s=new I,r=new I,o=new I,a=new I,l=new I,c=new I,h=new I,u=new I;if(e)for(let d=0,f=e.count;d<f;d+=3){const m=e.getX(d+0),y=e.getX(d+1),g=e.getX(d+2);s.fromBufferAttribute(t,m),r.fromBufferAttribute(t,y),o.fromBufferAttribute(t,g),h.subVectors(o,r),u.subVectors(s,r),h.cross(u),a.fromBufferAttribute(i,m),l.fromBufferAttribute(i,y),c.fromBufferAttribute(i,g),a.add(h),l.add(h),c.add(h),i.setXYZ(m,a.x,a.y,a.z),i.setXYZ(y,l.x,l.y,l.z),i.setXYZ(g,c.x,c.y,c.z)}else for(let d=0,f=t.count;d<f;d+=3)s.fromBufferAttribute(t,d+0),r.fromBufferAttribute(t,d+1),o.fromBufferAttribute(t,d+2),h.subVectors(o,r),u.subVectors(s,r),h.cross(u),i.setXYZ(d+0,h.x,h.y,h.z),i.setXYZ(d+1,h.x,h.y,h.z),i.setXYZ(d+2,h.x,h.y,h.z);this.normalizeNormals(),i.needsUpdate=!0}}normalizeNormals(){const e=this.attributes.normal;for(let t=0,i=e.count;t<i;t++)Xt.fromBufferAttribute(e,t),Xt.normalize(),e.setXYZ(t,Xt.x,Xt.y,Xt.z)}toNonIndexed(){function e(a,l){const c=a.array,h=a.itemSize,u=a.normalized,d=new c.constructor(l.length*h);let f=0,m=0;for(let y=0,g=l.length;y<g;y++){a.isInterleavedBufferAttribute?f=l[y]*a.data.stride+a.offset:f=l[y]*h;for(let p=0;p<h;p++)d[m++]=c[f++]}return new ct(d,h,u)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const t=new Je,i=this.index.array,s=this.attributes;for(const a in s){const l=s[a],c=e(l,i);t.setAttribute(a,c)}const r=this.morphAttributes;for(const a in r){const l=[],c=r[a];for(let h=0,u=c.length;h<u;h++){const d=c[h],f=e(d,i);l.push(f)}t.morphAttributes[a]=l}t.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,l=o.length;a<l;a++){const c=o[a];t.addGroup(c.start,c.count,c.materialIndex)}return t}toJSON(){const e={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),Object.keys(this.userData).length>0&&(e.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const c in l)l[c]!==void 0&&(e[c]=l[c]);return e}e.data={attributes:{}};const t=this.index;t!==null&&(e.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const i=this.attributes;for(const l in i){const c=i[l];e.data.attributes[l]=c.toJSON(e.data)}const s={};let r=!1;for(const l in this.morphAttributes){const c=this.morphAttributes[l],h=[];for(let u=0,d=c.length;u<d;u++){const f=c[u];h.push(f.toJSON(e.data))}h.length>0&&(s[l]=h,r=!0)}r&&(e.data.morphAttributes=s,e.data.morphTargetsRelative=this.morphTargetsRelative);const o=this.groups;o.length>0&&(e.data.groups=JSON.parse(JSON.stringify(o)));const a=this.boundingSphere;return a!==null&&(e.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),e}clone(){return new this.constructor().copy(this)}copy(e){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=e.name;const i=e.index;i!==null&&this.setIndex(i.clone(t));const s=e.attributes;for(const c in s){const h=s[c];this.setAttribute(c,h.clone(t))}const r=e.morphAttributes;for(const c in r){const h=[],u=r[c];for(let d=0,f=u.length;d<f;d++)h.push(u[d].clone(t));this.morphAttributes[c]=h}this.morphTargetsRelative=e.morphTargetsRelative;const o=e.groups;for(let c=0,h=o.length;c<h;c++){const u=o[c];this.addGroup(u.start,u.count,u.materialIndex)}const a=e.boundingBox;a!==null&&(this.boundingBox=a.clone());const l=e.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=e.drawRange.start,this.drawRange.count=e.drawRange.count,this.userData=e.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const Cp=new Oe,ds=new Wr,Ua=new rn,Rp=new I,sr=new I,rr=new I,or=new I,mh=new I,Na=new I,Oa=new ue,Fa=new ue,ka=new ue,Pp=new I,Ip=new I,Lp=new I,Ba=new I,za=new I;class zt extends lt{constructor(e=new Je,t=new is){super(),this.isMesh=!0,this.type="Mesh",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),e.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=e.morphTargetInfluences.slice()),e.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},e.morphTargetDictionary)),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,i=Object.keys(t);if(i.length>0){const s=t[i[0]];if(s!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,o=s.length;r<o;r++){const a=s[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=r}}}}getVertexPosition(e,t){const i=this.geometry,s=i.attributes.position,r=i.morphAttributes.position,o=i.morphTargetsRelative;t.fromBufferAttribute(s,e);const a=this.morphTargetInfluences;if(r&&a){Na.set(0,0,0);for(let l=0,c=r.length;l<c;l++){const h=a[l],u=r[l];h!==0&&(mh.fromBufferAttribute(u,e),o?Na.addScaledVector(mh,h):Na.addScaledVector(mh.sub(t),h))}t.add(Na)}return t}raycast(e,t){const i=this.geometry,s=this.material,r=this.matrixWorld;s!==void 0&&(i.boundingSphere===null&&i.computeBoundingSphere(),Ua.copy(i.boundingSphere),Ua.applyMatrix4(r),ds.copy(e.ray).recast(e.near),!(Ua.containsPoint(ds.origin)===!1&&(ds.intersectSphere(Ua,Rp)===null||ds.origin.distanceToSquared(Rp)>(e.far-e.near)**2))&&(Cp.copy(r).invert(),ds.copy(e.ray).applyMatrix4(Cp),!(i.boundingBox!==null&&ds.intersectsBox(i.boundingBox)===!1)&&this._computeIntersections(e,t,ds)))}_computeIntersections(e,t,i){let s;const r=this.geometry,o=this.material,a=r.index,l=r.attributes.position,c=r.attributes.uv,h=r.attributes.uv1,u=r.attributes.normal,d=r.groups,f=r.drawRange;if(a!==null)if(Array.isArray(o))for(let m=0,y=d.length;m<y;m++){const g=d[m],p=o[g.materialIndex],v=Math.max(g.start,f.start),_=Math.min(a.count,Math.min(g.start+g.count,f.start+f.count));for(let x=v,P=_;x<P;x+=3){const M=a.getX(x),A=a.getX(x+1),O=a.getX(x+2);s=Va(this,p,e,i,c,h,u,M,A,O),s&&(s.faceIndex=Math.floor(x/3),s.face.materialIndex=g.materialIndex,t.push(s))}}else{const m=Math.max(0,f.start),y=Math.min(a.count,f.start+f.count);for(let g=m,p=y;g<p;g+=3){const v=a.getX(g),_=a.getX(g+1),x=a.getX(g+2);s=Va(this,o,e,i,c,h,u,v,_,x),s&&(s.faceIndex=Math.floor(g/3),t.push(s))}}else if(l!==void 0)if(Array.isArray(o))for(let m=0,y=d.length;m<y;m++){const g=d[m],p=o[g.materialIndex],v=Math.max(g.start,f.start),_=Math.min(l.count,Math.min(g.start+g.count,f.start+f.count));for(let x=v,P=_;x<P;x+=3){const M=x,A=x+1,O=x+2;s=Va(this,p,e,i,c,h,u,M,A,O),s&&(s.faceIndex=Math.floor(x/3),s.face.materialIndex=g.materialIndex,t.push(s))}}else{const m=Math.max(0,f.start),y=Math.min(l.count,f.start+f.count);for(let g=m,p=y;g<p;g+=3){const v=g,_=g+1,x=g+2;s=Va(this,o,e,i,c,h,u,v,_,x),s&&(s.faceIndex=Math.floor(g/3),t.push(s))}}}}function PE(n,e,t,i,s,r,o,a){let l;if(e.side===dn?l=i.intersectTriangle(o,r,s,!0,a):l=i.intersectTriangle(s,r,o,e.side===Mi,a),l===null)return null;za.copy(a),za.applyMatrix4(n.matrixWorld);const c=t.ray.origin.distanceTo(za);return c<t.near||c>t.far?null:{distance:c,point:za.clone(),object:n}}function Va(n,e,t,i,s,r,o,a,l,c){n.getVertexPosition(a,sr),n.getVertexPosition(l,rr),n.getVertexPosition(c,or);const h=PE(n,e,t,i,sr,rr,or,Ba);if(h){s&&(Oa.fromBufferAttribute(s,a),Fa.fromBufferAttribute(s,l),ka.fromBufferAttribute(s,c),h.uv=_n.getInterpolation(Ba,sr,rr,or,Oa,Fa,ka,new ue)),r&&(Oa.fromBufferAttribute(r,a),Fa.fromBufferAttribute(r,l),ka.fromBufferAttribute(r,c),h.uv1=_n.getInterpolation(Ba,sr,rr,or,Oa,Fa,ka,new ue),h.uv2=h.uv1),o&&(Pp.fromBufferAttribute(o,a),Ip.fromBufferAttribute(o,l),Lp.fromBufferAttribute(o,c),h.normal=_n.getInterpolation(Ba,sr,rr,or,Pp,Ip,Lp,new I),h.normal.dot(i.direction)>0&&h.normal.multiplyScalar(-1));const u={a,b:l,c,normal:new I,materialIndex:0};_n.getNormal(sr,rr,or,u.normal),h.face=u}return h}class Xs extends Je{constructor(e=1,t=1,i=1,s=1,r=1,o=1){super(),this.type="BoxGeometry",this.parameters={width:e,height:t,depth:i,widthSegments:s,heightSegments:r,depthSegments:o};const a=this;s=Math.floor(s),r=Math.floor(r),o=Math.floor(o);const l=[],c=[],h=[],u=[];let d=0,f=0;m("z","y","x",-1,-1,i,t,e,o,r,0),m("z","y","x",1,-1,i,t,-e,o,r,1),m("x","z","y",1,1,e,i,t,s,o,2),m("x","z","y",1,-1,e,i,-t,s,o,3),m("x","y","z",1,-1,e,t,i,s,r,4),m("x","y","z",-1,-1,e,t,-i,s,r,5),this.setIndex(l),this.setAttribute("position",new Pe(c,3)),this.setAttribute("normal",new Pe(h,3)),this.setAttribute("uv",new Pe(u,2));function m(y,g,p,v,_,x,P,M,A,O,S){const C=x/A,G=P/O,J=x/2,de=P/2,F=M/2,q=A+1,X=O+1;let te=0,Q=0;const re=new I;for(let he=0;he<X;he++){const pe=he*G-de;for(let ge=0;ge<q;ge++){const ne=ge*C-J;re[y]=ne*v,re[g]=pe*_,re[p]=F,c.push(re.x,re.y,re.z),re[y]=0,re[g]=0,re[p]=M>0?1:-1,h.push(re.x,re.y,re.z),u.push(ge/A),u.push(1-he/O),te+=1}}for(let he=0;he<O;he++)for(let pe=0;pe<A;pe++){const ge=d+pe+q*he,ne=d+pe+q*(he+1),fe=d+(pe+1)+q*(he+1),be=d+(pe+1)+q*he;l.push(ge,ne,be),l.push(ne,fe,be),Q+=6}a.addGroup(f,Q,S),f+=Q,d+=te}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Xs(e.width,e.height,e.depth,e.widthSegments,e.heightSegments,e.depthSegments)}}function Fr(n){const e={};for(const t in n){e[t]={};for(const i in n[t]){const s=n[t][i];s&&(s.isColor||s.isMatrix3||s.isMatrix4||s.isVector2||s.isVector3||s.isVector4||s.isTexture||s.isQuaternion)?s.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[t][i]=null):e[t][i]=s.clone():Array.isArray(s)?e[t][i]=s.slice():e[t][i]=s}}return e}function un(n){const e={};for(let t=0;t<n.length;t++){const i=Fr(n[t]);for(const s in i)e[s]=i[s]}return e}function IE(n){const e=[];for(let t=0;t<n.length;t++)e.push(n[t].clone());return e}function l_(n){return n.getRenderTarget()===null?n.outputColorSpace:ut.workingColorSpace}const c_={clone:Fr,merge:un};var LE=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,DE=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class oi extends on{constructor(e){super(),this.isShaderMaterial=!0,this.type="ShaderMaterial",this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader=LE,this.fragmentShader=DE,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1,clipCullDistance:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,e!==void 0&&this.setValues(e)}copy(e){return super.copy(e),this.fragmentShader=e.fragmentShader,this.vertexShader=e.vertexShader,this.uniforms=Fr(e.uniforms),this.uniformsGroups=IE(e.uniformsGroups),this.defines=Object.assign({},e.defines),this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.fog=e.fog,this.lights=e.lights,this.clipping=e.clipping,this.extensions=Object.assign({},e.extensions),this.glslVersion=e.glslVersion,this}toJSON(e){const t=super.toJSON(e);t.glslVersion=this.glslVersion,t.uniforms={};for(const s in this.uniforms){const o=this.uniforms[s].value;o&&o.isTexture?t.uniforms[s]={type:"t",value:o.toJSON(e).uuid}:o&&o.isColor?t.uniforms[s]={type:"c",value:o.getHex()}:o&&o.isVector2?t.uniforms[s]={type:"v2",value:o.toArray()}:o&&o.isVector3?t.uniforms[s]={type:"v3",value:o.toArray()}:o&&o.isVector4?t.uniforms[s]={type:"v4",value:o.toArray()}:o&&o.isMatrix3?t.uniforms[s]={type:"m3",value:o.toArray()}:o&&o.isMatrix4?t.uniforms[s]={type:"m4",value:o.toArray()}:t.uniforms[s]={value:o}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader,t.lights=this.lights,t.clipping=this.clipping;const i={};for(const s in this.extensions)this.extensions[s]===!0&&(i[s]=!0);return Object.keys(i).length>0&&(t.extensions=i),t}}class oa extends lt{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Oe,this.projectionMatrix=new Oe,this.projectionMatrixInverse=new Oe,this.coordinateSystem=Hn}copy(e,t){return super.copy(e,t),this.matrixWorldInverse.copy(e.matrixWorldInverse),this.projectionMatrix.copy(e.projectionMatrix),this.projectionMatrixInverse.copy(e.projectionMatrixInverse),this.coordinateSystem=e.coordinateSystem,this}getWorldDirection(e){return super.getWorldDirection(e).negate()}updateMatrixWorld(e){super.updateMatrixWorld(e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(e,t){super.updateWorldMatrix(e,t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}class kt extends oa{constructor(e=50,t=1,i=.1,s=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=e,this.zoom=1,this.near=i,this.far=s,this.focus=10,this.aspect=t,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.fov=e.fov,this.zoom=e.zoom,this.near=e.near,this.far=e.far,this.focus=e.focus,this.aspect=e.aspect,this.view=e.view===null?null:Object.assign({},e.view),this.filmGauge=e.filmGauge,this.filmOffset=e.filmOffset,this}setFocalLength(e){const t=.5*this.getFilmHeight()/e;this.fov=Or*2*Math.atan(t),this.updateProjectionMatrix()}getFocalLength(){const e=Math.tan(Os*.5*this.fov);return .5*this.getFilmHeight()/e}getEffectiveFOV(){return Or*2*Math.atan(Math.tan(Os*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(e,t,i,s,r,o){this.aspect=e/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=i,this.view.offsetY=s,this.view.width=r,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=this.near;let t=e*Math.tan(Os*.5*this.fov)/this.zoom,i=2*t,s=this.aspect*i,r=-.5*s;const o=this.view;if(this.view!==null&&this.view.enabled){const l=o.fullWidth,c=o.fullHeight;r+=o.offsetX*s/l,t-=o.offsetY*i/c,s*=o.width/l,i*=o.height/c}const a=this.filmOffset;a!==0&&(r+=e*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+s,t,t-i,e,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}}const ar=-90,lr=1;class h_ extends lt{constructor(e,t,i){super(),this.type="CubeCamera",this.renderTarget=i,this.coordinateSystem=null,this.activeMipmapLevel=0;const s=new kt(ar,lr,e,t);s.layers=this.layers,this.add(s);const r=new kt(ar,lr,e,t);r.layers=this.layers,this.add(r);const o=new kt(ar,lr,e,t);o.layers=this.layers,this.add(o);const a=new kt(ar,lr,e,t);a.layers=this.layers,this.add(a);const l=new kt(ar,lr,e,t);l.layers=this.layers,this.add(l);const c=new kt(ar,lr,e,t);c.layers=this.layers,this.add(c)}updateCoordinateSystem(){const e=this.coordinateSystem,t=this.children.concat(),[i,s,r,o,a,l]=t;for(const c of t)this.remove(c);if(e===Hn)i.up.set(0,1,0),i.lookAt(1,0,0),s.up.set(0,1,0),s.lookAt(-1,0,0),r.up.set(0,0,-1),r.lookAt(0,1,0),o.up.set(0,0,1),o.lookAt(0,-1,0),a.up.set(0,1,0),a.lookAt(0,0,1),l.up.set(0,1,0),l.lookAt(0,0,-1);else if(e===Nr)i.up.set(0,-1,0),i.lookAt(-1,0,0),s.up.set(0,-1,0),s.lookAt(1,0,0),r.up.set(0,0,1),r.lookAt(0,1,0),o.up.set(0,0,-1),o.lookAt(0,-1,0),a.up.set(0,-1,0),a.lookAt(0,0,1),l.up.set(0,-1,0),l.lookAt(0,0,-1);else throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+e);for(const c of t)this.add(c),c.updateMatrixWorld()}update(e,t){this.parent===null&&this.updateMatrixWorld();const{renderTarget:i,activeMipmapLevel:s}=this;this.coordinateSystem!==e.coordinateSystem&&(this.coordinateSystem=e.coordinateSystem,this.updateCoordinateSystem());const[r,o,a,l,c,h]=this.children,u=e.getRenderTarget(),d=e.getActiveCubeFace(),f=e.getActiveMipmapLevel(),m=e.xr.enabled;e.xr.enabled=!1;const y=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,e.setRenderTarget(i,0,s),e.render(t,r),e.setRenderTarget(i,1,s),e.render(t,o),e.setRenderTarget(i,2,s),e.render(t,a),e.setRenderTarget(i,3,s),e.render(t,l),e.setRenderTarget(i,4,s),e.render(t,c),i.texture.generateMipmaps=y,e.setRenderTarget(i,5,s),e.render(t,h),e.setRenderTarget(u,d,f),e.xr.enabled=m,i.texture.needsPMREMUpdate=!0}}class aa extends Nt{constructor(e,t,i,s,r,o,a,l,c,h){e=e!==void 0?e:[],t=t!==void 0?t:Si,super(e,t,i,s,r,o,a,l,c,h),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(e){this.image=e}}class u_ extends $n{constructor(e=1,t={}){super(e,e,t),this.isWebGLCubeRenderTarget=!0;const i={width:e,height:e,depth:1},s=[i,i,i,i,i,i];t.encoding!==void 0&&(vo("THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace."),t.colorSpace=t.encoding===ji?Ft:Cn),this.texture=new aa(s,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=t.generateMipmaps!==void 0?t.generateMipmaps:!1,this.texture.minFilter=t.minFilter!==void 0?t.minFilter:Ut}fromEquirectangularTexture(e,t){this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const i={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},s=new Xs(5,5,5),r=new oi({name:"CubemapFromEquirect",uniforms:Fr(i.uniforms),vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,side:dn,blending:xi});r.uniforms.tEquirect.value=t;const o=new zt(s,r),a=t.minFilter;return t.minFilter===Ji&&(t.minFilter=Ut),new h_(1,10,this).update(e,o),t.minFilter=a,o.geometry.dispose(),o.material.dispose(),this}clear(e,t,i,s){const r=e.getRenderTarget();for(let o=0;o<6;o++)e.setRenderTarget(this,o),e.clear(t,i,s);e.setRenderTarget(r)}}const gh=new I,UE=new I,NE=new Ke;class Gi{constructor(e=new I(1,0,0),t=0){this.isPlane=!0,this.normal=e,this.constant=t}set(e,t){return this.normal.copy(e),this.constant=t,this}setComponents(e,t,i,s){return this.normal.set(e,t,i),this.constant=s,this}setFromNormalAndCoplanarPoint(e,t){return this.normal.copy(e),this.constant=-t.dot(this.normal),this}setFromCoplanarPoints(e,t,i){const s=gh.subVectors(i,t).cross(UE.subVectors(e,t)).normalize();return this.setFromNormalAndCoplanarPoint(s,e),this}copy(e){return this.normal.copy(e.normal),this.constant=e.constant,this}normalize(){const e=1/this.normal.length();return this.normal.multiplyScalar(e),this.constant*=e,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(e){return this.normal.dot(e)+this.constant}distanceToSphere(e){return this.distanceToPoint(e.center)-e.radius}projectPoint(e,t){return t.copy(e).addScaledVector(this.normal,-this.distanceToPoint(e))}intersectLine(e,t){const i=e.delta(gh),s=this.normal.dot(i);if(s===0)return this.distanceToPoint(e.start)===0?t.copy(e.start):null;const r=-(e.start.dot(this.normal)+this.constant)/s;return r<0||r>1?null:t.copy(e.start).addScaledVector(i,r)}intersectsLine(e){const t=this.distanceToPoint(e.start),i=this.distanceToPoint(e.end);return t<0&&i>0||i<0&&t>0}intersectsBox(e){return e.intersectsPlane(this)}intersectsSphere(e){return e.intersectsPlane(this)}coplanarPoint(e){return e.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(e,t){const i=t||NE.getNormalMatrix(e),s=this.coplanarPoint(gh).applyMatrix4(e),r=this.normal.applyMatrix3(i).normalize();return this.constant=-s.dot(r),this}translate(e){return this.constant-=e.dot(this.normal),this}equals(e){return e.normal.equals(this.normal)&&e.constant===this.constant}clone(){return new this.constructor().copy(this)}}const fs=new rn,Ha=new I;class la{constructor(e=new Gi,t=new Gi,i=new Gi,s=new Gi,r=new Gi,o=new Gi){this.planes=[e,t,i,s,r,o]}set(e,t,i,s,r,o){const a=this.planes;return a[0].copy(e),a[1].copy(t),a[2].copy(i),a[3].copy(s),a[4].copy(r),a[5].copy(o),this}copy(e){const t=this.planes;for(let i=0;i<6;i++)t[i].copy(e.planes[i]);return this}setFromProjectionMatrix(e,t=Hn){const i=this.planes,s=e.elements,r=s[0],o=s[1],a=s[2],l=s[3],c=s[4],h=s[5],u=s[6],d=s[7],f=s[8],m=s[9],y=s[10],g=s[11],p=s[12],v=s[13],_=s[14],x=s[15];if(i[0].setComponents(l-r,d-c,g-f,x-p).normalize(),i[1].setComponents(l+r,d+c,g+f,x+p).normalize(),i[2].setComponents(l+o,d+h,g+m,x+v).normalize(),i[3].setComponents(l-o,d-h,g-m,x-v).normalize(),i[4].setComponents(l-a,d-u,g-y,x-_).normalize(),t===Hn)i[5].setComponents(l+a,d+u,g+y,x+_).normalize();else if(t===Nr)i[5].setComponents(a,u,y,_).normalize();else throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);return this}intersectsObject(e){if(e.boundingSphere!==void 0)e.boundingSphere===null&&e.computeBoundingSphere(),fs.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;t.boundingSphere===null&&t.computeBoundingSphere(),fs.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(fs)}intersectsSprite(e){return fs.center.set(0,0,0),fs.radius=.7071067811865476,fs.applyMatrix4(e.matrixWorld),this.intersectsSphere(fs)}intersectsSphere(e){const t=this.planes,i=e.center,s=-e.radius;for(let r=0;r<6;r++)if(t[r].distanceToPoint(i)<s)return!1;return!0}intersectsBox(e){const t=this.planes;for(let i=0;i<6;i++){const s=t[i];if(Ha.x=s.normal.x>0?e.max.x:e.min.x,Ha.y=s.normal.y>0?e.max.y:e.min.y,Ha.z=s.normal.z>0?e.max.z:e.min.z,s.distanceToPoint(Ha)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let i=0;i<6;i++)if(t[i].distanceToPoint(e)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function d_(){let n=null,e=!1,t=null,i=null;function s(r,o){t(r,o),i=n.requestAnimationFrame(s)}return{start:function(){e!==!0&&t!==null&&(i=n.requestAnimationFrame(s),e=!0)},stop:function(){n.cancelAnimationFrame(i),e=!1},setAnimationLoop:function(r){t=r},setContext:function(r){n=r}}}function OE(n,e){const t=e.isWebGL2,i=new WeakMap;function s(c,h){const u=c.array,d=c.usage,f=u.byteLength,m=n.createBuffer();n.bindBuffer(h,m),n.bufferData(h,u,d),c.onUploadCallback();let y;if(u instanceof Float32Array)y=n.FLOAT;else if(u instanceof Uint16Array)if(c.isFloat16BufferAttribute)if(t)y=n.HALF_FLOAT;else throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");else y=n.UNSIGNED_SHORT;else if(u instanceof Int16Array)y=n.SHORT;else if(u instanceof Uint32Array)y=n.UNSIGNED_INT;else if(u instanceof Int32Array)y=n.INT;else if(u instanceof Int8Array)y=n.BYTE;else if(u instanceof Uint8Array)y=n.UNSIGNED_BYTE;else if(u instanceof Uint8ClampedArray)y=n.UNSIGNED_BYTE;else throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+u);return{buffer:m,type:y,bytesPerElement:u.BYTES_PER_ELEMENT,version:c.version,size:f}}function r(c,h,u){const d=h.array,f=h._updateRange,m=h.updateRanges;if(n.bindBuffer(u,c),f.count===-1&&m.length===0&&n.bufferSubData(u,0,d),m.length!==0){for(let y=0,g=m.length;y<g;y++){const p=m[y];t?n.bufferSubData(u,p.start*d.BYTES_PER_ELEMENT,d,p.start,p.count):n.bufferSubData(u,p.start*d.BYTES_PER_ELEMENT,d.subarray(p.start,p.start+p.count))}h.clearUpdateRanges()}f.count!==-1&&(t?n.bufferSubData(u,f.offset*d.BYTES_PER_ELEMENT,d,f.offset,f.count):n.bufferSubData(u,f.offset*d.BYTES_PER_ELEMENT,d.subarray(f.offset,f.offset+f.count)),f.count=-1),h.onUploadCallback()}function o(c){return c.isInterleavedBufferAttribute&&(c=c.data),i.get(c)}function a(c){c.isInterleavedBufferAttribute&&(c=c.data);const h=i.get(c);h&&(n.deleteBuffer(h.buffer),i.delete(c))}function l(c,h){if(c.isGLBufferAttribute){const d=i.get(c);(!d||d.version<c.version)&&i.set(c,{buffer:c.buffer,type:c.type,bytesPerElement:c.elementSize,version:c.version});return}c.isInterleavedBufferAttribute&&(c=c.data);const u=i.get(c);if(u===void 0)i.set(c,s(c,h));else if(u.version<c.version){if(u.size!==c.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");r(u.buffer,c,h),u.version=c.version}}return{get:o,remove:a,update:l}}class ca extends Je{constructor(e=1,t=1,i=1,s=1){super(),this.type="PlaneGeometry",this.parameters={width:e,height:t,widthSegments:i,heightSegments:s};const r=e/2,o=t/2,a=Math.floor(i),l=Math.floor(s),c=a+1,h=l+1,u=e/a,d=t/l,f=[],m=[],y=[],g=[];for(let p=0;p<h;p++){const v=p*d-o;for(let _=0;_<c;_++){const x=_*u-r;m.push(x,-v,0),y.push(0,0,1),g.push(_/a),g.push(1-p/l)}}for(let p=0;p<l;p++)for(let v=0;v<a;v++){const _=v+c*p,x=v+c*(p+1),P=v+1+c*(p+1),M=v+1+c*p;f.push(_,x,M),f.push(x,P,M)}this.setIndex(f),this.setAttribute("position",new Pe(m,3)),this.setAttribute("normal",new Pe(y,3)),this.setAttribute("uv",new Pe(g,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new ca(e.width,e.height,e.widthSegments,e.heightSegments)}}var FE=`#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`,kE=`#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`,BE=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`,zE=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,VE=`#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,HE=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,GE=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,WE=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,qE=`#ifdef USE_BATCHING
	attribute float batchId;
	uniform highp sampler2D batchingTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,XE=`#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( batchId );
#endif`,$E=`vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`,YE=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,jE=`float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`,ZE=`#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`,KE=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,JE=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,QE=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,eT=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,tT=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,nT=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,iT=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,sT=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,rT=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,oT=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`,aT=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,lT=`vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,cT=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,hT=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`,uT=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,dT=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,fT="gl_FragColor = linearToOutputTexel( gl_FragColor );",pT=`
const mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(
	vec3( 0.8224621, 0.177538, 0.0 ),
	vec3( 0.0331941, 0.9668058, 0.0 ),
	vec3( 0.0170827, 0.0723974, 0.9105199 )
);
const mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(
	vec3( 1.2249401, - 0.2249404, 0.0 ),
	vec3( - 0.0420569, 1.0420571, 0.0 ),
	vec3( - 0.0196376, - 0.0786361, 1.0982735 )
);
vec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {
	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );
}
vec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {
	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );
}
vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return sRGBTransferOETF( value );
}`,mT=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,gT=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,yT=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,_T=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,vT=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,xT=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,bT=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,wT=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,MT=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,ST=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`,ET=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,TT=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,AT=`LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`,CT=`varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`,RT=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( LEGACY_LIGHTS )
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#else
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,PT=`#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`,IT=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,LT=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`,DT=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,UT=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`,NT=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`,OT=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,FT=`
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,kT=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,BT=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`,zT=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,VT=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,HT=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,GT=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,WT=`#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`,qT=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,XT=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,$T=`#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,YT=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`,jT=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,ZT=`#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`,KT=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`,JT=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`,QT=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`,eA=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`,tA=`#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,nA=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,iA=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,sA=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,rA=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`,oA=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`,aA=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`,lA=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`,cA=`#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`,hA=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,uA=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`,dA=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,fA=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,pA=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,mA=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,gA=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`,yA=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,_A=`#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,vA=`#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,xA=`#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`,bA=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,wA=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,MA=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`,SA=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,EA=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,TA=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,AA=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,CA=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,RA=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color *= toneMappingExposure;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	return color;
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,PA=`#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`,IA=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`,LA=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,DA=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`,UA=`#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`,NA=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const OA=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,FA=`uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,kA=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,BA=`#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,zA=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,VA=`uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,HA=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,GA=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,WA=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,qA=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,XA=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,$A=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`,YA=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,jA=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,ZA=`#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,KA=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,JA=`#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,QA=`#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,e1=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,t1=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,n1=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`,i1=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`,s1=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,r1=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,o1=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,a1=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,l1=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,c1=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,h1=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,u1=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,d1=`#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,f1=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,p1=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,m1=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`,$e={alphahash_fragment:FE,alphahash_pars_fragment:kE,alphamap_fragment:BE,alphamap_pars_fragment:zE,alphatest_fragment:VE,alphatest_pars_fragment:HE,aomap_fragment:GE,aomap_pars_fragment:WE,batching_pars_vertex:qE,batching_vertex:XE,begin_vertex:$E,beginnormal_vertex:YE,bsdfs:jE,iridescence_fragment:ZE,bumpmap_pars_fragment:KE,clipping_planes_fragment:JE,clipping_planes_pars_fragment:QE,clipping_planes_pars_vertex:eT,clipping_planes_vertex:tT,color_fragment:nT,color_pars_fragment:iT,color_pars_vertex:sT,color_vertex:rT,common:oT,cube_uv_reflection_fragment:aT,defaultnormal_vertex:lT,displacementmap_pars_vertex:cT,displacementmap_vertex:hT,emissivemap_fragment:uT,emissivemap_pars_fragment:dT,colorspace_fragment:fT,colorspace_pars_fragment:pT,envmap_fragment:mT,envmap_common_pars_fragment:gT,envmap_pars_fragment:yT,envmap_pars_vertex:_T,envmap_physical_pars_fragment:PT,envmap_vertex:vT,fog_vertex:xT,fog_pars_vertex:bT,fog_fragment:wT,fog_pars_fragment:MT,gradientmap_pars_fragment:ST,lightmap_fragment:ET,lightmap_pars_fragment:TT,lights_lambert_fragment:AT,lights_lambert_pars_fragment:CT,lights_pars_begin:RT,lights_toon_fragment:IT,lights_toon_pars_fragment:LT,lights_phong_fragment:DT,lights_phong_pars_fragment:UT,lights_physical_fragment:NT,lights_physical_pars_fragment:OT,lights_fragment_begin:FT,lights_fragment_maps:kT,lights_fragment_end:BT,logdepthbuf_fragment:zT,logdepthbuf_pars_fragment:VT,logdepthbuf_pars_vertex:HT,logdepthbuf_vertex:GT,map_fragment:WT,map_pars_fragment:qT,map_particle_fragment:XT,map_particle_pars_fragment:$T,metalnessmap_fragment:YT,metalnessmap_pars_fragment:jT,morphcolor_vertex:ZT,morphnormal_vertex:KT,morphtarget_pars_vertex:JT,morphtarget_vertex:QT,normal_fragment_begin:eA,normal_fragment_maps:tA,normal_pars_fragment:nA,normal_pars_vertex:iA,normal_vertex:sA,normalmap_pars_fragment:rA,clearcoat_normal_fragment_begin:oA,clearcoat_normal_fragment_maps:aA,clearcoat_pars_fragment:lA,iridescence_pars_fragment:cA,opaque_fragment:hA,packing:uA,premultiplied_alpha_fragment:dA,project_vertex:fA,dithering_fragment:pA,dithering_pars_fragment:mA,roughnessmap_fragment:gA,roughnessmap_pars_fragment:yA,shadowmap_pars_fragment:_A,shadowmap_pars_vertex:vA,shadowmap_vertex:xA,shadowmask_pars_fragment:bA,skinbase_vertex:wA,skinning_pars_vertex:MA,skinning_vertex:SA,skinnormal_vertex:EA,specularmap_fragment:TA,specularmap_pars_fragment:AA,tonemapping_fragment:CA,tonemapping_pars_fragment:RA,transmission_fragment:PA,transmission_pars_fragment:IA,uv_pars_fragment:LA,uv_pars_vertex:DA,uv_vertex:UA,worldpos_vertex:NA,background_vert:OA,background_frag:FA,backgroundCube_vert:kA,backgroundCube_frag:BA,cube_vert:zA,cube_frag:VA,depth_vert:HA,depth_frag:GA,distanceRGBA_vert:WA,distanceRGBA_frag:qA,equirect_vert:XA,equirect_frag:$A,linedashed_vert:YA,linedashed_frag:jA,meshbasic_vert:ZA,meshbasic_frag:KA,meshlambert_vert:JA,meshlambert_frag:QA,meshmatcap_vert:e1,meshmatcap_frag:t1,meshnormal_vert:n1,meshnormal_frag:i1,meshphong_vert:s1,meshphong_frag:r1,meshphysical_vert:o1,meshphysical_frag:a1,meshtoon_vert:l1,meshtoon_frag:c1,points_vert:h1,points_frag:u1,shadow_vert:d1,shadow_frag:f1,sprite_vert:p1,sprite_frag:m1},_e={common:{diffuse:{value:new Te(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new Ke},alphaMap:{value:null},alphaMapTransform:{value:new Ke},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new Ke}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new Ke}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new Ke}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new Ke},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new Ke},normalScale:{value:new ue(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new Ke},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new Ke}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new Ke}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new Ke}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Te(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Te(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new Ke},alphaTest:{value:0},uvTransform:{value:new Ke}},sprite:{diffuse:{value:new Te(16777215)},opacity:{value:1},center:{value:new ue(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new Ke},alphaMap:{value:null},alphaMapTransform:{value:new Ke},alphaTest:{value:0}}},Bn={basic:{uniforms:un([_e.common,_e.specularmap,_e.envmap,_e.aomap,_e.lightmap,_e.fog]),vertexShader:$e.meshbasic_vert,fragmentShader:$e.meshbasic_frag},lambert:{uniforms:un([_e.common,_e.specularmap,_e.envmap,_e.aomap,_e.lightmap,_e.emissivemap,_e.bumpmap,_e.normalmap,_e.displacementmap,_e.fog,_e.lights,{emissive:{value:new Te(0)}}]),vertexShader:$e.meshlambert_vert,fragmentShader:$e.meshlambert_frag},phong:{uniforms:un([_e.common,_e.specularmap,_e.envmap,_e.aomap,_e.lightmap,_e.emissivemap,_e.bumpmap,_e.normalmap,_e.displacementmap,_e.fog,_e.lights,{emissive:{value:new Te(0)},specular:{value:new Te(1118481)},shininess:{value:30}}]),vertexShader:$e.meshphong_vert,fragmentShader:$e.meshphong_frag},standard:{uniforms:un([_e.common,_e.envmap,_e.aomap,_e.lightmap,_e.emissivemap,_e.bumpmap,_e.normalmap,_e.displacementmap,_e.roughnessmap,_e.metalnessmap,_e.fog,_e.lights,{emissive:{value:new Te(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:$e.meshphysical_vert,fragmentShader:$e.meshphysical_frag},toon:{uniforms:un([_e.common,_e.aomap,_e.lightmap,_e.emissivemap,_e.bumpmap,_e.normalmap,_e.displacementmap,_e.gradientmap,_e.fog,_e.lights,{emissive:{value:new Te(0)}}]),vertexShader:$e.meshtoon_vert,fragmentShader:$e.meshtoon_frag},matcap:{uniforms:un([_e.common,_e.bumpmap,_e.normalmap,_e.displacementmap,_e.fog,{matcap:{value:null}}]),vertexShader:$e.meshmatcap_vert,fragmentShader:$e.meshmatcap_frag},points:{uniforms:un([_e.points,_e.fog]),vertexShader:$e.points_vert,fragmentShader:$e.points_frag},dashed:{uniforms:un([_e.common,_e.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:$e.linedashed_vert,fragmentShader:$e.linedashed_frag},depth:{uniforms:un([_e.common,_e.displacementmap]),vertexShader:$e.depth_vert,fragmentShader:$e.depth_frag},normal:{uniforms:un([_e.common,_e.bumpmap,_e.normalmap,_e.displacementmap,{opacity:{value:1}}]),vertexShader:$e.meshnormal_vert,fragmentShader:$e.meshnormal_frag},sprite:{uniforms:un([_e.sprite,_e.fog]),vertexShader:$e.sprite_vert,fragmentShader:$e.sprite_frag},background:{uniforms:{uvTransform:{value:new Ke},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:$e.background_vert,fragmentShader:$e.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1}},vertexShader:$e.backgroundCube_vert,fragmentShader:$e.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:$e.cube_vert,fragmentShader:$e.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:$e.equirect_vert,fragmentShader:$e.equirect_frag},distanceRGBA:{uniforms:un([_e.common,_e.displacementmap,{referencePosition:{value:new I},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:$e.distanceRGBA_vert,fragmentShader:$e.distanceRGBA_frag},shadow:{uniforms:un([_e.lights,_e.fog,{color:{value:new Te(0)},opacity:{value:1}}]),vertexShader:$e.shadow_vert,fragmentShader:$e.shadow_frag}};Bn.physical={uniforms:un([Bn.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new Ke},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new Ke},clearcoatNormalScale:{value:new ue(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new Ke},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new Ke},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new Ke},sheen:{value:0},sheenColor:{value:new Te(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new Ke},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new Ke},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new Ke},transmissionSamplerSize:{value:new ue},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new Ke},attenuationDistance:{value:0},attenuationColor:{value:new Te(0)},specularColor:{value:new Te(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new Ke},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new Ke},anisotropyVector:{value:new ue},anisotropyMap:{value:null},anisotropyMapTransform:{value:new Ke}}]),vertexShader:$e.meshphysical_vert,fragmentShader:$e.meshphysical_frag};const Ga={r:0,b:0,g:0};function g1(n,e,t,i,s,r,o){const a=new Te(0);let l=r===!0?0:1,c,h,u=null,d=0,f=null;function m(g,p){let v=!1,_=p.isScene===!0?p.background:null;_&&_.isTexture&&(_=(p.backgroundBlurriness>0?t:e).get(_)),_===null?y(a,l):_&&_.isColor&&(y(_,1),v=!0);const x=n.xr.getEnvironmentBlendMode();x==="additive"?i.buffers.color.setClear(0,0,0,1,o):x==="alpha-blend"&&i.buffers.color.setClear(0,0,0,0,o),(n.autoClear||v)&&n.clear(n.autoClearColor,n.autoClearDepth,n.autoClearStencil),_&&(_.isCubeTexture||_.mapping===Gr)?(h===void 0&&(h=new zt(new Xs(1,1,1),new oi({name:"BackgroundCubeMaterial",uniforms:Fr(Bn.backgroundCube.uniforms),vertexShader:Bn.backgroundCube.vertexShader,fragmentShader:Bn.backgroundCube.fragmentShader,side:dn,depthTest:!1,depthWrite:!1,fog:!1})),h.geometry.deleteAttribute("normal"),h.geometry.deleteAttribute("uv"),h.onBeforeRender=function(P,M,A){this.matrixWorld.copyPosition(A.matrixWorld)},Object.defineProperty(h.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),s.update(h)),h.material.uniforms.envMap.value=_,h.material.uniforms.flipEnvMap.value=_.isCubeTexture&&_.isRenderTargetTexture===!1?-1:1,h.material.uniforms.backgroundBlurriness.value=p.backgroundBlurriness,h.material.uniforms.backgroundIntensity.value=p.backgroundIntensity,h.material.toneMapped=ut.getTransfer(_.colorSpace)!==yt,(u!==_||d!==_.version||f!==n.toneMapping)&&(h.material.needsUpdate=!0,u=_,d=_.version,f=n.toneMapping),h.layers.enableAll(),g.unshift(h,h.geometry,h.material,0,0,null)):_&&_.isTexture&&(c===void 0&&(c=new zt(new ca(2,2),new oi({name:"BackgroundMaterial",uniforms:Fr(Bn.background.uniforms),vertexShader:Bn.background.vertexShader,fragmentShader:Bn.background.fragmentShader,side:Mi,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),Object.defineProperty(c.material,"map",{get:function(){return this.uniforms.t2D.value}}),s.update(c)),c.material.uniforms.t2D.value=_,c.material.uniforms.backgroundIntensity.value=p.backgroundIntensity,c.material.toneMapped=ut.getTransfer(_.colorSpace)!==yt,_.matrixAutoUpdate===!0&&_.updateMatrix(),c.material.uniforms.uvTransform.value.copy(_.matrix),(u!==_||d!==_.version||f!==n.toneMapping)&&(c.material.needsUpdate=!0,u=_,d=_.version,f=n.toneMapping),c.layers.enableAll(),g.unshift(c,c.geometry,c.material,0,0,null))}function y(g,p){g.getRGB(Ga,l_(n)),i.buffers.color.setClear(Ga.r,Ga.g,Ga.b,p,o)}return{getClearColor:function(){return a},setClearColor:function(g,p=1){a.set(g),l=p,y(a,l)},getClearAlpha:function(){return l},setClearAlpha:function(g){l=g,y(a,l)},render:m}}function y1(n,e,t,i){const s=n.getParameter(n.MAX_VERTEX_ATTRIBS),r=i.isWebGL2?null:e.get("OES_vertex_array_object"),o=i.isWebGL2||r!==null,a={},l=g(null);let c=l,h=!1;function u(F,q,X,te,Q){let re=!1;if(o){const he=y(te,X,q);c!==he&&(c=he,f(c.object)),re=p(F,te,X,Q),re&&v(F,te,X,Q)}else{const he=q.wireframe===!0;(c.geometry!==te.id||c.program!==X.id||c.wireframe!==he)&&(c.geometry=te.id,c.program=X.id,c.wireframe=he,re=!0)}Q!==null&&t.update(Q,n.ELEMENT_ARRAY_BUFFER),(re||h)&&(h=!1,O(F,q,X,te),Q!==null&&n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,t.get(Q).buffer))}function d(){return i.isWebGL2?n.createVertexArray():r.createVertexArrayOES()}function f(F){return i.isWebGL2?n.bindVertexArray(F):r.bindVertexArrayOES(F)}function m(F){return i.isWebGL2?n.deleteVertexArray(F):r.deleteVertexArrayOES(F)}function y(F,q,X){const te=X.wireframe===!0;let Q=a[F.id];Q===void 0&&(Q={},a[F.id]=Q);let re=Q[q.id];re===void 0&&(re={},Q[q.id]=re);let he=re[te];return he===void 0&&(he=g(d()),re[te]=he),he}function g(F){const q=[],X=[],te=[];for(let Q=0;Q<s;Q++)q[Q]=0,X[Q]=0,te[Q]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:q,enabledAttributes:X,attributeDivisors:te,object:F,attributes:{},index:null}}function p(F,q,X,te){const Q=c.attributes,re=q.attributes;let he=0;const pe=X.getAttributes();for(const ge in pe)if(pe[ge].location>=0){const fe=Q[ge];let be=re[ge];if(be===void 0&&(ge==="instanceMatrix"&&F.instanceMatrix&&(be=F.instanceMatrix),ge==="instanceColor"&&F.instanceColor&&(be=F.instanceColor)),fe===void 0||fe.attribute!==be||be&&fe.data!==be.data)return!0;he++}return c.attributesNum!==he||c.index!==te}function v(F,q,X,te){const Q={},re=q.attributes;let he=0;const pe=X.getAttributes();for(const ge in pe)if(pe[ge].location>=0){let fe=re[ge];fe===void 0&&(ge==="instanceMatrix"&&F.instanceMatrix&&(fe=F.instanceMatrix),ge==="instanceColor"&&F.instanceColor&&(fe=F.instanceColor));const be={};be.attribute=fe,fe&&fe.data&&(be.data=fe.data),Q[ge]=be,he++}c.attributes=Q,c.attributesNum=he,c.index=te}function _(){const F=c.newAttributes;for(let q=0,X=F.length;q<X;q++)F[q]=0}function x(F){P(F,0)}function P(F,q){const X=c.newAttributes,te=c.enabledAttributes,Q=c.attributeDivisors;X[F]=1,te[F]===0&&(n.enableVertexAttribArray(F),te[F]=1),Q[F]!==q&&((i.isWebGL2?n:e.get("ANGLE_instanced_arrays"))[i.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](F,q),Q[F]=q)}function M(){const F=c.newAttributes,q=c.enabledAttributes;for(let X=0,te=q.length;X<te;X++)q[X]!==F[X]&&(n.disableVertexAttribArray(X),q[X]=0)}function A(F,q,X,te,Q,re,he){he===!0?n.vertexAttribIPointer(F,q,X,Q,re):n.vertexAttribPointer(F,q,X,te,Q,re)}function O(F,q,X,te){if(i.isWebGL2===!1&&(F.isInstancedMesh||te.isInstancedBufferGeometry)&&e.get("ANGLE_instanced_arrays")===null)return;_();const Q=te.attributes,re=X.getAttributes(),he=q.defaultAttributeValues;for(const pe in re){const ge=re[pe];if(ge.location>=0){let ne=Q[pe];if(ne===void 0&&(pe==="instanceMatrix"&&F.instanceMatrix&&(ne=F.instanceMatrix),pe==="instanceColor"&&F.instanceColor&&(ne=F.instanceColor)),ne!==void 0){const fe=ne.normalized,be=ne.itemSize,Me=t.get(ne);if(Me===void 0)continue;const z=Me.buffer,le=Me.type,oe=Me.bytesPerElement,ae=i.isWebGL2===!0&&(le===n.INT||le===n.UNSIGNED_INT||ne.gpuType===wd);if(ne.isInterleavedBufferAttribute){const we=ne.data,L=we.stride,E=ne.offset;if(we.isInstancedInterleavedBuffer){for(let T=0;T<ge.locationSize;T++)P(ge.location+T,we.meshPerAttribute);F.isInstancedMesh!==!0&&te._maxInstanceCount===void 0&&(te._maxInstanceCount=we.meshPerAttribute*we.count)}else for(let T=0;T<ge.locationSize;T++)x(ge.location+T);n.bindBuffer(n.ARRAY_BUFFER,z);for(let T=0;T<ge.locationSize;T++)A(ge.location+T,be/ge.locationSize,le,fe,L*oe,(E+be/ge.locationSize*T)*oe,ae)}else{if(ne.isInstancedBufferAttribute){for(let we=0;we<ge.locationSize;we++)P(ge.location+we,ne.meshPerAttribute);F.isInstancedMesh!==!0&&te._maxInstanceCount===void 0&&(te._maxInstanceCount=ne.meshPerAttribute*ne.count)}else for(let we=0;we<ge.locationSize;we++)x(ge.location+we);n.bindBuffer(n.ARRAY_BUFFER,z);for(let we=0;we<ge.locationSize;we++)A(ge.location+we,be/ge.locationSize,le,fe,be*oe,be/ge.locationSize*we*oe,ae)}}else if(he!==void 0){const fe=he[pe];if(fe!==void 0)switch(fe.length){case 2:n.vertexAttrib2fv(ge.location,fe);break;case 3:n.vertexAttrib3fv(ge.location,fe);break;case 4:n.vertexAttrib4fv(ge.location,fe);break;default:n.vertexAttrib1fv(ge.location,fe)}}}}M()}function S(){J();for(const F in a){const q=a[F];for(const X in q){const te=q[X];for(const Q in te)m(te[Q].object),delete te[Q];delete q[X]}delete a[F]}}function C(F){if(a[F.id]===void 0)return;const q=a[F.id];for(const X in q){const te=q[X];for(const Q in te)m(te[Q].object),delete te[Q];delete q[X]}delete a[F.id]}function G(F){for(const q in a){const X=a[q];if(X[F.id]===void 0)continue;const te=X[F.id];for(const Q in te)m(te[Q].object),delete te[Q];delete X[F.id]}}function J(){de(),h=!0,c!==l&&(c=l,f(c.object))}function de(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:u,reset:J,resetDefaultState:de,dispose:S,releaseStatesOfGeometry:C,releaseStatesOfProgram:G,initAttributes:_,enableAttribute:x,disableUnusedAttributes:M}}function _1(n,e,t,i){const s=i.isWebGL2;let r;function o(h){r=h}function a(h,u){n.drawArrays(r,h,u),t.update(u,r,1)}function l(h,u,d){if(d===0)return;let f,m;if(s)f=n,m="drawArraysInstanced";else if(f=e.get("ANGLE_instanced_arrays"),m="drawArraysInstancedANGLE",f===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}f[m](r,h,u,d),t.update(u,r,d)}function c(h,u,d){if(d===0)return;const f=e.get("WEBGL_multi_draw");if(f===null)for(let m=0;m<d;m++)this.render(h[m],u[m]);else{f.multiDrawArraysWEBGL(r,h,0,u,0,d);let m=0;for(let y=0;y<d;y++)m+=u[y];t.update(m,r,1)}}this.setMode=o,this.render=a,this.renderInstances=l,this.renderMultiDraw=c}function v1(n,e,t){let i;function s(){if(i!==void 0)return i;if(e.has("EXT_texture_filter_anisotropic")===!0){const A=e.get("EXT_texture_filter_anisotropic");i=n.getParameter(A.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i}function r(A){if(A==="highp"){if(n.getShaderPrecisionFormat(n.VERTEX_SHADER,n.HIGH_FLOAT).precision>0&&n.getShaderPrecisionFormat(n.FRAGMENT_SHADER,n.HIGH_FLOAT).precision>0)return"highp";A="mediump"}return A==="mediump"&&n.getShaderPrecisionFormat(n.VERTEX_SHADER,n.MEDIUM_FLOAT).precision>0&&n.getShaderPrecisionFormat(n.FRAGMENT_SHADER,n.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const o=typeof WebGL2RenderingContext<"u"&&n.constructor.name==="WebGL2RenderingContext";let a=t.precision!==void 0?t.precision:"highp";const l=r(a);l!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",l,"instead."),a=l);const c=o||e.has("WEBGL_draw_buffers"),h=t.logarithmicDepthBuffer===!0,u=n.getParameter(n.MAX_TEXTURE_IMAGE_UNITS),d=n.getParameter(n.MAX_VERTEX_TEXTURE_IMAGE_UNITS),f=n.getParameter(n.MAX_TEXTURE_SIZE),m=n.getParameter(n.MAX_CUBE_MAP_TEXTURE_SIZE),y=n.getParameter(n.MAX_VERTEX_ATTRIBS),g=n.getParameter(n.MAX_VERTEX_UNIFORM_VECTORS),p=n.getParameter(n.MAX_VARYING_VECTORS),v=n.getParameter(n.MAX_FRAGMENT_UNIFORM_VECTORS),_=d>0,x=o||e.has("OES_texture_float"),P=_&&x,M=o?n.getParameter(n.MAX_SAMPLES):0;return{isWebGL2:o,drawBuffers:c,getMaxAnisotropy:s,getMaxPrecision:r,precision:a,logarithmicDepthBuffer:h,maxTextures:u,maxVertexTextures:d,maxTextureSize:f,maxCubemapSize:m,maxAttributes:y,maxVertexUniforms:g,maxVaryings:p,maxFragmentUniforms:v,vertexTextures:_,floatFragmentTextures:x,floatVertexTextures:P,maxSamples:M}}function x1(n){const e=this;let t=null,i=0,s=!1,r=!1;const o=new Gi,a=new Ke,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(u,d){const f=u.length!==0||d||i!==0||s;return s=d,i=u.length,f},this.beginShadows=function(){r=!0,h(null)},this.endShadows=function(){r=!1},this.setGlobalState=function(u,d){t=h(u,d,0)},this.setState=function(u,d,f){const m=u.clippingPlanes,y=u.clipIntersection,g=u.clipShadows,p=n.get(u);if(!s||m===null||m.length===0||r&&!g)r?h(null):c();else{const v=r?0:i,_=v*4;let x=p.clippingState||null;l.value=x,x=h(m,d,_,f);for(let P=0;P!==_;++P)x[P]=t[P];p.clippingState=x,this.numIntersection=y?this.numPlanes:0,this.numPlanes+=v}};function c(){l.value!==t&&(l.value=t,l.needsUpdate=i>0),e.numPlanes=i,e.numIntersection=0}function h(u,d,f,m){const y=u!==null?u.length:0;let g=null;if(y!==0){if(g=l.value,m!==!0||g===null){const p=f+y*4,v=d.matrixWorldInverse;a.getNormalMatrix(v),(g===null||g.length<p)&&(g=new Float32Array(p));for(let _=0,x=f;_!==y;++_,x+=4)o.copy(u[_]).applyMatrix4(v,a),o.normal.toArray(g,x),g[x+3]=o.constant}l.value=g,l.needsUpdate=!0}return e.numPlanes=y,e.numIntersection=0,g}}function b1(n){let e=new WeakMap;function t(o,a){return a===Io?o.mapping=Si:a===Lo&&(o.mapping=Ki),o}function i(o){if(o&&o.isTexture){const a=o.mapping;if(a===Io||a===Lo)if(e.has(o)){const l=e.get(o).texture;return t(l,o.mapping)}else{const l=o.image;if(l&&l.height>0){const c=new u_(l.height/2);return c.fromEquirectangularTexture(n,o),e.set(o,c),o.addEventListener("dispose",s),t(c.texture,o.mapping)}else return null}}return o}function s(o){const a=o.target;a.removeEventListener("dispose",s);const l=e.get(a);l!==void 0&&(e.delete(a),l.dispose())}function r(){e=new WeakMap}return{get:i,dispose:r}}class ha extends oa{constructor(e=-1,t=1,i=1,s=-1,r=.1,o=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=e,this.right=t,this.top=i,this.bottom=s,this.near=r,this.far=o,this.updateProjectionMatrix()}copy(e,t){return super.copy(e,t),this.left=e.left,this.right=e.right,this.top=e.top,this.bottom=e.bottom,this.near=e.near,this.far=e.far,this.zoom=e.zoom,this.view=e.view===null?null:Object.assign({},e.view),this}setViewOffset(e,t,i,s,r,o){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=e,this.view.fullHeight=t,this.view.offsetX=i,this.view.offsetY=s,this.view.width=r,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const e=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,s=(this.top+this.bottom)/2;let r=i-e,o=i+e,a=s+t,l=s-t;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,h=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=c*this.view.offsetX,o=r+c*this.view.width,a-=h*this.view.offsetY,l=a-h*this.view.height}this.projectionMatrix.makeOrthographic(r,o,a,l,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(e){const t=super.toJSON(e);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}}const vr=4,Dp=[.125,.215,.35,.446,.526,.582],Ms=20,yh=new ha,Up=new Te;let _h=null,vh=0,xh=0;const bs=(1+Math.sqrt(5))/2,cr=1/bs,Np=[new I(1,1,1),new I(-1,1,1),new I(1,1,-1),new I(-1,1,-1),new I(0,bs,cr),new I(0,bs,-cr),new I(cr,0,bs),new I(-cr,0,bs),new I(bs,cr,0),new I(-bs,cr,0)];class Fu{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(e,t=0,i=.1,s=100){_h=this._renderer.getRenderTarget(),vh=this._renderer.getActiveCubeFace(),xh=this._renderer.getActiveMipmapLevel(),this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(e,i,s,r),t>0&&this._blur(r,0,0,t),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(e,t=null){return this._fromTexture(e,t)}fromCubemap(e,t=null){return this._fromTexture(e,t)}compileCubemapShader(){this._cubemapMaterial===null&&(this._cubemapMaterial=kp(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){this._equirectMaterial===null&&(this._equirectMaterial=Fp(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),this._cubemapMaterial!==null&&this._cubemapMaterial.dispose(),this._equirectMaterial!==null&&this._equirectMaterial.dispose()}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial!==null&&this._blurMaterial.dispose(),this._pingPongRenderTarget!==null&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(_h,vh,xh),e.scissorTest=!1,Wa(e,0,0,e.width,e.height)}_fromTexture(e,t){e.mapping===Si||e.mapping===Ki?this._setSize(e.image.length===0?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4),_h=this._renderer.getRenderTarget(),vh=this._renderer.getActiveCubeFace(),xh=this._renderer.getActiveMipmapLevel();const i=t||this._allocateTargets();return this._textureToCubeUV(e,i),this._applyPMREM(i),this._cleanup(i),i}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,i={magFilter:Ut,minFilter:Ut,generateMipmaps:!1,type:Ur,format:vn,colorSpace:ri,depthBuffer:!1},s=Op(e,t,i);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){this._pingPongRenderTarget!==null&&this._dispose(),this._pingPongRenderTarget=Op(e,t,i);const{_lodMax:r}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=w1(r)),this._blurMaterial=M1(r,e,t)}return s}_compileMaterial(e){const t=new zt(this._lodPlanes[0],e);this._renderer.compile(t,yh)}_sceneToCubeUV(e,t,i,s){const a=new kt(90,1,t,i),l=[1,-1,1,1,1,1],c=[1,1,1,-1,-1,-1],h=this._renderer,u=h.autoClear,d=h.toneMapping;h.getClearColor(Up),h.toneMapping=bi,h.autoClear=!1;const f=new is({name:"PMREM.Background",side:dn,depthWrite:!1,depthTest:!1}),m=new zt(new Xs,f);let y=!1;const g=e.background;g?g.isColor&&(f.color.copy(g),e.background=null,y=!0):(f.color.copy(Up),y=!0);for(let p=0;p<6;p++){const v=p%3;v===0?(a.up.set(0,l[p],0),a.lookAt(c[p],0,0)):v===1?(a.up.set(0,0,l[p]),a.lookAt(0,c[p],0)):(a.up.set(0,l[p],0),a.lookAt(0,0,c[p]));const _=this._cubeSize;Wa(s,v*_,p>2?_:0,_,_),h.setRenderTarget(s),y&&h.render(m,a),h.render(e,a)}m.geometry.dispose(),m.material.dispose(),h.toneMapping=d,h.autoClear=u,e.background=g}_textureToCubeUV(e,t){const i=this._renderer,s=e.mapping===Si||e.mapping===Ki;s?(this._cubemapMaterial===null&&(this._cubemapMaterial=kp()),this._cubemapMaterial.uniforms.flipEnvMap.value=e.isRenderTargetTexture===!1?-1:1):this._equirectMaterial===null&&(this._equirectMaterial=Fp());const r=s?this._cubemapMaterial:this._equirectMaterial,o=new zt(this._lodPlanes[0],r),a=r.uniforms;a.envMap.value=e;const l=this._cubeSize;Wa(t,0,0,3*l,2*l),i.setRenderTarget(t),i.render(o,yh)}_applyPMREM(e){const t=this._renderer,i=t.autoClear;t.autoClear=!1;for(let s=1;s<this._lodPlanes.length;s++){const r=Math.sqrt(this._sigmas[s]*this._sigmas[s]-this._sigmas[s-1]*this._sigmas[s-1]),o=Np[(s-1)%Np.length];this._blur(e,s-1,s,r,o)}t.autoClear=i}_blur(e,t,i,s,r){const o=this._pingPongRenderTarget;this._halfBlur(e,o,t,i,s,"latitudinal",r),this._halfBlur(o,e,i,i,s,"longitudinal",r)}_halfBlur(e,t,i,s,r,o,a){const l=this._renderer,c=this._blurMaterial;o!=="latitudinal"&&o!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const h=3,u=new zt(this._lodPlanes[s],c),d=c.uniforms,f=this._sizeLods[i]-1,m=isFinite(r)?Math.PI/(2*f):2*Math.PI/(2*Ms-1),y=r/m,g=isFinite(r)?1+Math.floor(h*y):Ms;g>Ms&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${g} samples when the maximum is set to ${Ms}`);const p=[];let v=0;for(let A=0;A<Ms;++A){const O=A/y,S=Math.exp(-O*O/2);p.push(S),A===0?v+=S:A<g&&(v+=2*S)}for(let A=0;A<p.length;A++)p[A]=p[A]/v;d.envMap.value=e.texture,d.samples.value=g,d.weights.value=p,d.latitudinal.value=o==="latitudinal",a&&(d.poleAxis.value=a);const{_lodMax:_}=this;d.dTheta.value=m,d.mipInt.value=_-i;const x=this._sizeLods[s],P=3*x*(s>_-vr?s-_+vr:0),M=4*(this._cubeSize-x);Wa(t,P,M,3*x,2*x),l.setRenderTarget(t),l.render(u,yh)}}function w1(n){const e=[],t=[],i=[];let s=n;const r=n-vr+1+Dp.length;for(let o=0;o<r;o++){const a=Math.pow(2,s);t.push(a);let l=1/a;o>n-vr?l=Dp[o-n+vr-1]:o===0&&(l=0),i.push(l);const c=1/(a-2),h=-c,u=1+c,d=[h,h,u,h,u,u,h,h,u,u,h,u],f=6,m=6,y=3,g=2,p=1,v=new Float32Array(y*m*f),_=new Float32Array(g*m*f),x=new Float32Array(p*m*f);for(let M=0;M<f;M++){const A=M%3*2/3-1,O=M>2?0:-1,S=[A,O,0,A+2/3,O,0,A+2/3,O+1,0,A,O,0,A+2/3,O+1,0,A,O+1,0];v.set(S,y*m*M),_.set(d,g*m*M);const C=[M,M,M,M,M,M];x.set(C,p*m*M)}const P=new Je;P.setAttribute("position",new ct(v,y)),P.setAttribute("uv",new ct(_,g)),P.setAttribute("faceIndex",new ct(x,p)),e.push(P),s>vr&&s--}return{lodPlanes:e,sizeLods:t,sigmas:i}}function Op(n,e,t){const i=new $n(n,e,t);return i.texture.mapping=Gr,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function Wa(n,e,t,i,s){n.viewport.set(e,t,i,s),n.scissor.set(e,t,i,s)}function M1(n,e,t){const i=new Float32Array(Ms),s=new I(0,1,0);return new oi({name:"SphericalGaussianBlur",defines:{n:Ms,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/t,CUBEUV_MAX_MIP:`${n}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:s}},vertexShader:Fd(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,blending:xi,depthTest:!1,depthWrite:!1})}function Fp(){return new oi({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:Fd(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,blending:xi,depthTest:!1,depthWrite:!1})}function kp(){return new oi({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:Fd(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,blending:xi,depthTest:!1,depthWrite:!1})}function Fd(){return`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function S1(n){let e=new WeakMap,t=null;function i(a){if(a&&a.isTexture){const l=a.mapping,c=l===Io||l===Lo,h=l===Si||l===Ki;if(c||h)if(a.isRenderTargetTexture&&a.needsPMREMUpdate===!0){a.needsPMREMUpdate=!1;let u=e.get(a);return t===null&&(t=new Fu(n)),u=c?t.fromEquirectangular(a,u):t.fromCubemap(a,u),e.set(a,u),u.texture}else{if(e.has(a))return e.get(a).texture;{const u=a.image;if(c&&u&&u.height>0||h&&u&&s(u)){t===null&&(t=new Fu(n));const d=c?t.fromEquirectangular(a):t.fromCubemap(a);return e.set(a,d),a.addEventListener("dispose",r),d.texture}else return null}}}return a}function s(a){let l=0;const c=6;for(let h=0;h<c;h++)a[h]!==void 0&&l++;return l===c}function r(a){const l=a.target;l.removeEventListener("dispose",r);const c=e.get(l);c!==void 0&&(e.delete(l),c.dispose())}function o(){e=new WeakMap,t!==null&&(t.dispose(),t=null)}return{get:i,dispose:o}}function E1(n){const e={};function t(i){if(e[i]!==void 0)return e[i];let s;switch(i){case"WEBGL_depth_texture":s=n.getExtension("WEBGL_depth_texture")||n.getExtension("MOZ_WEBGL_depth_texture")||n.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":s=n.getExtension("EXT_texture_filter_anisotropic")||n.getExtension("MOZ_EXT_texture_filter_anisotropic")||n.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":s=n.getExtension("WEBGL_compressed_texture_s3tc")||n.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||n.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":s=n.getExtension("WEBGL_compressed_texture_pvrtc")||n.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:s=n.getExtension(i)}return e[i]=s,s}return{has:function(i){return t(i)!==null},init:function(i){i.isWebGL2?(t("EXT_color_buffer_float"),t("WEBGL_clip_cull_distance")):(t("WEBGL_depth_texture"),t("OES_texture_float"),t("OES_texture_half_float"),t("OES_texture_half_float_linear"),t("OES_standard_derivatives"),t("OES_element_index_uint"),t("OES_vertex_array_object"),t("ANGLE_instanced_arrays")),t("OES_texture_float_linear"),t("EXT_color_buffer_half_float"),t("WEBGL_multisampled_render_to_texture")},get:function(i){const s=t(i);return s===null&&console.warn("THREE.WebGLRenderer: "+i+" extension not supported."),s}}}function T1(n,e,t,i){const s={},r=new WeakMap;function o(u){const d=u.target;d.index!==null&&e.remove(d.index);for(const m in d.attributes)e.remove(d.attributes[m]);for(const m in d.morphAttributes){const y=d.morphAttributes[m];for(let g=0,p=y.length;g<p;g++)e.remove(y[g])}d.removeEventListener("dispose",o),delete s[d.id];const f=r.get(d);f&&(e.remove(f),r.delete(d)),i.releaseStatesOfGeometry(d),d.isInstancedBufferGeometry===!0&&delete d._maxInstanceCount,t.memory.geometries--}function a(u,d){return s[d.id]===!0||(d.addEventListener("dispose",o),s[d.id]=!0,t.memory.geometries++),d}function l(u){const d=u.attributes;for(const m in d)e.update(d[m],n.ARRAY_BUFFER);const f=u.morphAttributes;for(const m in f){const y=f[m];for(let g=0,p=y.length;g<p;g++)e.update(y[g],n.ARRAY_BUFFER)}}function c(u){const d=[],f=u.index,m=u.attributes.position;let y=0;if(f!==null){const v=f.array;y=f.version;for(let _=0,x=v.length;_<x;_+=3){const P=v[_+0],M=v[_+1],A=v[_+2];d.push(P,M,M,A,A,P)}}else if(m!==void 0){const v=m.array;y=m.version;for(let _=0,x=v.length/3-1;_<x;_+=3){const P=_+0,M=_+1,A=_+2;d.push(P,M,M,A,A,P)}}else return;const g=new(s_(d)?Od:Nd)(d,1);g.version=y;const p=r.get(u);p&&e.remove(p),r.set(u,g)}function h(u){const d=r.get(u);if(d){const f=u.index;f!==null&&d.version<f.version&&c(u)}else c(u);return r.get(u)}return{get:a,update:l,getWireframeAttribute:h}}function A1(n,e,t,i){const s=i.isWebGL2;let r;function o(f){r=f}let a,l;function c(f){a=f.type,l=f.bytesPerElement}function h(f,m){n.drawElements(r,m,a,f*l),t.update(m,r,1)}function u(f,m,y){if(y===0)return;let g,p;if(s)g=n,p="drawElementsInstanced";else if(g=e.get("ANGLE_instanced_arrays"),p="drawElementsInstancedANGLE",g===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}g[p](r,m,a,f*l,y),t.update(m,r,y)}function d(f,m,y){if(y===0)return;const g=e.get("WEBGL_multi_draw");if(g===null)for(let p=0;p<y;p++)this.render(f[p]/l,m[p]);else{g.multiDrawElementsWEBGL(r,m,0,a,f,0,y);let p=0;for(let v=0;v<y;v++)p+=m[v];t.update(p,r,1)}}this.setMode=o,this.setIndex=c,this.render=h,this.renderInstances=u,this.renderMultiDraw=d}function C1(n){const e={geometries:0,textures:0},t={frame:0,calls:0,triangles:0,points:0,lines:0};function i(r,o,a){switch(t.calls++,o){case n.TRIANGLES:t.triangles+=a*(r/3);break;case n.LINES:t.lines+=a*(r/2);break;case n.LINE_STRIP:t.lines+=a*(r-1);break;case n.LINE_LOOP:t.lines+=a*r;break;case n.POINTS:t.points+=a*r;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",o);break}}function s(){t.calls=0,t.triangles=0,t.points=0,t.lines=0}return{memory:e,render:t,programs:null,autoReset:!0,reset:s,update:i}}function R1(n,e){return n[0]-e[0]}function P1(n,e){return Math.abs(e[1])-Math.abs(n[1])}function I1(n,e,t){const i={},s=new Float32Array(8),r=new WeakMap,o=new dt,a=[];for(let c=0;c<8;c++)a[c]=[c,0];function l(c,h,u){const d=c.morphTargetInfluences;if(e.isWebGL2===!0){const m=h.morphAttributes.position||h.morphAttributes.normal||h.morphAttributes.color,y=m!==void 0?m.length:0;let g=r.get(h);if(g===void 0||g.count!==y){let q=function(){de.dispose(),r.delete(h),h.removeEventListener("dispose",q)};var f=q;g!==void 0&&g.texture.dispose();const _=h.morphAttributes.position!==void 0,x=h.morphAttributes.normal!==void 0,P=h.morphAttributes.color!==void 0,M=h.morphAttributes.position||[],A=h.morphAttributes.normal||[],O=h.morphAttributes.color||[];let S=0;_===!0&&(S=1),x===!0&&(S=2),P===!0&&(S=3);let C=h.attributes.position.count*S,G=1;C>e.maxTextureSize&&(G=Math.ceil(C/e.maxTextureSize),C=e.maxTextureSize);const J=new Float32Array(C*G*4*y),de=new mc(J,C,G,y);de.type=Vn,de.needsUpdate=!0;const F=S*4;for(let X=0;X<y;X++){const te=M[X],Q=A[X],re=O[X],he=C*G*4*X;for(let pe=0;pe<te.count;pe++){const ge=pe*F;_===!0&&(o.fromBufferAttribute(te,pe),J[he+ge+0]=o.x,J[he+ge+1]=o.y,J[he+ge+2]=o.z,J[he+ge+3]=0),x===!0&&(o.fromBufferAttribute(Q,pe),J[he+ge+4]=o.x,J[he+ge+5]=o.y,J[he+ge+6]=o.z,J[he+ge+7]=0),P===!0&&(o.fromBufferAttribute(re,pe),J[he+ge+8]=o.x,J[he+ge+9]=o.y,J[he+ge+10]=o.z,J[he+ge+11]=re.itemSize===4?o.w:1)}}g={count:y,texture:de,size:new ue(C,G)},r.set(h,g),h.addEventListener("dispose",q)}let p=0;for(let _=0;_<d.length;_++)p+=d[_];const v=h.morphTargetsRelative?1:1-p;u.getUniforms().setValue(n,"morphTargetBaseInfluence",v),u.getUniforms().setValue(n,"morphTargetInfluences",d),u.getUniforms().setValue(n,"morphTargetsTexture",g.texture,t),u.getUniforms().setValue(n,"morphTargetsTextureSize",g.size)}else{const m=d===void 0?0:d.length;let y=i[h.id];if(y===void 0||y.length!==m){y=[];for(let x=0;x<m;x++)y[x]=[x,0];i[h.id]=y}for(let x=0;x<m;x++){const P=y[x];P[0]=x,P[1]=d[x]}y.sort(P1);for(let x=0;x<8;x++)x<m&&y[x][1]?(a[x][0]=y[x][0],a[x][1]=y[x][1]):(a[x][0]=Number.MAX_SAFE_INTEGER,a[x][1]=0);a.sort(R1);const g=h.morphAttributes.position,p=h.morphAttributes.normal;let v=0;for(let x=0;x<8;x++){const P=a[x],M=P[0],A=P[1];M!==Number.MAX_SAFE_INTEGER&&A?(g&&h.getAttribute("morphTarget"+x)!==g[M]&&h.setAttribute("morphTarget"+x,g[M]),p&&h.getAttribute("morphNormal"+x)!==p[M]&&h.setAttribute("morphNormal"+x,p[M]),s[x]=A,v+=A):(g&&h.hasAttribute("morphTarget"+x)===!0&&h.deleteAttribute("morphTarget"+x),p&&h.hasAttribute("morphNormal"+x)===!0&&h.deleteAttribute("morphNormal"+x),s[x]=0)}const _=h.morphTargetsRelative?1:1-v;u.getUniforms().setValue(n,"morphTargetBaseInfluence",_),u.getUniforms().setValue(n,"morphTargetInfluences",s)}}return{update:l}}function L1(n,e,t,i){let s=new WeakMap;function r(l){const c=i.render.frame,h=l.geometry,u=e.get(l,h);if(s.get(u)!==c&&(e.update(u),s.set(u,c)),l.isInstancedMesh&&(l.hasEventListener("dispose",a)===!1&&l.addEventListener("dispose",a),s.get(l)!==c&&(t.update(l.instanceMatrix,n.ARRAY_BUFFER),l.instanceColor!==null&&t.update(l.instanceColor,n.ARRAY_BUFFER),s.set(l,c))),l.isSkinnedMesh){const d=l.skeleton;s.get(d)!==c&&(d.update(),s.set(d,c))}return u}function o(){s=new WeakMap}function a(l){const c=l.target;c.removeEventListener("dispose",a),t.remove(c.instanceMatrix),c.instanceColor!==null&&t.remove(c.instanceColor)}return{update:r,dispose:o}}class kd extends Nt{constructor(e,t,i,s,r,o,a,l,c,h){if(h=h!==void 0?h:Yi,h!==Yi&&h!==zs)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");i===void 0&&h===Yi&&(i=yi),i===void 0&&h===zs&&(i=$i),super(null,s,r,o,a,l,h,i,c),this.isDepthTexture=!0,this.image={width:e,height:t},this.magFilter=a!==void 0?a:Dt,this.minFilter=l!==void 0?l:Dt,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(e){return super.copy(e),this.compareFunction=e.compareFunction,this}toJSON(e){const t=super.toJSON(e);return this.compareFunction!==null&&(t.compareFunction=this.compareFunction),t}}const f_=new Nt,p_=new kd(1,1);p_.compareFunction=Id;const m_=new mc,g_=new Ud,y_=new aa,Bp=[],zp=[],Vp=new Float32Array(16),Hp=new Float32Array(9),Gp=new Float32Array(4);function qr(n,e,t){const i=n[0];if(i<=0||i>0)return n;const s=e*t;let r=Bp[s];if(r===void 0&&(r=new Float32Array(s),Bp[s]=r),e!==0){i.toArray(r,0);for(let o=1,a=0;o!==e;++o)a+=t,n[o].toArray(r,a)}return r}function Ht(n,e){if(n.length!==e.length)return!1;for(let t=0,i=n.length;t<i;t++)if(n[t]!==e[t])return!1;return!0}function Gt(n,e){for(let t=0,i=e.length;t<i;t++)n[t]=e[t]}function yc(n,e){let t=zp[e];t===void 0&&(t=new Int32Array(e),zp[e]=t);for(let i=0;i!==e;++i)t[i]=n.allocateTextureUnit();return t}function D1(n,e){const t=this.cache;t[0]!==e&&(n.uniform1f(this.addr,e),t[0]=e)}function U1(n,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(n.uniform2f(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Ht(t,e))return;n.uniform2fv(this.addr,e),Gt(t,e)}}function N1(n,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(n.uniform3f(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else if(e.r!==void 0)(t[0]!==e.r||t[1]!==e.g||t[2]!==e.b)&&(n.uniform3f(this.addr,e.r,e.g,e.b),t[0]=e.r,t[1]=e.g,t[2]=e.b);else{if(Ht(t,e))return;n.uniform3fv(this.addr,e),Gt(t,e)}}function O1(n,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(n.uniform4f(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Ht(t,e))return;n.uniform4fv(this.addr,e),Gt(t,e)}}function F1(n,e){const t=this.cache,i=e.elements;if(i===void 0){if(Ht(t,e))return;n.uniformMatrix2fv(this.addr,!1,e),Gt(t,e)}else{if(Ht(t,i))return;Gp.set(i),n.uniformMatrix2fv(this.addr,!1,Gp),Gt(t,i)}}function k1(n,e){const t=this.cache,i=e.elements;if(i===void 0){if(Ht(t,e))return;n.uniformMatrix3fv(this.addr,!1,e),Gt(t,e)}else{if(Ht(t,i))return;Hp.set(i),n.uniformMatrix3fv(this.addr,!1,Hp),Gt(t,i)}}function B1(n,e){const t=this.cache,i=e.elements;if(i===void 0){if(Ht(t,e))return;n.uniformMatrix4fv(this.addr,!1,e),Gt(t,e)}else{if(Ht(t,i))return;Vp.set(i),n.uniformMatrix4fv(this.addr,!1,Vp),Gt(t,i)}}function z1(n,e){const t=this.cache;t[0]!==e&&(n.uniform1i(this.addr,e),t[0]=e)}function V1(n,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(n.uniform2i(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Ht(t,e))return;n.uniform2iv(this.addr,e),Gt(t,e)}}function H1(n,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(n.uniform3i(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(Ht(t,e))return;n.uniform3iv(this.addr,e),Gt(t,e)}}function G1(n,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(n.uniform4i(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Ht(t,e))return;n.uniform4iv(this.addr,e),Gt(t,e)}}function W1(n,e){const t=this.cache;t[0]!==e&&(n.uniform1ui(this.addr,e),t[0]=e)}function q1(n,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y)&&(n.uniform2ui(this.addr,e.x,e.y),t[0]=e.x,t[1]=e.y);else{if(Ht(t,e))return;n.uniform2uiv(this.addr,e),Gt(t,e)}}function X1(n,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z)&&(n.uniform3ui(this.addr,e.x,e.y,e.z),t[0]=e.x,t[1]=e.y,t[2]=e.z);else{if(Ht(t,e))return;n.uniform3uiv(this.addr,e),Gt(t,e)}}function $1(n,e){const t=this.cache;if(e.x!==void 0)(t[0]!==e.x||t[1]!==e.y||t[2]!==e.z||t[3]!==e.w)&&(n.uniform4ui(this.addr,e.x,e.y,e.z,e.w),t[0]=e.x,t[1]=e.y,t[2]=e.z,t[3]=e.w);else{if(Ht(t,e))return;n.uniform4uiv(this.addr,e),Gt(t,e)}}function Y1(n,e,t){const i=this.cache,s=t.allocateTextureUnit();i[0]!==s&&(n.uniform1i(this.addr,s),i[0]=s);const r=this.type===n.SAMPLER_2D_SHADOW?p_:f_;t.setTexture2D(e||r,s)}function j1(n,e,t){const i=this.cache,s=t.allocateTextureUnit();i[0]!==s&&(n.uniform1i(this.addr,s),i[0]=s),t.setTexture3D(e||g_,s)}function Z1(n,e,t){const i=this.cache,s=t.allocateTextureUnit();i[0]!==s&&(n.uniform1i(this.addr,s),i[0]=s),t.setTextureCube(e||y_,s)}function K1(n,e,t){const i=this.cache,s=t.allocateTextureUnit();i[0]!==s&&(n.uniform1i(this.addr,s),i[0]=s),t.setTexture2DArray(e||m_,s)}function J1(n){switch(n){case 5126:return D1;case 35664:return U1;case 35665:return N1;case 35666:return O1;case 35674:return F1;case 35675:return k1;case 35676:return B1;case 5124:case 35670:return z1;case 35667:case 35671:return V1;case 35668:case 35672:return H1;case 35669:case 35673:return G1;case 5125:return W1;case 36294:return q1;case 36295:return X1;case 36296:return $1;case 35678:case 36198:case 36298:case 36306:case 35682:return Y1;case 35679:case 36299:case 36307:return j1;case 35680:case 36300:case 36308:case 36293:return Z1;case 36289:case 36303:case 36311:case 36292:return K1}}function Q1(n,e){n.uniform1fv(this.addr,e)}function eC(n,e){const t=qr(e,this.size,2);n.uniform2fv(this.addr,t)}function tC(n,e){const t=qr(e,this.size,3);n.uniform3fv(this.addr,t)}function nC(n,e){const t=qr(e,this.size,4);n.uniform4fv(this.addr,t)}function iC(n,e){const t=qr(e,this.size,4);n.uniformMatrix2fv(this.addr,!1,t)}function sC(n,e){const t=qr(e,this.size,9);n.uniformMatrix3fv(this.addr,!1,t)}function rC(n,e){const t=qr(e,this.size,16);n.uniformMatrix4fv(this.addr,!1,t)}function oC(n,e){n.uniform1iv(this.addr,e)}function aC(n,e){n.uniform2iv(this.addr,e)}function lC(n,e){n.uniform3iv(this.addr,e)}function cC(n,e){n.uniform4iv(this.addr,e)}function hC(n,e){n.uniform1uiv(this.addr,e)}function uC(n,e){n.uniform2uiv(this.addr,e)}function dC(n,e){n.uniform3uiv(this.addr,e)}function fC(n,e){n.uniform4uiv(this.addr,e)}function pC(n,e,t){const i=this.cache,s=e.length,r=yc(t,s);Ht(i,r)||(n.uniform1iv(this.addr,r),Gt(i,r));for(let o=0;o!==s;++o)t.setTexture2D(e[o]||f_,r[o])}function mC(n,e,t){const i=this.cache,s=e.length,r=yc(t,s);Ht(i,r)||(n.uniform1iv(this.addr,r),Gt(i,r));for(let o=0;o!==s;++o)t.setTexture3D(e[o]||g_,r[o])}function gC(n,e,t){const i=this.cache,s=e.length,r=yc(t,s);Ht(i,r)||(n.uniform1iv(this.addr,r),Gt(i,r));for(let o=0;o!==s;++o)t.setTextureCube(e[o]||y_,r[o])}function yC(n,e,t){const i=this.cache,s=e.length,r=yc(t,s);Ht(i,r)||(n.uniform1iv(this.addr,r),Gt(i,r));for(let o=0;o!==s;++o)t.setTexture2DArray(e[o]||m_,r[o])}function _C(n){switch(n){case 5126:return Q1;case 35664:return eC;case 35665:return tC;case 35666:return nC;case 35674:return iC;case 35675:return sC;case 35676:return rC;case 5124:case 35670:return oC;case 35667:case 35671:return aC;case 35668:case 35672:return lC;case 35669:case 35673:return cC;case 5125:return hC;case 36294:return uC;case 36295:return dC;case 36296:return fC;case 35678:case 36198:case 36298:case 36306:case 35682:return pC;case 35679:case 36299:case 36307:return mC;case 35680:case 36300:case 36308:case 36293:return gC;case 36289:case 36303:case 36311:case 36292:return yC}}class vC{constructor(e,t,i){this.id=e,this.addr=i,this.cache=[],this.type=t.type,this.setValue=J1(t.type)}}class xC{constructor(e,t,i){this.id=e,this.addr=i,this.cache=[],this.type=t.type,this.size=t.size,this.setValue=_C(t.type)}}class bC{constructor(e){this.id=e,this.seq=[],this.map={}}setValue(e,t,i){const s=this.seq;for(let r=0,o=s.length;r!==o;++r){const a=s[r];a.setValue(e,t[a.id],i)}}}const bh=/(\w+)(\])?(\[|\.)?/g;function Wp(n,e){n.seq.push(e),n.map[e.id]=e}function wC(n,e,t){const i=n.name,s=i.length;for(bh.lastIndex=0;;){const r=bh.exec(i),o=bh.lastIndex;let a=r[1];const l=r[2]==="]",c=r[3];if(l&&(a=a|0),c===void 0||c==="["&&o+2===s){Wp(t,c===void 0?new vC(a,n,e):new xC(a,n,e));break}else{let u=t.map[a];u===void 0&&(u=new bC(a),Wp(t,u)),t=u}}}class Tl{constructor(e,t){this.seq=[],this.map={};const i=e.getProgramParameter(t,e.ACTIVE_UNIFORMS);for(let s=0;s<i;++s){const r=e.getActiveUniform(t,s),o=e.getUniformLocation(t,r.name);wC(r,o,this)}}setValue(e,t,i,s){const r=this.map[t];r!==void 0&&r.setValue(e,i,s)}setOptional(e,t,i){const s=t[i];s!==void 0&&this.setValue(e,i,s)}static upload(e,t,i,s){for(let r=0,o=t.length;r!==o;++r){const a=t[r],l=i[a.id];l.needsUpdate!==!1&&a.setValue(e,l.value,s)}}static seqWithValue(e,t){const i=[];for(let s=0,r=e.length;s!==r;++s){const o=e[s];o.id in t&&i.push(o)}return i}}function qp(n,e,t){const i=n.createShader(e);return n.shaderSource(i,t),n.compileShader(i),i}const MC=37297;let SC=0;function EC(n,e){const t=n.split(`
`),i=[],s=Math.max(e-6,0),r=Math.min(e+6,t.length);for(let o=s;o<r;o++){const a=o+1;i.push(`${a===e?">":" "} ${a}: ${t[o]}`)}return i.join(`
`)}function TC(n){const e=ut.getPrimaries(ut.workingColorSpace),t=ut.getPrimaries(n);let i;switch(e===t?i="":e===zo&&t===Bo?i="LinearDisplayP3ToLinearSRGB":e===Bo&&t===zo&&(i="LinearSRGBToLinearDisplayP3"),n){case ri:case sa:return[i,"LinearTransferOETF"];case Ft:case pc:return[i,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space:",n),[i,"LinearTransferOETF"]}}function Xp(n,e,t){const i=n.getShaderParameter(e,n.COMPILE_STATUS),s=n.getShaderInfoLog(e).trim();if(i&&s==="")return"";const r=/ERROR: 0:(\d+)/.exec(s);if(r){const o=parseInt(r[1]);return t.toUpperCase()+`

`+s+`

`+EC(n.getShaderSource(e),o)}else return s}function AC(n,e){const t=TC(e);return`vec4 ${n}( vec4 value ) { return ${t[0]}( ${t[1]}( value ) ); }`}function CC(n,e){let t;switch(e){case Iy:t="Linear";break;case Ly:t="Reinhard";break;case Dy:t="OptimizedCineon";break;case xd:t="ACESFilmic";break;case Ny:t="AgX";break;case Uy:t="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),t="Linear"}return"vec3 "+n+"( vec3 color ) { return "+t+"ToneMapping( color ); }"}function RC(n){return[n.extensionDerivatives||n.envMapCubeUVHeight||n.bumpMap||n.normalMapTangentSpace||n.clearcoatNormalMap||n.flatShading||n.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(n.extensionFragDepth||n.logarithmicDepthBuffer)&&n.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",n.extensionDrawBuffers&&n.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(n.extensionShaderTextureLOD||n.envMap||n.transmission)&&n.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(xr).join(`
`)}function PC(n){return[n.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":""].filter(xr).join(`
`)}function IC(n){const e=[];for(const t in n){const i=n[t];i!==!1&&e.push("#define "+t+" "+i)}return e.join(`
`)}function LC(n,e){const t={},i=n.getProgramParameter(e,n.ACTIVE_ATTRIBUTES);for(let s=0;s<i;s++){const r=n.getActiveAttrib(e,s),o=r.name;let a=1;r.type===n.FLOAT_MAT2&&(a=2),r.type===n.FLOAT_MAT3&&(a=3),r.type===n.FLOAT_MAT4&&(a=4),t[o]={type:r.type,location:n.getAttribLocation(e,o),locationSize:a}}return t}function xr(n){return n!==""}function $p(n,e){const t=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return n.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,t).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Yp(n,e){return n.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const DC=/^[ \t]*#include +<([\w\d./]+)>/gm;function ku(n){return n.replace(DC,NC)}const UC=new Map([["encodings_fragment","colorspace_fragment"],["encodings_pars_fragment","colorspace_pars_fragment"],["output_fragment","opaque_fragment"]]);function NC(n,e){let t=$e[e];if(t===void 0){const i=UC.get(e);if(i!==void 0)t=$e[i],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,i);else throw new Error("Can not resolve #include <"+e+">")}return ku(t)}const OC=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function jp(n){return n.replace(OC,FC)}function FC(n,e,t,i){let s="";for(let r=parseInt(e);r<parseInt(t);r++)s+=i.replace(/\[\s*i\s*\]/g,"[ "+r+" ]").replace(/UNROLLED_LOOP_INDEX/g,r);return s}function Zp(n){let e="precision "+n.precision+` float;
precision `+n.precision+" int;";return n.precision==="highp"?e+=`
#define HIGH_PRECISION`:n.precision==="mediump"?e+=`
#define MEDIUM_PRECISION`:n.precision==="lowp"&&(e+=`
#define LOW_PRECISION`),e}function kC(n){let e="SHADOWMAP_TYPE_BASIC";return n.shadowMapType===_d?e="SHADOWMAP_TYPE_PCF":n.shadowMapType===vd?e="SHADOWMAP_TYPE_PCF_SOFT":n.shadowMapType===Jn&&(e="SHADOWMAP_TYPE_VSM"),e}function BC(n){let e="ENVMAP_TYPE_CUBE";if(n.envMap)switch(n.envMapMode){case Si:case Ki:e="ENVMAP_TYPE_CUBE";break;case Gr:e="ENVMAP_TYPE_CUBE_UV";break}return e}function zC(n){let e="ENVMAP_MODE_REFLECTION";if(n.envMap)switch(n.envMapMode){case Ki:e="ENVMAP_MODE_REFRACTION";break}return e}function VC(n){let e="ENVMAP_BLENDING_NONE";if(n.envMap)switch(n.combine){case ia:e="ENVMAP_BLENDING_MULTIPLY";break;case Ry:e="ENVMAP_BLENDING_MIX";break;case Py:e="ENVMAP_BLENDING_ADD";break}return e}function HC(n){const e=n.envMapCubeUVHeight;if(e===null)return null;const t=Math.log2(e)-2,i=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),7*16)),texelHeight:i,maxMip:t}}function GC(n,e,t,i){const s=n.getContext(),r=t.defines;let o=t.vertexShader,a=t.fragmentShader;const l=kC(t),c=BC(t),h=zC(t),u=VC(t),d=HC(t),f=t.isWebGL2?"":RC(t),m=PC(t),y=IC(r),g=s.createProgram();let p,v,_=t.glslVersion?"#version "+t.glslVersion+`
`:"";t.isRawShaderMaterial?(p=["#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,y].filter(xr).join(`
`),p.length>0&&(p+=`
`),v=[f,"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,y].filter(xr).join(`
`),v.length>0&&(v+=`
`)):(p=[Zp(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,y,t.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",t.batching?"#define USE_BATCHING":"",t.instancing?"#define USE_INSTANCING":"",t.instancingColor?"#define USE_INSTANCING_COLOR":"",t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+h:"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.displacementMap?"#define USE_DISPLACEMENTMAP":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.mapUv?"#define MAP_UV "+t.mapUv:"",t.alphaMapUv?"#define ALPHAMAP_UV "+t.alphaMapUv:"",t.lightMapUv?"#define LIGHTMAP_UV "+t.lightMapUv:"",t.aoMapUv?"#define AOMAP_UV "+t.aoMapUv:"",t.emissiveMapUv?"#define EMISSIVEMAP_UV "+t.emissiveMapUv:"",t.bumpMapUv?"#define BUMPMAP_UV "+t.bumpMapUv:"",t.normalMapUv?"#define NORMALMAP_UV "+t.normalMapUv:"",t.displacementMapUv?"#define DISPLACEMENTMAP_UV "+t.displacementMapUv:"",t.metalnessMapUv?"#define METALNESSMAP_UV "+t.metalnessMapUv:"",t.roughnessMapUv?"#define ROUGHNESSMAP_UV "+t.roughnessMapUv:"",t.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+t.anisotropyMapUv:"",t.clearcoatMapUv?"#define CLEARCOATMAP_UV "+t.clearcoatMapUv:"",t.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+t.clearcoatNormalMapUv:"",t.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+t.clearcoatRoughnessMapUv:"",t.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+t.iridescenceMapUv:"",t.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+t.iridescenceThicknessMapUv:"",t.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+t.sheenColorMapUv:"",t.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+t.sheenRoughnessMapUv:"",t.specularMapUv?"#define SPECULARMAP_UV "+t.specularMapUv:"",t.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+t.specularColorMapUv:"",t.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+t.specularIntensityMapUv:"",t.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+t.transmissionMapUv:"",t.thicknessMapUv?"#define THICKNESSMAP_UV "+t.thicknessMapUv:"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.flatShading?"#define FLAT_SHADED":"",t.skinning?"#define USE_SKINNING":"",t.morphTargets?"#define USE_MORPHTARGETS":"",t.morphNormals&&t.flatShading===!1?"#define USE_MORPHNORMALS":"",t.morphColors&&t.isWebGL2?"#define USE_MORPHCOLORS":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+t.morphTextureStride:"",t.morphTargetsCount>0&&t.isWebGL2?"#define MORPHTARGETS_COUNT "+t.morphTargetsCount:"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.sizeAttenuation?"#define USE_SIZEATTENUATION":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.useLegacyLights?"#define LEGACY_LIGHTS":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","	attribute vec2 uv1;","#endif","#ifdef USE_UV2","	attribute vec2 uv2;","#endif","#ifdef USE_UV3","	attribute vec2 uv3;","#endif","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(xr).join(`
`),v=[f,Zp(t),"#define SHADER_TYPE "+t.shaderType,"#define SHADER_NAME "+t.shaderName,y,t.useFog&&t.fog?"#define USE_FOG":"",t.useFog&&t.fogExp2?"#define FOG_EXP2":"",t.map?"#define USE_MAP":"",t.matcap?"#define USE_MATCAP":"",t.envMap?"#define USE_ENVMAP":"",t.envMap?"#define "+c:"",t.envMap?"#define "+h:"",t.envMap?"#define "+u:"",d?"#define CUBEUV_TEXEL_WIDTH "+d.texelWidth:"",d?"#define CUBEUV_TEXEL_HEIGHT "+d.texelHeight:"",d?"#define CUBEUV_MAX_MIP "+d.maxMip+".0":"",t.lightMap?"#define USE_LIGHTMAP":"",t.aoMap?"#define USE_AOMAP":"",t.bumpMap?"#define USE_BUMPMAP":"",t.normalMap?"#define USE_NORMALMAP":"",t.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",t.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",t.emissiveMap?"#define USE_EMISSIVEMAP":"",t.anisotropy?"#define USE_ANISOTROPY":"",t.anisotropyMap?"#define USE_ANISOTROPYMAP":"",t.clearcoat?"#define USE_CLEARCOAT":"",t.clearcoatMap?"#define USE_CLEARCOATMAP":"",t.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",t.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",t.iridescence?"#define USE_IRIDESCENCE":"",t.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",t.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",t.specularMap?"#define USE_SPECULARMAP":"",t.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",t.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",t.roughnessMap?"#define USE_ROUGHNESSMAP":"",t.metalnessMap?"#define USE_METALNESSMAP":"",t.alphaMap?"#define USE_ALPHAMAP":"",t.alphaTest?"#define USE_ALPHATEST":"",t.alphaHash?"#define USE_ALPHAHASH":"",t.sheen?"#define USE_SHEEN":"",t.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",t.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",t.transmission?"#define USE_TRANSMISSION":"",t.transmissionMap?"#define USE_TRANSMISSIONMAP":"",t.thicknessMap?"#define USE_THICKNESSMAP":"",t.vertexTangents&&t.flatShading===!1?"#define USE_TANGENT":"",t.vertexColors||t.instancingColor?"#define USE_COLOR":"",t.vertexAlphas?"#define USE_COLOR_ALPHA":"",t.vertexUv1s?"#define USE_UV1":"",t.vertexUv2s?"#define USE_UV2":"",t.vertexUv3s?"#define USE_UV3":"",t.pointsUvs?"#define USE_POINTS_UV":"",t.gradientMap?"#define USE_GRADIENTMAP":"",t.flatShading?"#define FLAT_SHADED":"",t.doubleSided?"#define DOUBLE_SIDED":"",t.flipSided?"#define FLIP_SIDED":"",t.shadowMapEnabled?"#define USE_SHADOWMAP":"",t.shadowMapEnabled?"#define "+l:"",t.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",t.numLightProbes>0?"#define USE_LIGHT_PROBES":"",t.useLegacyLights?"#define LEGACY_LIGHTS":"",t.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",t.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",t.logarithmicDepthBuffer&&t.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",t.toneMapping!==bi?"#define TONE_MAPPING":"",t.toneMapping!==bi?$e.tonemapping_pars_fragment:"",t.toneMapping!==bi?CC("toneMapping",t.toneMapping):"",t.dithering?"#define DITHERING":"",t.opaque?"#define OPAQUE":"",$e.colorspace_pars_fragment,AC("linearToOutputTexel",t.outputColorSpace),t.useDepthPacking?"#define DEPTH_PACKING "+t.depthPacking:"",`
`].filter(xr).join(`
`)),o=ku(o),o=$p(o,t),o=Yp(o,t),a=ku(a),a=$p(a,t),a=Yp(a,t),o=jp(o),a=jp(a),t.isWebGL2&&t.isRawShaderMaterial!==!0&&(_=`#version 300 es
`,p=[m,"precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+p,v=["precision mediump sampler2DArray;","#define varying in",t.glslVersion===Nu?"":"layout(location = 0) out highp vec4 pc_fragColor;",t.glslVersion===Nu?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+v);const x=_+p+o,P=_+v+a,M=qp(s,s.VERTEX_SHADER,x),A=qp(s,s.FRAGMENT_SHADER,P);s.attachShader(g,M),s.attachShader(g,A),t.index0AttributeName!==void 0?s.bindAttribLocation(g,0,t.index0AttributeName):t.morphTargets===!0&&s.bindAttribLocation(g,0,"position"),s.linkProgram(g);function O(J){if(n.debug.checkShaderErrors){const de=s.getProgramInfoLog(g).trim(),F=s.getShaderInfoLog(M).trim(),q=s.getShaderInfoLog(A).trim();let X=!0,te=!0;if(s.getProgramParameter(g,s.LINK_STATUS)===!1)if(X=!1,typeof n.debug.onShaderError=="function")n.debug.onShaderError(s,g,M,A);else{const Q=Xp(s,M,"vertex"),re=Xp(s,A,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(g,s.VALIDATE_STATUS)+`

Program Info Log: `+de+`
`+Q+`
`+re)}else de!==""?console.warn("THREE.WebGLProgram: Program Info Log:",de):(F===""||q==="")&&(te=!1);te&&(J.diagnostics={runnable:X,programLog:de,vertexShader:{log:F,prefix:p},fragmentShader:{log:q,prefix:v}})}s.deleteShader(M),s.deleteShader(A),S=new Tl(s,g),C=LC(s,g)}let S;this.getUniforms=function(){return S===void 0&&O(this),S};let C;this.getAttributes=function(){return C===void 0&&O(this),C};let G=t.rendererExtensionParallelShaderCompile===!1;return this.isReady=function(){return G===!1&&(G=s.getProgramParameter(g,MC)),G},this.destroy=function(){i.releaseStatesOfProgram(this),s.deleteProgram(g),this.program=void 0},this.type=t.shaderType,this.name=t.shaderName,this.id=SC++,this.cacheKey=e,this.usedTimes=1,this.program=g,this.vertexShader=M,this.fragmentShader=A,this}let WC=0;class qC{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(e){const t=e.vertexShader,i=e.fragmentShader,s=this._getShaderStage(t),r=this._getShaderStage(i),o=this._getShaderCacheForMaterial(e);return o.has(s)===!1&&(o.add(s),s.usedTimes++),o.has(r)===!1&&(o.add(r),r.usedTimes++),this}remove(e){const t=this.materialCache.get(e);for(const i of t)i.usedTimes--,i.usedTimes===0&&this.shaderCache.delete(i.code);return this.materialCache.delete(e),this}getVertexShaderID(e){return this._getShaderStage(e.vertexShader).id}getFragmentShaderID(e){return this._getShaderStage(e.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(e){const t=this.materialCache;let i=t.get(e);return i===void 0&&(i=new Set,t.set(e,i)),i}_getShaderStage(e){const t=this.shaderCache;let i=t.get(e);return i===void 0&&(i=new XC(e),t.set(e,i)),i}}class XC{constructor(e){this.id=WC++,this.code=e,this.usedTimes=0}}function $C(n,e,t,i,s,r,o){const a=new gc,l=new qC,c=[],h=s.isWebGL2,u=s.logarithmicDepthBuffer,d=s.vertexTextures;let f=s.precision;const m={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function y(S){return S===0?"uv":`uv${S}`}function g(S,C,G,J,de){const F=J.fog,q=de.geometry,X=S.isMeshStandardMaterial?J.environment:null,te=(S.isMeshStandardMaterial?t:e).get(S.envMap||X),Q=te&&te.mapping===Gr?te.image.height:null,re=m[S.type];S.precision!==null&&(f=s.getMaxPrecision(S.precision),f!==S.precision&&console.warn("THREE.WebGLProgram.getParameters:",S.precision,"not supported, using",f,"instead."));const he=q.morphAttributes.position||q.morphAttributes.normal||q.morphAttributes.color,pe=he!==void 0?he.length:0;let ge=0;q.morphAttributes.position!==void 0&&(ge=1),q.morphAttributes.normal!==void 0&&(ge=2),q.morphAttributes.color!==void 0&&(ge=3);let ne,fe,be,Me;if(re){const an=Bn[re];ne=an.vertexShader,fe=an.fragmentShader}else ne=S.vertexShader,fe=S.fragmentShader,l.update(S),be=l.getVertexShaderID(S),Me=l.getFragmentShaderID(S);const z=n.getRenderTarget(),le=de.isInstancedMesh===!0,oe=de.isBatchedMesh===!0,ae=!!S.map,we=!!S.matcap,L=!!te,E=!!S.aoMap,T=!!S.lightMap,U=!!S.bumpMap,N=!!S.normalMap,V=!!S.displacementMap,$=!!S.emissiveMap,w=!!S.metalnessMap,b=!!S.roughnessMap,D=S.anisotropy>0,B=S.clearcoat>0,H=S.iridescence>0,Y=S.sheen>0,ce=S.transmission>0,ie=D&&!!S.anisotropyMap,me=B&&!!S.clearcoatMap,xe=B&&!!S.clearcoatNormalMap,Ce=B&&!!S.clearcoatRoughnessMap,se=H&&!!S.iridescenceMap,He=H&&!!S.iridescenceThicknessMap,Ve=Y&&!!S.sheenColorMap,Fe=Y&&!!S.sheenRoughnessMap,Ie=!!S.specularMap,Re=!!S.specularColorMap,De=!!S.specularIntensityMap,Ze=ce&&!!S.transmissionMap,_t=ce&&!!S.thicknessMap,tt=!!S.gradientMap,ve=!!S.alphaMap,k=S.alphaTest>0,Se=!!S.alphaHash,Ee=!!S.extensions,ke=!!q.attributes.uv1,Ue=!!q.attributes.uv2,pt=!!q.attributes.uv3;let mt=bi;return S.toneMapped&&(z===null||z.isXRRenderTarget===!0)&&(mt=n.toneMapping),{isWebGL2:h,shaderID:re,shaderType:S.type,shaderName:S.name,vertexShader:ne,fragmentShader:fe,defines:S.defines,customVertexShaderID:be,customFragmentShaderID:Me,isRawShaderMaterial:S.isRawShaderMaterial===!0,glslVersion:S.glslVersion,precision:f,batching:oe,instancing:le,instancingColor:le&&de.instanceColor!==null,supportsVertexTextures:d,outputColorSpace:z===null?n.outputColorSpace:z.isXRRenderTarget===!0?z.texture.colorSpace:ri,map:ae,matcap:we,envMap:L,envMapMode:L&&te.mapping,envMapCubeUVHeight:Q,aoMap:E,lightMap:T,bumpMap:U,normalMap:N,displacementMap:d&&V,emissiveMap:$,normalMapObjectSpace:N&&S.normalMapType===Zy,normalMapTangentSpace:N&&S.normalMapType===ns,metalnessMap:w,roughnessMap:b,anisotropy:D,anisotropyMap:ie,clearcoat:B,clearcoatMap:me,clearcoatNormalMap:xe,clearcoatRoughnessMap:Ce,iridescence:H,iridescenceMap:se,iridescenceThicknessMap:He,sheen:Y,sheenColorMap:Ve,sheenRoughnessMap:Fe,specularMap:Ie,specularColorMap:Re,specularIntensityMap:De,transmission:ce,transmissionMap:Ze,thicknessMap:_t,gradientMap:tt,opaque:S.transparent===!1&&S.blending===Ns,alphaMap:ve,alphaTest:k,alphaHash:Se,combine:S.combine,mapUv:ae&&y(S.map.channel),aoMapUv:E&&y(S.aoMap.channel),lightMapUv:T&&y(S.lightMap.channel),bumpMapUv:U&&y(S.bumpMap.channel),normalMapUv:N&&y(S.normalMap.channel),displacementMapUv:V&&y(S.displacementMap.channel),emissiveMapUv:$&&y(S.emissiveMap.channel),metalnessMapUv:w&&y(S.metalnessMap.channel),roughnessMapUv:b&&y(S.roughnessMap.channel),anisotropyMapUv:ie&&y(S.anisotropyMap.channel),clearcoatMapUv:me&&y(S.clearcoatMap.channel),clearcoatNormalMapUv:xe&&y(S.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:Ce&&y(S.clearcoatRoughnessMap.channel),iridescenceMapUv:se&&y(S.iridescenceMap.channel),iridescenceThicknessMapUv:He&&y(S.iridescenceThicknessMap.channel),sheenColorMapUv:Ve&&y(S.sheenColorMap.channel),sheenRoughnessMapUv:Fe&&y(S.sheenRoughnessMap.channel),specularMapUv:Ie&&y(S.specularMap.channel),specularColorMapUv:Re&&y(S.specularColorMap.channel),specularIntensityMapUv:De&&y(S.specularIntensityMap.channel),transmissionMapUv:Ze&&y(S.transmissionMap.channel),thicknessMapUv:_t&&y(S.thicknessMap.channel),alphaMapUv:ve&&y(S.alphaMap.channel),vertexTangents:!!q.attributes.tangent&&(N||D),vertexColors:S.vertexColors,vertexAlphas:S.vertexColors===!0&&!!q.attributes.color&&q.attributes.color.itemSize===4,vertexUv1s:ke,vertexUv2s:Ue,vertexUv3s:pt,pointsUvs:de.isPoints===!0&&!!q.attributes.uv&&(ae||ve),fog:!!F,useFog:S.fog===!0,fogExp2:F&&F.isFogExp2,flatShading:S.flatShading===!0,sizeAttenuation:S.sizeAttenuation===!0,logarithmicDepthBuffer:u,skinning:de.isSkinnedMesh===!0,morphTargets:q.morphAttributes.position!==void 0,morphNormals:q.morphAttributes.normal!==void 0,morphColors:q.morphAttributes.color!==void 0,morphTargetsCount:pe,morphTextureStride:ge,numDirLights:C.directional.length,numPointLights:C.point.length,numSpotLights:C.spot.length,numSpotLightMaps:C.spotLightMap.length,numRectAreaLights:C.rectArea.length,numHemiLights:C.hemi.length,numDirLightShadows:C.directionalShadowMap.length,numPointLightShadows:C.pointShadowMap.length,numSpotLightShadows:C.spotShadowMap.length,numSpotLightShadowsWithMaps:C.numSpotLightShadowsWithMaps,numLightProbes:C.numLightProbes,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,dithering:S.dithering,shadowMapEnabled:n.shadowMap.enabled&&G.length>0,shadowMapType:n.shadowMap.type,toneMapping:mt,useLegacyLights:n._useLegacyLights,decodeVideoTexture:ae&&S.map.isVideoTexture===!0&&ut.getTransfer(S.map.colorSpace)===yt,premultipliedAlpha:S.premultipliedAlpha,doubleSided:S.side===ti,flipSided:S.side===dn,useDepthPacking:S.depthPacking>=0,depthPacking:S.depthPacking||0,index0AttributeName:S.index0AttributeName,extensionDerivatives:Ee&&S.extensions.derivatives===!0,extensionFragDepth:Ee&&S.extensions.fragDepth===!0,extensionDrawBuffers:Ee&&S.extensions.drawBuffers===!0,extensionShaderTextureLOD:Ee&&S.extensions.shaderTextureLOD===!0,extensionClipCullDistance:Ee&&S.extensions.clipCullDistance&&i.has("WEBGL_clip_cull_distance"),rendererExtensionFragDepth:h||i.has("EXT_frag_depth"),rendererExtensionDrawBuffers:h||i.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:h||i.has("EXT_shader_texture_lod"),rendererExtensionParallelShaderCompile:i.has("KHR_parallel_shader_compile"),customProgramCacheKey:S.customProgramCacheKey()}}function p(S){const C=[];if(S.shaderID?C.push(S.shaderID):(C.push(S.customVertexShaderID),C.push(S.customFragmentShaderID)),S.defines!==void 0)for(const G in S.defines)C.push(G),C.push(S.defines[G]);return S.isRawShaderMaterial===!1&&(v(C,S),_(C,S),C.push(n.outputColorSpace)),C.push(S.customProgramCacheKey),C.join()}function v(S,C){S.push(C.precision),S.push(C.outputColorSpace),S.push(C.envMapMode),S.push(C.envMapCubeUVHeight),S.push(C.mapUv),S.push(C.alphaMapUv),S.push(C.lightMapUv),S.push(C.aoMapUv),S.push(C.bumpMapUv),S.push(C.normalMapUv),S.push(C.displacementMapUv),S.push(C.emissiveMapUv),S.push(C.metalnessMapUv),S.push(C.roughnessMapUv),S.push(C.anisotropyMapUv),S.push(C.clearcoatMapUv),S.push(C.clearcoatNormalMapUv),S.push(C.clearcoatRoughnessMapUv),S.push(C.iridescenceMapUv),S.push(C.iridescenceThicknessMapUv),S.push(C.sheenColorMapUv),S.push(C.sheenRoughnessMapUv),S.push(C.specularMapUv),S.push(C.specularColorMapUv),S.push(C.specularIntensityMapUv),S.push(C.transmissionMapUv),S.push(C.thicknessMapUv),S.push(C.combine),S.push(C.fogExp2),S.push(C.sizeAttenuation),S.push(C.morphTargetsCount),S.push(C.morphAttributeCount),S.push(C.numDirLights),S.push(C.numPointLights),S.push(C.numSpotLights),S.push(C.numSpotLightMaps),S.push(C.numHemiLights),S.push(C.numRectAreaLights),S.push(C.numDirLightShadows),S.push(C.numPointLightShadows),S.push(C.numSpotLightShadows),S.push(C.numSpotLightShadowsWithMaps),S.push(C.numLightProbes),S.push(C.shadowMapType),S.push(C.toneMapping),S.push(C.numClippingPlanes),S.push(C.numClipIntersection),S.push(C.depthPacking)}function _(S,C){a.disableAll(),C.isWebGL2&&a.enable(0),C.supportsVertexTextures&&a.enable(1),C.instancing&&a.enable(2),C.instancingColor&&a.enable(3),C.matcap&&a.enable(4),C.envMap&&a.enable(5),C.normalMapObjectSpace&&a.enable(6),C.normalMapTangentSpace&&a.enable(7),C.clearcoat&&a.enable(8),C.iridescence&&a.enable(9),C.alphaTest&&a.enable(10),C.vertexColors&&a.enable(11),C.vertexAlphas&&a.enable(12),C.vertexUv1s&&a.enable(13),C.vertexUv2s&&a.enable(14),C.vertexUv3s&&a.enable(15),C.vertexTangents&&a.enable(16),C.anisotropy&&a.enable(17),C.alphaHash&&a.enable(18),C.batching&&a.enable(19),S.push(a.mask),a.disableAll(),C.fog&&a.enable(0),C.useFog&&a.enable(1),C.flatShading&&a.enable(2),C.logarithmicDepthBuffer&&a.enable(3),C.skinning&&a.enable(4),C.morphTargets&&a.enable(5),C.morphNormals&&a.enable(6),C.morphColors&&a.enable(7),C.premultipliedAlpha&&a.enable(8),C.shadowMapEnabled&&a.enable(9),C.useLegacyLights&&a.enable(10),C.doubleSided&&a.enable(11),C.flipSided&&a.enable(12),C.useDepthPacking&&a.enable(13),C.dithering&&a.enable(14),C.transmission&&a.enable(15),C.sheen&&a.enable(16),C.opaque&&a.enable(17),C.pointsUvs&&a.enable(18),C.decodeVideoTexture&&a.enable(19),S.push(a.mask)}function x(S){const C=m[S.type];let G;if(C){const J=Bn[C];G=c_.clone(J.uniforms)}else G=S.uniforms;return G}function P(S,C){let G;for(let J=0,de=c.length;J<de;J++){const F=c[J];if(F.cacheKey===C){G=F,++G.usedTimes;break}}return G===void 0&&(G=new GC(n,C,S,r),c.push(G)),G}function M(S){if(--S.usedTimes===0){const C=c.indexOf(S);c[C]=c[c.length-1],c.pop(),S.destroy()}}function A(S){l.remove(S)}function O(){l.dispose()}return{getParameters:g,getProgramCacheKey:p,getUniforms:x,acquireProgram:P,releaseProgram:M,releaseShaderCache:A,programs:c,dispose:O}}function YC(){let n=new WeakMap;function e(r){let o=n.get(r);return o===void 0&&(o={},n.set(r,o)),o}function t(r){n.delete(r)}function i(r,o,a){n.get(r)[o]=a}function s(){n=new WeakMap}return{get:e,remove:t,update:i,dispose:s}}function jC(n,e){return n.groupOrder!==e.groupOrder?n.groupOrder-e.groupOrder:n.renderOrder!==e.renderOrder?n.renderOrder-e.renderOrder:n.material.id!==e.material.id?n.material.id-e.material.id:n.z!==e.z?n.z-e.z:n.id-e.id}function Kp(n,e){return n.groupOrder!==e.groupOrder?n.groupOrder-e.groupOrder:n.renderOrder!==e.renderOrder?n.renderOrder-e.renderOrder:n.z!==e.z?e.z-n.z:n.id-e.id}function Jp(){const n=[];let e=0;const t=[],i=[],s=[];function r(){e=0,t.length=0,i.length=0,s.length=0}function o(u,d,f,m,y,g){let p=n[e];return p===void 0?(p={id:u.id,object:u,geometry:d,material:f,groupOrder:m,renderOrder:u.renderOrder,z:y,group:g},n[e]=p):(p.id=u.id,p.object=u,p.geometry=d,p.material=f,p.groupOrder=m,p.renderOrder=u.renderOrder,p.z=y,p.group=g),e++,p}function a(u,d,f,m,y,g){const p=o(u,d,f,m,y,g);f.transmission>0?i.push(p):f.transparent===!0?s.push(p):t.push(p)}function l(u,d,f,m,y,g){const p=o(u,d,f,m,y,g);f.transmission>0?i.unshift(p):f.transparent===!0?s.unshift(p):t.unshift(p)}function c(u,d){t.length>1&&t.sort(u||jC),i.length>1&&i.sort(d||Kp),s.length>1&&s.sort(d||Kp)}function h(){for(let u=e,d=n.length;u<d;u++){const f=n[u];if(f.id===null)break;f.id=null,f.object=null,f.geometry=null,f.material=null,f.group=null}}return{opaque:t,transmissive:i,transparent:s,init:r,push:a,unshift:l,finish:h,sort:c}}function ZC(){let n=new WeakMap;function e(i,s){const r=n.get(i);let o;return r===void 0?(o=new Jp,n.set(i,[o])):s>=r.length?(o=new Jp,r.push(o)):o=r[s],o}function t(){n=new WeakMap}return{get:e,dispose:t}}function KC(){const n={};return{get:function(e){if(n[e.id]!==void 0)return n[e.id];let t;switch(e.type){case"DirectionalLight":t={direction:new I,color:new Te};break;case"SpotLight":t={position:new I,direction:new I,color:new Te,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":t={position:new I,color:new Te,distance:0,decay:0};break;case"HemisphereLight":t={direction:new I,skyColor:new Te,groundColor:new Te};break;case"RectAreaLight":t={color:new Te,position:new I,halfWidth:new I,halfHeight:new I};break}return n[e.id]=t,t}}}function JC(){const n={};return{get:function(e){if(n[e.id]!==void 0)return n[e.id];let t;switch(e.type){case"DirectionalLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ue};break;case"SpotLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ue};break;case"PointLight":t={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new ue,shadowCameraNear:1,shadowCameraFar:1e3};break}return n[e.id]=t,t}}}let QC=0;function eR(n,e){return(e.castShadow?2:0)-(n.castShadow?2:0)+(e.map?1:0)-(n.map?1:0)}function tR(n,e){const t=new KC,i=JC(),s={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let h=0;h<9;h++)s.probe.push(new I);const r=new I,o=new Oe,a=new Oe;function l(h,u){let d=0,f=0,m=0;for(let J=0;J<9;J++)s.probe[J].set(0,0,0);let y=0,g=0,p=0,v=0,_=0,x=0,P=0,M=0,A=0,O=0,S=0;h.sort(eR);const C=u===!0?Math.PI:1;for(let J=0,de=h.length;J<de;J++){const F=h[J],q=F.color,X=F.intensity,te=F.distance,Q=F.shadow&&F.shadow.map?F.shadow.map.texture:null;if(F.isAmbientLight)d+=q.r*X*C,f+=q.g*X*C,m+=q.b*X*C;else if(F.isLightProbe){for(let re=0;re<9;re++)s.probe[re].addScaledVector(F.sh.coefficients[re],X);S++}else if(F.isDirectionalLight){const re=t.get(F);if(re.color.copy(F.color).multiplyScalar(F.intensity*C),F.castShadow){const he=F.shadow,pe=i.get(F);pe.shadowBias=he.bias,pe.shadowNormalBias=he.normalBias,pe.shadowRadius=he.radius,pe.shadowMapSize=he.mapSize,s.directionalShadow[y]=pe,s.directionalShadowMap[y]=Q,s.directionalShadowMatrix[y]=F.shadow.matrix,x++}s.directional[y]=re,y++}else if(F.isSpotLight){const re=t.get(F);re.position.setFromMatrixPosition(F.matrixWorld),re.color.copy(q).multiplyScalar(X*C),re.distance=te,re.coneCos=Math.cos(F.angle),re.penumbraCos=Math.cos(F.angle*(1-F.penumbra)),re.decay=F.decay,s.spot[p]=re;const he=F.shadow;if(F.map&&(s.spotLightMap[A]=F.map,A++,he.updateMatrices(F),F.castShadow&&O++),s.spotLightMatrix[p]=he.matrix,F.castShadow){const pe=i.get(F);pe.shadowBias=he.bias,pe.shadowNormalBias=he.normalBias,pe.shadowRadius=he.radius,pe.shadowMapSize=he.mapSize,s.spotShadow[p]=pe,s.spotShadowMap[p]=Q,M++}p++}else if(F.isRectAreaLight){const re=t.get(F);re.color.copy(q).multiplyScalar(X),re.halfWidth.set(F.width*.5,0,0),re.halfHeight.set(0,F.height*.5,0),s.rectArea[v]=re,v++}else if(F.isPointLight){const re=t.get(F);if(re.color.copy(F.color).multiplyScalar(F.intensity*C),re.distance=F.distance,re.decay=F.decay,F.castShadow){const he=F.shadow,pe=i.get(F);pe.shadowBias=he.bias,pe.shadowNormalBias=he.normalBias,pe.shadowRadius=he.radius,pe.shadowMapSize=he.mapSize,pe.shadowCameraNear=he.camera.near,pe.shadowCameraFar=he.camera.far,s.pointShadow[g]=pe,s.pointShadowMap[g]=Q,s.pointShadowMatrix[g]=F.shadow.matrix,P++}s.point[g]=re,g++}else if(F.isHemisphereLight){const re=t.get(F);re.skyColor.copy(F.color).multiplyScalar(X*C),re.groundColor.copy(F.groundColor).multiplyScalar(X*C),s.hemi[_]=re,_++}}v>0&&(e.isWebGL2?n.has("OES_texture_float_linear")===!0?(s.rectAreaLTC1=_e.LTC_FLOAT_1,s.rectAreaLTC2=_e.LTC_FLOAT_2):(s.rectAreaLTC1=_e.LTC_HALF_1,s.rectAreaLTC2=_e.LTC_HALF_2):n.has("OES_texture_float_linear")===!0?(s.rectAreaLTC1=_e.LTC_FLOAT_1,s.rectAreaLTC2=_e.LTC_FLOAT_2):n.has("OES_texture_half_float_linear")===!0?(s.rectAreaLTC1=_e.LTC_HALF_1,s.rectAreaLTC2=_e.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),s.ambient[0]=d,s.ambient[1]=f,s.ambient[2]=m;const G=s.hash;(G.directionalLength!==y||G.pointLength!==g||G.spotLength!==p||G.rectAreaLength!==v||G.hemiLength!==_||G.numDirectionalShadows!==x||G.numPointShadows!==P||G.numSpotShadows!==M||G.numSpotMaps!==A||G.numLightProbes!==S)&&(s.directional.length=y,s.spot.length=p,s.rectArea.length=v,s.point.length=g,s.hemi.length=_,s.directionalShadow.length=x,s.directionalShadowMap.length=x,s.pointShadow.length=P,s.pointShadowMap.length=P,s.spotShadow.length=M,s.spotShadowMap.length=M,s.directionalShadowMatrix.length=x,s.pointShadowMatrix.length=P,s.spotLightMatrix.length=M+A-O,s.spotLightMap.length=A,s.numSpotLightShadowsWithMaps=O,s.numLightProbes=S,G.directionalLength=y,G.pointLength=g,G.spotLength=p,G.rectAreaLength=v,G.hemiLength=_,G.numDirectionalShadows=x,G.numPointShadows=P,G.numSpotShadows=M,G.numSpotMaps=A,G.numLightProbes=S,s.version=QC++)}function c(h,u){let d=0,f=0,m=0,y=0,g=0;const p=u.matrixWorldInverse;for(let v=0,_=h.length;v<_;v++){const x=h[v];if(x.isDirectionalLight){const P=s.directional[d];P.direction.setFromMatrixPosition(x.matrixWorld),r.setFromMatrixPosition(x.target.matrixWorld),P.direction.sub(r),P.direction.transformDirection(p),d++}else if(x.isSpotLight){const P=s.spot[m];P.position.setFromMatrixPosition(x.matrixWorld),P.position.applyMatrix4(p),P.direction.setFromMatrixPosition(x.matrixWorld),r.setFromMatrixPosition(x.target.matrixWorld),P.direction.sub(r),P.direction.transformDirection(p),m++}else if(x.isRectAreaLight){const P=s.rectArea[y];P.position.setFromMatrixPosition(x.matrixWorld),P.position.applyMatrix4(p),a.identity(),o.copy(x.matrixWorld),o.premultiply(p),a.extractRotation(o),P.halfWidth.set(x.width*.5,0,0),P.halfHeight.set(0,x.height*.5,0),P.halfWidth.applyMatrix4(a),P.halfHeight.applyMatrix4(a),y++}else if(x.isPointLight){const P=s.point[f];P.position.setFromMatrixPosition(x.matrixWorld),P.position.applyMatrix4(p),f++}else if(x.isHemisphereLight){const P=s.hemi[g];P.direction.setFromMatrixPosition(x.matrixWorld),P.direction.transformDirection(p),g++}}}return{setup:l,setupView:c,state:s}}function Qp(n,e){const t=new tR(n,e),i=[],s=[];function r(){i.length=0,s.length=0}function o(u){i.push(u)}function a(u){s.push(u)}function l(u){t.setup(i,u)}function c(u){t.setupView(i,u)}return{init:r,state:{lightsArray:i,shadowsArray:s,lights:t},setupLights:l,setupLightsView:c,pushLight:o,pushShadow:a}}function nR(n,e){let t=new WeakMap;function i(r,o=0){const a=t.get(r);let l;return a===void 0?(l=new Qp(n,e),t.set(r,[l])):o>=a.length?(l=new Qp(n,e),a.push(l)):l=a[o],l}function s(){t=new WeakMap}return{get:i,dispose:s}}class Bd extends on{constructor(e){super(),this.isMeshDepthMaterial=!0,this.type="MeshDepthMaterial",this.depthPacking=Yy,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(e)}copy(e){return super.copy(e),this.depthPacking=e.depthPacking,this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this}}class zd extends on{constructor(e){super(),this.isMeshDistanceMaterial=!0,this.type="MeshDistanceMaterial",this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(e)}copy(e){return super.copy(e),this.map=e.map,this.alphaMap=e.alphaMap,this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this}}const iR=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,sR=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function rR(n,e,t){let i=new la;const s=new ue,r=new ue,o=new dt,a=new Bd({depthPacking:jy}),l=new zd,c={},h=t.maxTextureSize,u={[Mi]:dn,[dn]:Mi,[ti]:ti},d=new oi({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new ue},radius:{value:4}},vertexShader:iR,fragmentShader:sR}),f=d.clone();f.defines.HORIZONTAL_PASS=1;const m=new Je;m.setAttribute("position",new ct(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const y=new zt(m,d),g=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=_d;let p=this.type;this.render=function(M,A,O){if(g.enabled===!1||g.autoUpdate===!1&&g.needsUpdate===!1||M.length===0)return;const S=n.getRenderTarget(),C=n.getActiveCubeFace(),G=n.getActiveMipmapLevel(),J=n.state;J.setBlending(xi),J.buffers.color.setClear(1,1,1,1),J.buffers.depth.setTest(!0),J.setScissorTest(!1);const de=p!==Jn&&this.type===Jn,F=p===Jn&&this.type!==Jn;for(let q=0,X=M.length;q<X;q++){const te=M[q],Q=te.shadow;if(Q===void 0){console.warn("THREE.WebGLShadowMap:",te,"has no shadow.");continue}if(Q.autoUpdate===!1&&Q.needsUpdate===!1)continue;s.copy(Q.mapSize);const re=Q.getFrameExtents();if(s.multiply(re),r.copy(Q.mapSize),(s.x>h||s.y>h)&&(s.x>h&&(r.x=Math.floor(h/re.x),s.x=r.x*re.x,Q.mapSize.x=r.x),s.y>h&&(r.y=Math.floor(h/re.y),s.y=r.y*re.y,Q.mapSize.y=r.y)),Q.map===null||de===!0||F===!0){const pe=this.type!==Jn?{minFilter:Dt,magFilter:Dt}:{};Q.map!==null&&Q.map.dispose(),Q.map=new $n(s.x,s.y,pe),Q.map.texture.name=te.name+".shadowMap",Q.camera.updateProjectionMatrix()}n.setRenderTarget(Q.map),n.clear();const he=Q.getViewportCount();for(let pe=0;pe<he;pe++){const ge=Q.getViewport(pe);o.set(r.x*ge.x,r.y*ge.y,r.x*ge.z,r.y*ge.w),J.viewport(o),Q.updateMatrices(te,pe),i=Q.getFrustum(),x(A,O,Q.camera,te,this.type)}Q.isPointLightShadow!==!0&&this.type===Jn&&v(Q,O),Q.needsUpdate=!1}p=this.type,g.needsUpdate=!1,n.setRenderTarget(S,C,G)};function v(M,A){const O=e.update(y);d.defines.VSM_SAMPLES!==M.blurSamples&&(d.defines.VSM_SAMPLES=M.blurSamples,f.defines.VSM_SAMPLES=M.blurSamples,d.needsUpdate=!0,f.needsUpdate=!0),M.mapPass===null&&(M.mapPass=new $n(s.x,s.y)),d.uniforms.shadow_pass.value=M.map.texture,d.uniforms.resolution.value=M.mapSize,d.uniforms.radius.value=M.radius,n.setRenderTarget(M.mapPass),n.clear(),n.renderBufferDirect(A,null,O,d,y,null),f.uniforms.shadow_pass.value=M.mapPass.texture,f.uniforms.resolution.value=M.mapSize,f.uniforms.radius.value=M.radius,n.setRenderTarget(M.map),n.clear(),n.renderBufferDirect(A,null,O,f,y,null)}function _(M,A,O,S){let C=null;const G=O.isPointLight===!0?M.customDistanceMaterial:M.customDepthMaterial;if(G!==void 0)C=G;else if(C=O.isPointLight===!0?l:a,n.localClippingEnabled&&A.clipShadows===!0&&Array.isArray(A.clippingPlanes)&&A.clippingPlanes.length!==0||A.displacementMap&&A.displacementScale!==0||A.alphaMap&&A.alphaTest>0||A.map&&A.alphaTest>0){const J=C.uuid,de=A.uuid;let F=c[J];F===void 0&&(F={},c[J]=F);let q=F[de];q===void 0&&(q=C.clone(),F[de]=q,A.addEventListener("dispose",P)),C=q}if(C.visible=A.visible,C.wireframe=A.wireframe,S===Jn?C.side=A.shadowSide!==null?A.shadowSide:A.side:C.side=A.shadowSide!==null?A.shadowSide:u[A.side],C.alphaMap=A.alphaMap,C.alphaTest=A.alphaTest,C.map=A.map,C.clipShadows=A.clipShadows,C.clippingPlanes=A.clippingPlanes,C.clipIntersection=A.clipIntersection,C.displacementMap=A.displacementMap,C.displacementScale=A.displacementScale,C.displacementBias=A.displacementBias,C.wireframeLinewidth=A.wireframeLinewidth,C.linewidth=A.linewidth,O.isPointLight===!0&&C.isMeshDistanceMaterial===!0){const J=n.properties.get(C);J.light=O}return C}function x(M,A,O,S,C){if(M.visible===!1)return;if(M.layers.test(A.layers)&&(M.isMesh||M.isLine||M.isPoints)&&(M.castShadow||M.receiveShadow&&C===Jn)&&(!M.frustumCulled||i.intersectsObject(M))){M.modelViewMatrix.multiplyMatrices(O.matrixWorldInverse,M.matrixWorld);const de=e.update(M),F=M.material;if(Array.isArray(F)){const q=de.groups;for(let X=0,te=q.length;X<te;X++){const Q=q[X],re=F[Q.materialIndex];if(re&&re.visible){const he=_(M,re,S,C);M.onBeforeShadow(n,M,A,O,de,he,Q),n.renderBufferDirect(O,null,de,he,M,Q),M.onAfterShadow(n,M,A,O,de,he,Q)}}}else if(F.visible){const q=_(M,F,S,C);M.onBeforeShadow(n,M,A,O,de,q,null),n.renderBufferDirect(O,null,de,q,M,null),M.onAfterShadow(n,M,A,O,de,q,null)}}const J=M.children;for(let de=0,F=J.length;de<F;de++)x(J[de],A,O,S,C)}function P(M){M.target.removeEventListener("dispose",P);for(const O in c){const S=c[O],C=M.target.uuid;C in S&&(S[C].dispose(),delete S[C])}}}function oR(n,e,t){const i=t.isWebGL2;function s(){let k=!1;const Se=new dt;let Ee=null;const ke=new dt(0,0,0,0);return{setMask:function(Ue){Ee!==Ue&&!k&&(n.colorMask(Ue,Ue,Ue,Ue),Ee=Ue)},setLocked:function(Ue){k=Ue},setClear:function(Ue,pt,mt,Wt,an){an===!0&&(Ue*=Wt,pt*=Wt,mt*=Wt),Se.set(Ue,pt,mt,Wt),ke.equals(Se)===!1&&(n.clearColor(Ue,pt,mt,Wt),ke.copy(Se))},reset:function(){k=!1,Ee=null,ke.set(-1,0,0,0)}}}function r(){let k=!1,Se=null,Ee=null,ke=null;return{setTest:function(Ue){Ue?oe(n.DEPTH_TEST):ae(n.DEPTH_TEST)},setMask:function(Ue){Se!==Ue&&!k&&(n.depthMask(Ue),Se=Ue)},setFunc:function(Ue){if(Ee!==Ue){switch(Ue){case wy:n.depthFunc(n.NEVER);break;case My:n.depthFunc(n.ALWAYS);break;case Sy:n.depthFunc(n.LESS);break;case Po:n.depthFunc(n.LEQUAL);break;case Ey:n.depthFunc(n.EQUAL);break;case Ty:n.depthFunc(n.GEQUAL);break;case Ay:n.depthFunc(n.GREATER);break;case Cy:n.depthFunc(n.NOTEQUAL);break;default:n.depthFunc(n.LEQUAL)}Ee=Ue}},setLocked:function(Ue){k=Ue},setClear:function(Ue){ke!==Ue&&(n.clearDepth(Ue),ke=Ue)},reset:function(){k=!1,Se=null,Ee=null,ke=null}}}function o(){let k=!1,Se=null,Ee=null,ke=null,Ue=null,pt=null,mt=null,Wt=null,an=null;return{setTest:function(gt){k||(gt?oe(n.STENCIL_TEST):ae(n.STENCIL_TEST))},setMask:function(gt){Se!==gt&&!k&&(n.stencilMask(gt),Se=gt)},setFunc:function(gt,ln,Zn){(Ee!==gt||ke!==ln||Ue!==Zn)&&(n.stencilFunc(gt,ln,Zn),Ee=gt,ke=ln,Ue=Zn)},setOp:function(gt,ln,Zn){(pt!==gt||mt!==ln||Wt!==Zn)&&(n.stencilOp(gt,ln,Zn),pt=gt,mt=ln,Wt=Zn)},setLocked:function(gt){k=gt},setClear:function(gt){an!==gt&&(n.clearStencil(gt),an=gt)},reset:function(){k=!1,Se=null,Ee=null,ke=null,Ue=null,pt=null,mt=null,Wt=null,an=null}}}const a=new s,l=new r,c=new o,h=new WeakMap,u=new WeakMap;let d={},f={},m=new WeakMap,y=[],g=null,p=!1,v=null,_=null,x=null,P=null,M=null,A=null,O=null,S=new Te(0,0,0),C=0,G=!1,J=null,de=null,F=null,q=null,X=null;const te=n.getParameter(n.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let Q=!1,re=0;const he=n.getParameter(n.VERSION);he.indexOf("WebGL")!==-1?(re=parseFloat(/^WebGL (\d)/.exec(he)[1]),Q=re>=1):he.indexOf("OpenGL ES")!==-1&&(re=parseFloat(/^OpenGL ES (\d)/.exec(he)[1]),Q=re>=2);let pe=null,ge={};const ne=n.getParameter(n.SCISSOR_BOX),fe=n.getParameter(n.VIEWPORT),be=new dt().fromArray(ne),Me=new dt().fromArray(fe);function z(k,Se,Ee,ke){const Ue=new Uint8Array(4),pt=n.createTexture();n.bindTexture(k,pt),n.texParameteri(k,n.TEXTURE_MIN_FILTER,n.NEAREST),n.texParameteri(k,n.TEXTURE_MAG_FILTER,n.NEAREST);for(let mt=0;mt<Ee;mt++)i&&(k===n.TEXTURE_3D||k===n.TEXTURE_2D_ARRAY)?n.texImage3D(Se,0,n.RGBA,1,1,ke,0,n.RGBA,n.UNSIGNED_BYTE,Ue):n.texImage2D(Se+mt,0,n.RGBA,1,1,0,n.RGBA,n.UNSIGNED_BYTE,Ue);return pt}const le={};le[n.TEXTURE_2D]=z(n.TEXTURE_2D,n.TEXTURE_2D,1),le[n.TEXTURE_CUBE_MAP]=z(n.TEXTURE_CUBE_MAP,n.TEXTURE_CUBE_MAP_POSITIVE_X,6),i&&(le[n.TEXTURE_2D_ARRAY]=z(n.TEXTURE_2D_ARRAY,n.TEXTURE_2D_ARRAY,1,1),le[n.TEXTURE_3D]=z(n.TEXTURE_3D,n.TEXTURE_3D,1,1)),a.setClear(0,0,0,1),l.setClear(1),c.setClear(0),oe(n.DEPTH_TEST),l.setFunc(Po),$(!1),w(nu),oe(n.CULL_FACE),N(xi);function oe(k){d[k]!==!0&&(n.enable(k),d[k]=!0)}function ae(k){d[k]!==!1&&(n.disable(k),d[k]=!1)}function we(k,Se){return f[k]!==Se?(n.bindFramebuffer(k,Se),f[k]=Se,i&&(k===n.DRAW_FRAMEBUFFER&&(f[n.FRAMEBUFFER]=Se),k===n.FRAMEBUFFER&&(f[n.DRAW_FRAMEBUFFER]=Se)),!0):!1}function L(k,Se){let Ee=y,ke=!1;if(k)if(Ee=m.get(Se),Ee===void 0&&(Ee=[],m.set(Se,Ee)),k.isWebGLMultipleRenderTargets){const Ue=k.texture;if(Ee.length!==Ue.length||Ee[0]!==n.COLOR_ATTACHMENT0){for(let pt=0,mt=Ue.length;pt<mt;pt++)Ee[pt]=n.COLOR_ATTACHMENT0+pt;Ee.length=Ue.length,ke=!0}}else Ee[0]!==n.COLOR_ATTACHMENT0&&(Ee[0]=n.COLOR_ATTACHMENT0,ke=!0);else Ee[0]!==n.BACK&&(Ee[0]=n.BACK,ke=!0);ke&&(t.isWebGL2?n.drawBuffers(Ee):e.get("WEBGL_draw_buffers").drawBuffersWEBGL(Ee))}function E(k){return g!==k?(n.useProgram(k),g=k,!0):!1}const T={[Wi]:n.FUNC_ADD,[ay]:n.FUNC_SUBTRACT,[ly]:n.FUNC_REVERSE_SUBTRACT};if(i)T[ou]=n.MIN,T[au]=n.MAX;else{const k=e.get("EXT_blend_minmax");k!==null&&(T[ou]=k.MIN_EXT,T[au]=k.MAX_EXT)}const U={[cy]:n.ZERO,[hy]:n.ONE,[uy]:n.SRC_COLOR,[Bl]:n.SRC_ALPHA,[yy]:n.SRC_ALPHA_SATURATE,[my]:n.DST_COLOR,[fy]:n.DST_ALPHA,[dy]:n.ONE_MINUS_SRC_COLOR,[zl]:n.ONE_MINUS_SRC_ALPHA,[gy]:n.ONE_MINUS_DST_COLOR,[py]:n.ONE_MINUS_DST_ALPHA,[_y]:n.CONSTANT_COLOR,[vy]:n.ONE_MINUS_CONSTANT_COLOR,[xy]:n.CONSTANT_ALPHA,[by]:n.ONE_MINUS_CONSTANT_ALPHA};function N(k,Se,Ee,ke,Ue,pt,mt,Wt,an,gt){if(k===xi){p===!0&&(ae(n.BLEND),p=!1);return}if(p===!1&&(oe(n.BLEND),p=!0),k!==oy){if(k!==v||gt!==G){if((_!==Wi||M!==Wi)&&(n.blendEquation(n.FUNC_ADD),_=Wi,M=Wi),gt)switch(k){case Ns:n.blendFuncSeparate(n.ONE,n.ONE_MINUS_SRC_ALPHA,n.ONE,n.ONE_MINUS_SRC_ALPHA);break;case iu:n.blendFunc(n.ONE,n.ONE);break;case su:n.blendFuncSeparate(n.ZERO,n.ONE_MINUS_SRC_COLOR,n.ZERO,n.ONE);break;case ru:n.blendFuncSeparate(n.ZERO,n.SRC_COLOR,n.ZERO,n.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",k);break}else switch(k){case Ns:n.blendFuncSeparate(n.SRC_ALPHA,n.ONE_MINUS_SRC_ALPHA,n.ONE,n.ONE_MINUS_SRC_ALPHA);break;case iu:n.blendFunc(n.SRC_ALPHA,n.ONE);break;case su:n.blendFuncSeparate(n.ZERO,n.ONE_MINUS_SRC_COLOR,n.ZERO,n.ONE);break;case ru:n.blendFunc(n.ZERO,n.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",k);break}x=null,P=null,A=null,O=null,S.set(0,0,0),C=0,v=k,G=gt}return}Ue=Ue||Se,pt=pt||Ee,mt=mt||ke,(Se!==_||Ue!==M)&&(n.blendEquationSeparate(T[Se],T[Ue]),_=Se,M=Ue),(Ee!==x||ke!==P||pt!==A||mt!==O)&&(n.blendFuncSeparate(U[Ee],U[ke],U[pt],U[mt]),x=Ee,P=ke,A=pt,O=mt),(Wt.equals(S)===!1||an!==C)&&(n.blendColor(Wt.r,Wt.g,Wt.b,an),S.copy(Wt),C=an),v=k,G=!1}function V(k,Se){k.side===ti?ae(n.CULL_FACE):oe(n.CULL_FACE);let Ee=k.side===dn;Se&&(Ee=!Ee),$(Ee),k.blending===Ns&&k.transparent===!1?N(xi):N(k.blending,k.blendEquation,k.blendSrc,k.blendDst,k.blendEquationAlpha,k.blendSrcAlpha,k.blendDstAlpha,k.blendColor,k.blendAlpha,k.premultipliedAlpha),l.setFunc(k.depthFunc),l.setTest(k.depthTest),l.setMask(k.depthWrite),a.setMask(k.colorWrite);const ke=k.stencilWrite;c.setTest(ke),ke&&(c.setMask(k.stencilWriteMask),c.setFunc(k.stencilFunc,k.stencilRef,k.stencilFuncMask),c.setOp(k.stencilFail,k.stencilZFail,k.stencilZPass)),D(k.polygonOffset,k.polygonOffsetFactor,k.polygonOffsetUnits),k.alphaToCoverage===!0?oe(n.SAMPLE_ALPHA_TO_COVERAGE):ae(n.SAMPLE_ALPHA_TO_COVERAGE)}function $(k){J!==k&&(k?n.frontFace(n.CW):n.frontFace(n.CCW),J=k)}function w(k){k!==sy?(oe(n.CULL_FACE),k!==de&&(k===nu?n.cullFace(n.BACK):k===ry?n.cullFace(n.FRONT):n.cullFace(n.FRONT_AND_BACK))):ae(n.CULL_FACE),de=k}function b(k){k!==F&&(Q&&n.lineWidth(k),F=k)}function D(k,Se,Ee){k?(oe(n.POLYGON_OFFSET_FILL),(q!==Se||X!==Ee)&&(n.polygonOffset(Se,Ee),q=Se,X=Ee)):ae(n.POLYGON_OFFSET_FILL)}function B(k){k?oe(n.SCISSOR_TEST):ae(n.SCISSOR_TEST)}function H(k){k===void 0&&(k=n.TEXTURE0+te-1),pe!==k&&(n.activeTexture(k),pe=k)}function Y(k,Se,Ee){Ee===void 0&&(pe===null?Ee=n.TEXTURE0+te-1:Ee=pe);let ke=ge[Ee];ke===void 0&&(ke={type:void 0,texture:void 0},ge[Ee]=ke),(ke.type!==k||ke.texture!==Se)&&(pe!==Ee&&(n.activeTexture(Ee),pe=Ee),n.bindTexture(k,Se||le[k]),ke.type=k,ke.texture=Se)}function ce(){const k=ge[pe];k!==void 0&&k.type!==void 0&&(n.bindTexture(k.type,null),k.type=void 0,k.texture=void 0)}function ie(){try{n.compressedTexImage2D.apply(n,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function me(){try{n.compressedTexImage3D.apply(n,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function xe(){try{n.texSubImage2D.apply(n,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function Ce(){try{n.texSubImage3D.apply(n,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function se(){try{n.compressedTexSubImage2D.apply(n,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function He(){try{n.compressedTexSubImage3D.apply(n,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function Ve(){try{n.texStorage2D.apply(n,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function Fe(){try{n.texStorage3D.apply(n,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function Ie(){try{n.texImage2D.apply(n,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function Re(){try{n.texImage3D.apply(n,arguments)}catch(k){console.error("THREE.WebGLState:",k)}}function De(k){be.equals(k)===!1&&(n.scissor(k.x,k.y,k.z,k.w),be.copy(k))}function Ze(k){Me.equals(k)===!1&&(n.viewport(k.x,k.y,k.z,k.w),Me.copy(k))}function _t(k,Se){let Ee=u.get(Se);Ee===void 0&&(Ee=new WeakMap,u.set(Se,Ee));let ke=Ee.get(k);ke===void 0&&(ke=n.getUniformBlockIndex(Se,k.name),Ee.set(k,ke))}function tt(k,Se){const ke=u.get(Se).get(k);h.get(Se)!==ke&&(n.uniformBlockBinding(Se,ke,k.__bindingPointIndex),h.set(Se,ke))}function ve(){n.disable(n.BLEND),n.disable(n.CULL_FACE),n.disable(n.DEPTH_TEST),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SCISSOR_TEST),n.disable(n.STENCIL_TEST),n.disable(n.SAMPLE_ALPHA_TO_COVERAGE),n.blendEquation(n.FUNC_ADD),n.blendFunc(n.ONE,n.ZERO),n.blendFuncSeparate(n.ONE,n.ZERO,n.ONE,n.ZERO),n.blendColor(0,0,0,0),n.colorMask(!0,!0,!0,!0),n.clearColor(0,0,0,0),n.depthMask(!0),n.depthFunc(n.LESS),n.clearDepth(1),n.stencilMask(4294967295),n.stencilFunc(n.ALWAYS,0,4294967295),n.stencilOp(n.KEEP,n.KEEP,n.KEEP),n.clearStencil(0),n.cullFace(n.BACK),n.frontFace(n.CCW),n.polygonOffset(0,0),n.activeTexture(n.TEXTURE0),n.bindFramebuffer(n.FRAMEBUFFER,null),i===!0&&(n.bindFramebuffer(n.DRAW_FRAMEBUFFER,null),n.bindFramebuffer(n.READ_FRAMEBUFFER,null)),n.useProgram(null),n.lineWidth(1),n.scissor(0,0,n.canvas.width,n.canvas.height),n.viewport(0,0,n.canvas.width,n.canvas.height),d={},pe=null,ge={},f={},m=new WeakMap,y=[],g=null,p=!1,v=null,_=null,x=null,P=null,M=null,A=null,O=null,S=new Te(0,0,0),C=0,G=!1,J=null,de=null,F=null,q=null,X=null,be.set(0,0,n.canvas.width,n.canvas.height),Me.set(0,0,n.canvas.width,n.canvas.height),a.reset(),l.reset(),c.reset()}return{buffers:{color:a,depth:l,stencil:c},enable:oe,disable:ae,bindFramebuffer:we,drawBuffers:L,useProgram:E,setBlending:N,setMaterial:V,setFlipSided:$,setCullFace:w,setLineWidth:b,setPolygonOffset:D,setScissorTest:B,activeTexture:H,bindTexture:Y,unbindTexture:ce,compressedTexImage2D:ie,compressedTexImage3D:me,texImage2D:Ie,texImage3D:Re,updateUBOMapping:_t,uniformBlockBinding:tt,texStorage2D:Ve,texStorage3D:Fe,texSubImage2D:xe,texSubImage3D:Ce,compressedTexSubImage2D:se,compressedTexSubImage3D:He,scissor:De,viewport:Ze,reset:ve}}function aR(n,e,t,i,s,r,o){const a=s.isWebGL2,l=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,c=typeof navigator>"u"?!1:/OculusBrowser/g.test(navigator.userAgent),h=new WeakMap;let u;const d=new WeakMap;let f=!1;try{f=typeof OffscreenCanvas<"u"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function m(w,b){return f?new OffscreenCanvas(w,b):Ho("canvas")}function y(w,b,D,B){let H=1;if((w.width>B||w.height>B)&&(H=B/Math.max(w.width,w.height)),H<1||b===!0)if(typeof HTMLImageElement<"u"&&w instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&w instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&w instanceof ImageBitmap){const Y=b?Gl:Math.floor,ce=Y(H*w.width),ie=Y(H*w.height);u===void 0&&(u=m(ce,ie));const me=D?m(ce,ie):u;return me.width=ce,me.height=ie,me.getContext("2d").drawImage(w,0,0,ce,ie),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+w.width+"x"+w.height+") to ("+ce+"x"+ie+")."),me}else return"data"in w&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+w.width+"x"+w.height+")."),w;return w}function g(w){return Ou(w.width)&&Ou(w.height)}function p(w){return a?!1:w.wrapS!==nn||w.wrapT!==nn||w.minFilter!==Dt&&w.minFilter!==Ut}function v(w,b){return w.generateMipmaps&&b&&w.minFilter!==Dt&&w.minFilter!==Ut}function _(w){n.generateMipmap(w)}function x(w,b,D,B,H=!1){if(a===!1)return b;if(w!==null){if(n[w]!==void 0)return n[w];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+w+"'")}let Y=b;if(b===n.RED&&(D===n.FLOAT&&(Y=n.R32F),D===n.HALF_FLOAT&&(Y=n.R16F),D===n.UNSIGNED_BYTE&&(Y=n.R8)),b===n.RED_INTEGER&&(D===n.UNSIGNED_BYTE&&(Y=n.R8UI),D===n.UNSIGNED_SHORT&&(Y=n.R16UI),D===n.UNSIGNED_INT&&(Y=n.R32UI),D===n.BYTE&&(Y=n.R8I),D===n.SHORT&&(Y=n.R16I),D===n.INT&&(Y=n.R32I)),b===n.RG&&(D===n.FLOAT&&(Y=n.RG32F),D===n.HALF_FLOAT&&(Y=n.RG16F),D===n.UNSIGNED_BYTE&&(Y=n.RG8)),b===n.RGBA){const ce=H?ko:ut.getTransfer(B);D===n.FLOAT&&(Y=n.RGBA32F),D===n.HALF_FLOAT&&(Y=n.RGBA16F),D===n.UNSIGNED_BYTE&&(Y=ce===yt?n.SRGB8_ALPHA8:n.RGBA8),D===n.UNSIGNED_SHORT_4_4_4_4&&(Y=n.RGBA4),D===n.UNSIGNED_SHORT_5_5_5_1&&(Y=n.RGB5_A1)}return(Y===n.R16F||Y===n.R32F||Y===n.RG16F||Y===n.RG32F||Y===n.RGBA16F||Y===n.RGBA32F)&&e.get("EXT_color_buffer_float"),Y}function P(w,b,D){return v(w,D)===!0||w.isFramebufferTexture&&w.minFilter!==Dt&&w.minFilter!==Ut?Math.log2(Math.max(b.width,b.height))+1:w.mipmaps!==void 0&&w.mipmaps.length>0?w.mipmaps.length:w.isCompressedTexture&&Array.isArray(w.image)?b.mipmaps.length:1}function M(w){return w===Dt||w===Vl||w===yo?n.NEAREST:n.LINEAR}function A(w){const b=w.target;b.removeEventListener("dispose",A),S(b),b.isVideoTexture&&h.delete(b)}function O(w){const b=w.target;b.removeEventListener("dispose",O),G(b)}function S(w){const b=i.get(w);if(b.__webglInit===void 0)return;const D=w.source,B=d.get(D);if(B){const H=B[b.__cacheKey];H.usedTimes--,H.usedTimes===0&&C(w),Object.keys(B).length===0&&d.delete(D)}i.remove(w)}function C(w){const b=i.get(w);n.deleteTexture(b.__webglTexture);const D=w.source,B=d.get(D);delete B[b.__cacheKey],o.memory.textures--}function G(w){const b=w.texture,D=i.get(w),B=i.get(b);if(B.__webglTexture!==void 0&&(n.deleteTexture(B.__webglTexture),o.memory.textures--),w.depthTexture&&w.depthTexture.dispose(),w.isWebGLCubeRenderTarget)for(let H=0;H<6;H++){if(Array.isArray(D.__webglFramebuffer[H]))for(let Y=0;Y<D.__webglFramebuffer[H].length;Y++)n.deleteFramebuffer(D.__webglFramebuffer[H][Y]);else n.deleteFramebuffer(D.__webglFramebuffer[H]);D.__webglDepthbuffer&&n.deleteRenderbuffer(D.__webglDepthbuffer[H])}else{if(Array.isArray(D.__webglFramebuffer))for(let H=0;H<D.__webglFramebuffer.length;H++)n.deleteFramebuffer(D.__webglFramebuffer[H]);else n.deleteFramebuffer(D.__webglFramebuffer);if(D.__webglDepthbuffer&&n.deleteRenderbuffer(D.__webglDepthbuffer),D.__webglMultisampledFramebuffer&&n.deleteFramebuffer(D.__webglMultisampledFramebuffer),D.__webglColorRenderbuffer)for(let H=0;H<D.__webglColorRenderbuffer.length;H++)D.__webglColorRenderbuffer[H]&&n.deleteRenderbuffer(D.__webglColorRenderbuffer[H]);D.__webglDepthRenderbuffer&&n.deleteRenderbuffer(D.__webglDepthRenderbuffer)}if(w.isWebGLMultipleRenderTargets)for(let H=0,Y=b.length;H<Y;H++){const ce=i.get(b[H]);ce.__webglTexture&&(n.deleteTexture(ce.__webglTexture),o.memory.textures--),i.remove(b[H])}i.remove(b),i.remove(w)}let J=0;function de(){J=0}function F(){const w=J;return w>=s.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+w+" texture units while this GPU supports only "+s.maxTextures),J+=1,w}function q(w){const b=[];return b.push(w.wrapS),b.push(w.wrapT),b.push(w.wrapR||0),b.push(w.magFilter),b.push(w.minFilter),b.push(w.anisotropy),b.push(w.internalFormat),b.push(w.format),b.push(w.type),b.push(w.generateMipmaps),b.push(w.premultiplyAlpha),b.push(w.flipY),b.push(w.unpackAlignment),b.push(w.colorSpace),b.join()}function X(w,b){const D=i.get(w);if(w.isVideoTexture&&V(w),w.isRenderTargetTexture===!1&&w.version>0&&D.__version!==w.version){const B=w.image;if(B===null)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else if(B.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{be(D,w,b);return}}t.bindTexture(n.TEXTURE_2D,D.__webglTexture,n.TEXTURE0+b)}function te(w,b){const D=i.get(w);if(w.version>0&&D.__version!==w.version){be(D,w,b);return}t.bindTexture(n.TEXTURE_2D_ARRAY,D.__webglTexture,n.TEXTURE0+b)}function Q(w,b){const D=i.get(w);if(w.version>0&&D.__version!==w.version){be(D,w,b);return}t.bindTexture(n.TEXTURE_3D,D.__webglTexture,n.TEXTURE0+b)}function re(w,b){const D=i.get(w);if(w.version>0&&D.__version!==w.version){Me(D,w,b);return}t.bindTexture(n.TEXTURE_CUBE_MAP,D.__webglTexture,n.TEXTURE0+b)}const he={[Do]:n.REPEAT,[nn]:n.CLAMP_TO_EDGE,[Uo]:n.MIRRORED_REPEAT},pe={[Dt]:n.NEAREST,[Vl]:n.NEAREST_MIPMAP_NEAREST,[yo]:n.NEAREST_MIPMAP_LINEAR,[Ut]:n.LINEAR,[bd]:n.LINEAR_MIPMAP_NEAREST,[Ji]:n.LINEAR_MIPMAP_LINEAR},ge={[Ky]:n.NEVER,[i_]:n.ALWAYS,[Jy]:n.LESS,[Id]:n.LEQUAL,[Qy]:n.EQUAL,[n_]:n.GEQUAL,[e_]:n.GREATER,[t_]:n.NOTEQUAL};function ne(w,b,D){if(D?(n.texParameteri(w,n.TEXTURE_WRAP_S,he[b.wrapS]),n.texParameteri(w,n.TEXTURE_WRAP_T,he[b.wrapT]),(w===n.TEXTURE_3D||w===n.TEXTURE_2D_ARRAY)&&n.texParameteri(w,n.TEXTURE_WRAP_R,he[b.wrapR]),n.texParameteri(w,n.TEXTURE_MAG_FILTER,pe[b.magFilter]),n.texParameteri(w,n.TEXTURE_MIN_FILTER,pe[b.minFilter])):(n.texParameteri(w,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(w,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),(w===n.TEXTURE_3D||w===n.TEXTURE_2D_ARRAY)&&n.texParameteri(w,n.TEXTURE_WRAP_R,n.CLAMP_TO_EDGE),(b.wrapS!==nn||b.wrapT!==nn)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),n.texParameteri(w,n.TEXTURE_MAG_FILTER,M(b.magFilter)),n.texParameteri(w,n.TEXTURE_MIN_FILTER,M(b.minFilter)),b.minFilter!==Dt&&b.minFilter!==Ut&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),b.compareFunction&&(n.texParameteri(w,n.TEXTURE_COMPARE_MODE,n.COMPARE_REF_TO_TEXTURE),n.texParameteri(w,n.TEXTURE_COMPARE_FUNC,ge[b.compareFunction])),e.has("EXT_texture_filter_anisotropic")===!0){const B=e.get("EXT_texture_filter_anisotropic");if(b.magFilter===Dt||b.minFilter!==yo&&b.minFilter!==Ji||b.type===Vn&&e.has("OES_texture_float_linear")===!1||a===!1&&b.type===Ur&&e.has("OES_texture_half_float_linear")===!1)return;(b.anisotropy>1||i.get(b).__currentAnisotropy)&&(n.texParameterf(w,B.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(b.anisotropy,s.getMaxAnisotropy())),i.get(b).__currentAnisotropy=b.anisotropy)}}function fe(w,b){let D=!1;w.__webglInit===void 0&&(w.__webglInit=!0,b.addEventListener("dispose",A));const B=b.source;let H=d.get(B);H===void 0&&(H={},d.set(B,H));const Y=q(b);if(Y!==w.__cacheKey){H[Y]===void 0&&(H[Y]={texture:n.createTexture(),usedTimes:0},o.memory.textures++,D=!0),H[Y].usedTimes++;const ce=H[w.__cacheKey];ce!==void 0&&(H[w.__cacheKey].usedTimes--,ce.usedTimes===0&&C(b)),w.__cacheKey=Y,w.__webglTexture=H[Y].texture}return D}function be(w,b,D){let B=n.TEXTURE_2D;(b.isDataArrayTexture||b.isCompressedArrayTexture)&&(B=n.TEXTURE_2D_ARRAY),b.isData3DTexture&&(B=n.TEXTURE_3D);const H=fe(w,b),Y=b.source;t.bindTexture(B,w.__webglTexture,n.TEXTURE0+D);const ce=i.get(Y);if(Y.version!==ce.__version||H===!0){t.activeTexture(n.TEXTURE0+D);const ie=ut.getPrimaries(ut.workingColorSpace),me=b.colorSpace===Cn?null:ut.getPrimaries(b.colorSpace),xe=b.colorSpace===Cn||ie===me?n.NONE:n.BROWSER_DEFAULT_WEBGL;n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,b.flipY),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,b.premultiplyAlpha),n.pixelStorei(n.UNPACK_ALIGNMENT,b.unpackAlignment),n.pixelStorei(n.UNPACK_COLORSPACE_CONVERSION_WEBGL,xe);const Ce=p(b)&&g(b.image)===!1;let se=y(b.image,Ce,!1,s.maxTextureSize);se=$(b,se);const He=g(se)||a,Ve=r.convert(b.format,b.colorSpace);let Fe=r.convert(b.type),Ie=x(b.internalFormat,Ve,Fe,b.colorSpace,b.isVideoTexture);ne(B,b,He);let Re;const De=b.mipmaps,Ze=a&&b.isVideoTexture!==!0&&Ie!==Cd,_t=ce.__version===void 0||H===!0,tt=P(b,se,He);if(b.isDepthTexture)Ie=n.DEPTH_COMPONENT,a?b.type===Vn?Ie=n.DEPTH_COMPONENT32F:b.type===yi?Ie=n.DEPTH_COMPONENT24:b.type===$i?Ie=n.DEPTH24_STENCIL8:Ie=n.DEPTH_COMPONENT16:b.type===Vn&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),b.format===Yi&&Ie===n.DEPTH_COMPONENT&&b.type!==dc&&b.type!==yi&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),b.type=yi,Fe=r.convert(b.type)),b.format===zs&&Ie===n.DEPTH_COMPONENT&&(Ie=n.DEPTH_STENCIL,b.type!==$i&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),b.type=$i,Fe=r.convert(b.type))),_t&&(Ze?t.texStorage2D(n.TEXTURE_2D,1,Ie,se.width,se.height):t.texImage2D(n.TEXTURE_2D,0,Ie,se.width,se.height,0,Ve,Fe,null));else if(b.isDataTexture)if(De.length>0&&He){Ze&&_t&&t.texStorage2D(n.TEXTURE_2D,tt,Ie,De[0].width,De[0].height);for(let ve=0,k=De.length;ve<k;ve++)Re=De[ve],Ze?t.texSubImage2D(n.TEXTURE_2D,ve,0,0,Re.width,Re.height,Ve,Fe,Re.data):t.texImage2D(n.TEXTURE_2D,ve,Ie,Re.width,Re.height,0,Ve,Fe,Re.data);b.generateMipmaps=!1}else Ze?(_t&&t.texStorage2D(n.TEXTURE_2D,tt,Ie,se.width,se.height),t.texSubImage2D(n.TEXTURE_2D,0,0,0,se.width,se.height,Ve,Fe,se.data)):t.texImage2D(n.TEXTURE_2D,0,Ie,se.width,se.height,0,Ve,Fe,se.data);else if(b.isCompressedTexture)if(b.isCompressedArrayTexture){Ze&&_t&&t.texStorage3D(n.TEXTURE_2D_ARRAY,tt,Ie,De[0].width,De[0].height,se.depth);for(let ve=0,k=De.length;ve<k;ve++)Re=De[ve],b.format!==vn?Ve!==null?Ze?t.compressedTexSubImage3D(n.TEXTURE_2D_ARRAY,ve,0,0,0,Re.width,Re.height,se.depth,Ve,Re.data,0,0):t.compressedTexImage3D(n.TEXTURE_2D_ARRAY,ve,Ie,Re.width,Re.height,se.depth,0,Re.data,0,0):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):Ze?t.texSubImage3D(n.TEXTURE_2D_ARRAY,ve,0,0,0,Re.width,Re.height,se.depth,Ve,Fe,Re.data):t.texImage3D(n.TEXTURE_2D_ARRAY,ve,Ie,Re.width,Re.height,se.depth,0,Ve,Fe,Re.data)}else{Ze&&_t&&t.texStorage2D(n.TEXTURE_2D,tt,Ie,De[0].width,De[0].height);for(let ve=0,k=De.length;ve<k;ve++)Re=De[ve],b.format!==vn?Ve!==null?Ze?t.compressedTexSubImage2D(n.TEXTURE_2D,ve,0,0,Re.width,Re.height,Ve,Re.data):t.compressedTexImage2D(n.TEXTURE_2D,ve,Ie,Re.width,Re.height,0,Re.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):Ze?t.texSubImage2D(n.TEXTURE_2D,ve,0,0,Re.width,Re.height,Ve,Fe,Re.data):t.texImage2D(n.TEXTURE_2D,ve,Ie,Re.width,Re.height,0,Ve,Fe,Re.data)}else if(b.isDataArrayTexture)Ze?(_t&&t.texStorage3D(n.TEXTURE_2D_ARRAY,tt,Ie,se.width,se.height,se.depth),t.texSubImage3D(n.TEXTURE_2D_ARRAY,0,0,0,0,se.width,se.height,se.depth,Ve,Fe,se.data)):t.texImage3D(n.TEXTURE_2D_ARRAY,0,Ie,se.width,se.height,se.depth,0,Ve,Fe,se.data);else if(b.isData3DTexture)Ze?(_t&&t.texStorage3D(n.TEXTURE_3D,tt,Ie,se.width,se.height,se.depth),t.texSubImage3D(n.TEXTURE_3D,0,0,0,0,se.width,se.height,se.depth,Ve,Fe,se.data)):t.texImage3D(n.TEXTURE_3D,0,Ie,se.width,se.height,se.depth,0,Ve,Fe,se.data);else if(b.isFramebufferTexture){if(_t)if(Ze)t.texStorage2D(n.TEXTURE_2D,tt,Ie,se.width,se.height);else{let ve=se.width,k=se.height;for(let Se=0;Se<tt;Se++)t.texImage2D(n.TEXTURE_2D,Se,Ie,ve,k,0,Ve,Fe,null),ve>>=1,k>>=1}}else if(De.length>0&&He){Ze&&_t&&t.texStorage2D(n.TEXTURE_2D,tt,Ie,De[0].width,De[0].height);for(let ve=0,k=De.length;ve<k;ve++)Re=De[ve],Ze?t.texSubImage2D(n.TEXTURE_2D,ve,0,0,Ve,Fe,Re):t.texImage2D(n.TEXTURE_2D,ve,Ie,Ve,Fe,Re);b.generateMipmaps=!1}else Ze?(_t&&t.texStorage2D(n.TEXTURE_2D,tt,Ie,se.width,se.height),t.texSubImage2D(n.TEXTURE_2D,0,0,0,Ve,Fe,se)):t.texImage2D(n.TEXTURE_2D,0,Ie,Ve,Fe,se);v(b,He)&&_(B),ce.__version=Y.version,b.onUpdate&&b.onUpdate(b)}w.__version=b.version}function Me(w,b,D){if(b.image.length!==6)return;const B=fe(w,b),H=b.source;t.bindTexture(n.TEXTURE_CUBE_MAP,w.__webglTexture,n.TEXTURE0+D);const Y=i.get(H);if(H.version!==Y.__version||B===!0){t.activeTexture(n.TEXTURE0+D);const ce=ut.getPrimaries(ut.workingColorSpace),ie=b.colorSpace===Cn?null:ut.getPrimaries(b.colorSpace),me=b.colorSpace===Cn||ce===ie?n.NONE:n.BROWSER_DEFAULT_WEBGL;n.pixelStorei(n.UNPACK_FLIP_Y_WEBGL,b.flipY),n.pixelStorei(n.UNPACK_PREMULTIPLY_ALPHA_WEBGL,b.premultiplyAlpha),n.pixelStorei(n.UNPACK_ALIGNMENT,b.unpackAlignment),n.pixelStorei(n.UNPACK_COLORSPACE_CONVERSION_WEBGL,me);const xe=b.isCompressedTexture||b.image[0].isCompressedTexture,Ce=b.image[0]&&b.image[0].isDataTexture,se=[];for(let ve=0;ve<6;ve++)!xe&&!Ce?se[ve]=y(b.image[ve],!1,!0,s.maxCubemapSize):se[ve]=Ce?b.image[ve].image:b.image[ve],se[ve]=$(b,se[ve]);const He=se[0],Ve=g(He)||a,Fe=r.convert(b.format,b.colorSpace),Ie=r.convert(b.type),Re=x(b.internalFormat,Fe,Ie,b.colorSpace),De=a&&b.isVideoTexture!==!0,Ze=Y.__version===void 0||B===!0;let _t=P(b,He,Ve);ne(n.TEXTURE_CUBE_MAP,b,Ve);let tt;if(xe){De&&Ze&&t.texStorage2D(n.TEXTURE_CUBE_MAP,_t,Re,He.width,He.height);for(let ve=0;ve<6;ve++){tt=se[ve].mipmaps;for(let k=0;k<tt.length;k++){const Se=tt[k];b.format!==vn?Fe!==null?De?t.compressedTexSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+ve,k,0,0,Se.width,Se.height,Fe,Se.data):t.compressedTexImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+ve,k,Re,Se.width,Se.height,0,Se.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):De?t.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+ve,k,0,0,Se.width,Se.height,Fe,Ie,Se.data):t.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+ve,k,Re,Se.width,Se.height,0,Fe,Ie,Se.data)}}}else{tt=b.mipmaps,De&&Ze&&(tt.length>0&&_t++,t.texStorage2D(n.TEXTURE_CUBE_MAP,_t,Re,se[0].width,se[0].height));for(let ve=0;ve<6;ve++)if(Ce){De?t.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+ve,0,0,0,se[ve].width,se[ve].height,Fe,Ie,se[ve].data):t.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+ve,0,Re,se[ve].width,se[ve].height,0,Fe,Ie,se[ve].data);for(let k=0;k<tt.length;k++){const Ee=tt[k].image[ve].image;De?t.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+ve,k+1,0,0,Ee.width,Ee.height,Fe,Ie,Ee.data):t.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+ve,k+1,Re,Ee.width,Ee.height,0,Fe,Ie,Ee.data)}}else{De?t.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+ve,0,0,0,Fe,Ie,se[ve]):t.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+ve,0,Re,Fe,Ie,se[ve]);for(let k=0;k<tt.length;k++){const Se=tt[k];De?t.texSubImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+ve,k+1,0,0,Fe,Ie,Se.image[ve]):t.texImage2D(n.TEXTURE_CUBE_MAP_POSITIVE_X+ve,k+1,Re,Fe,Ie,Se.image[ve])}}}v(b,Ve)&&_(n.TEXTURE_CUBE_MAP),Y.__version=H.version,b.onUpdate&&b.onUpdate(b)}w.__version=b.version}function z(w,b,D,B,H,Y){const ce=r.convert(D.format,D.colorSpace),ie=r.convert(D.type),me=x(D.internalFormat,ce,ie,D.colorSpace);if(!i.get(b).__hasExternalTextures){const Ce=Math.max(1,b.width>>Y),se=Math.max(1,b.height>>Y);H===n.TEXTURE_3D||H===n.TEXTURE_2D_ARRAY?t.texImage3D(H,Y,me,Ce,se,b.depth,0,ce,ie,null):t.texImage2D(H,Y,me,Ce,se,0,ce,ie,null)}t.bindFramebuffer(n.FRAMEBUFFER,w),N(b)?l.framebufferTexture2DMultisampleEXT(n.FRAMEBUFFER,B,H,i.get(D).__webglTexture,0,U(b)):(H===n.TEXTURE_2D||H>=n.TEXTURE_CUBE_MAP_POSITIVE_X&&H<=n.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&n.framebufferTexture2D(n.FRAMEBUFFER,B,H,i.get(D).__webglTexture,Y),t.bindFramebuffer(n.FRAMEBUFFER,null)}function le(w,b,D){if(n.bindRenderbuffer(n.RENDERBUFFER,w),b.depthBuffer&&!b.stencilBuffer){let B=a===!0?n.DEPTH_COMPONENT24:n.DEPTH_COMPONENT16;if(D||N(b)){const H=b.depthTexture;H&&H.isDepthTexture&&(H.type===Vn?B=n.DEPTH_COMPONENT32F:H.type===yi&&(B=n.DEPTH_COMPONENT24));const Y=U(b);N(b)?l.renderbufferStorageMultisampleEXT(n.RENDERBUFFER,Y,B,b.width,b.height):n.renderbufferStorageMultisample(n.RENDERBUFFER,Y,B,b.width,b.height)}else n.renderbufferStorage(n.RENDERBUFFER,B,b.width,b.height);n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_ATTACHMENT,n.RENDERBUFFER,w)}else if(b.depthBuffer&&b.stencilBuffer){const B=U(b);D&&N(b)===!1?n.renderbufferStorageMultisample(n.RENDERBUFFER,B,n.DEPTH24_STENCIL8,b.width,b.height):N(b)?l.renderbufferStorageMultisampleEXT(n.RENDERBUFFER,B,n.DEPTH24_STENCIL8,b.width,b.height):n.renderbufferStorage(n.RENDERBUFFER,n.DEPTH_STENCIL,b.width,b.height),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_STENCIL_ATTACHMENT,n.RENDERBUFFER,w)}else{const B=b.isWebGLMultipleRenderTargets===!0?b.texture:[b.texture];for(let H=0;H<B.length;H++){const Y=B[H],ce=r.convert(Y.format,Y.colorSpace),ie=r.convert(Y.type),me=x(Y.internalFormat,ce,ie,Y.colorSpace),xe=U(b);D&&N(b)===!1?n.renderbufferStorageMultisample(n.RENDERBUFFER,xe,me,b.width,b.height):N(b)?l.renderbufferStorageMultisampleEXT(n.RENDERBUFFER,xe,me,b.width,b.height):n.renderbufferStorage(n.RENDERBUFFER,me,b.width,b.height)}}n.bindRenderbuffer(n.RENDERBUFFER,null)}function oe(w,b){if(b&&b.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(t.bindFramebuffer(n.FRAMEBUFFER,w),!(b.depthTexture&&b.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!i.get(b.depthTexture).__webglTexture||b.depthTexture.image.width!==b.width||b.depthTexture.image.height!==b.height)&&(b.depthTexture.image.width=b.width,b.depthTexture.image.height=b.height,b.depthTexture.needsUpdate=!0),X(b.depthTexture,0);const B=i.get(b.depthTexture).__webglTexture,H=U(b);if(b.depthTexture.format===Yi)N(b)?l.framebufferTexture2DMultisampleEXT(n.FRAMEBUFFER,n.DEPTH_ATTACHMENT,n.TEXTURE_2D,B,0,H):n.framebufferTexture2D(n.FRAMEBUFFER,n.DEPTH_ATTACHMENT,n.TEXTURE_2D,B,0);else if(b.depthTexture.format===zs)N(b)?l.framebufferTexture2DMultisampleEXT(n.FRAMEBUFFER,n.DEPTH_STENCIL_ATTACHMENT,n.TEXTURE_2D,B,0,H):n.framebufferTexture2D(n.FRAMEBUFFER,n.DEPTH_STENCIL_ATTACHMENT,n.TEXTURE_2D,B,0);else throw new Error("Unknown depthTexture format")}function ae(w){const b=i.get(w),D=w.isWebGLCubeRenderTarget===!0;if(w.depthTexture&&!b.__autoAllocateDepthBuffer){if(D)throw new Error("target.depthTexture not supported in Cube render targets");oe(b.__webglFramebuffer,w)}else if(D){b.__webglDepthbuffer=[];for(let B=0;B<6;B++)t.bindFramebuffer(n.FRAMEBUFFER,b.__webglFramebuffer[B]),b.__webglDepthbuffer[B]=n.createRenderbuffer(),le(b.__webglDepthbuffer[B],w,!1)}else t.bindFramebuffer(n.FRAMEBUFFER,b.__webglFramebuffer),b.__webglDepthbuffer=n.createRenderbuffer(),le(b.__webglDepthbuffer,w,!1);t.bindFramebuffer(n.FRAMEBUFFER,null)}function we(w,b,D){const B=i.get(w);b!==void 0&&z(B.__webglFramebuffer,w,w.texture,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,0),D!==void 0&&ae(w)}function L(w){const b=w.texture,D=i.get(w),B=i.get(b);w.addEventListener("dispose",O),w.isWebGLMultipleRenderTargets!==!0&&(B.__webglTexture===void 0&&(B.__webglTexture=n.createTexture()),B.__version=b.version,o.memory.textures++);const H=w.isWebGLCubeRenderTarget===!0,Y=w.isWebGLMultipleRenderTargets===!0,ce=g(w)||a;if(H){D.__webglFramebuffer=[];for(let ie=0;ie<6;ie++)if(a&&b.mipmaps&&b.mipmaps.length>0){D.__webglFramebuffer[ie]=[];for(let me=0;me<b.mipmaps.length;me++)D.__webglFramebuffer[ie][me]=n.createFramebuffer()}else D.__webglFramebuffer[ie]=n.createFramebuffer()}else{if(a&&b.mipmaps&&b.mipmaps.length>0){D.__webglFramebuffer=[];for(let ie=0;ie<b.mipmaps.length;ie++)D.__webglFramebuffer[ie]=n.createFramebuffer()}else D.__webglFramebuffer=n.createFramebuffer();if(Y)if(s.drawBuffers){const ie=w.texture;for(let me=0,xe=ie.length;me<xe;me++){const Ce=i.get(ie[me]);Ce.__webglTexture===void 0&&(Ce.__webglTexture=n.createTexture(),o.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");if(a&&w.samples>0&&N(w)===!1){const ie=Y?b:[b];D.__webglMultisampledFramebuffer=n.createFramebuffer(),D.__webglColorRenderbuffer=[],t.bindFramebuffer(n.FRAMEBUFFER,D.__webglMultisampledFramebuffer);for(let me=0;me<ie.length;me++){const xe=ie[me];D.__webglColorRenderbuffer[me]=n.createRenderbuffer(),n.bindRenderbuffer(n.RENDERBUFFER,D.__webglColorRenderbuffer[me]);const Ce=r.convert(xe.format,xe.colorSpace),se=r.convert(xe.type),He=x(xe.internalFormat,Ce,se,xe.colorSpace,w.isXRRenderTarget===!0),Ve=U(w);n.renderbufferStorageMultisample(n.RENDERBUFFER,Ve,He,w.width,w.height),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0+me,n.RENDERBUFFER,D.__webglColorRenderbuffer[me])}n.bindRenderbuffer(n.RENDERBUFFER,null),w.depthBuffer&&(D.__webglDepthRenderbuffer=n.createRenderbuffer(),le(D.__webglDepthRenderbuffer,w,!0)),t.bindFramebuffer(n.FRAMEBUFFER,null)}}if(H){t.bindTexture(n.TEXTURE_CUBE_MAP,B.__webglTexture),ne(n.TEXTURE_CUBE_MAP,b,ce);for(let ie=0;ie<6;ie++)if(a&&b.mipmaps&&b.mipmaps.length>0)for(let me=0;me<b.mipmaps.length;me++)z(D.__webglFramebuffer[ie][me],w,b,n.COLOR_ATTACHMENT0,n.TEXTURE_CUBE_MAP_POSITIVE_X+ie,me);else z(D.__webglFramebuffer[ie],w,b,n.COLOR_ATTACHMENT0,n.TEXTURE_CUBE_MAP_POSITIVE_X+ie,0);v(b,ce)&&_(n.TEXTURE_CUBE_MAP),t.unbindTexture()}else if(Y){const ie=w.texture;for(let me=0,xe=ie.length;me<xe;me++){const Ce=ie[me],se=i.get(Ce);t.bindTexture(n.TEXTURE_2D,se.__webglTexture),ne(n.TEXTURE_2D,Ce,ce),z(D.__webglFramebuffer,w,Ce,n.COLOR_ATTACHMENT0+me,n.TEXTURE_2D,0),v(Ce,ce)&&_(n.TEXTURE_2D)}t.unbindTexture()}else{let ie=n.TEXTURE_2D;if((w.isWebGL3DRenderTarget||w.isWebGLArrayRenderTarget)&&(a?ie=w.isWebGL3DRenderTarget?n.TEXTURE_3D:n.TEXTURE_2D_ARRAY:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),t.bindTexture(ie,B.__webglTexture),ne(ie,b,ce),a&&b.mipmaps&&b.mipmaps.length>0)for(let me=0;me<b.mipmaps.length;me++)z(D.__webglFramebuffer[me],w,b,n.COLOR_ATTACHMENT0,ie,me);else z(D.__webglFramebuffer,w,b,n.COLOR_ATTACHMENT0,ie,0);v(b,ce)&&_(ie),t.unbindTexture()}w.depthBuffer&&ae(w)}function E(w){const b=g(w)||a,D=w.isWebGLMultipleRenderTargets===!0?w.texture:[w.texture];for(let B=0,H=D.length;B<H;B++){const Y=D[B];if(v(Y,b)){const ce=w.isWebGLCubeRenderTarget?n.TEXTURE_CUBE_MAP:n.TEXTURE_2D,ie=i.get(Y).__webglTexture;t.bindTexture(ce,ie),_(ce),t.unbindTexture()}}}function T(w){if(a&&w.samples>0&&N(w)===!1){const b=w.isWebGLMultipleRenderTargets?w.texture:[w.texture],D=w.width,B=w.height;let H=n.COLOR_BUFFER_BIT;const Y=[],ce=w.stencilBuffer?n.DEPTH_STENCIL_ATTACHMENT:n.DEPTH_ATTACHMENT,ie=i.get(w),me=w.isWebGLMultipleRenderTargets===!0;if(me)for(let xe=0;xe<b.length;xe++)t.bindFramebuffer(n.FRAMEBUFFER,ie.__webglMultisampledFramebuffer),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0+xe,n.RENDERBUFFER,null),t.bindFramebuffer(n.FRAMEBUFFER,ie.__webglFramebuffer),n.framebufferTexture2D(n.DRAW_FRAMEBUFFER,n.COLOR_ATTACHMENT0+xe,n.TEXTURE_2D,null,0);t.bindFramebuffer(n.READ_FRAMEBUFFER,ie.__webglMultisampledFramebuffer),t.bindFramebuffer(n.DRAW_FRAMEBUFFER,ie.__webglFramebuffer);for(let xe=0;xe<b.length;xe++){Y.push(n.COLOR_ATTACHMENT0+xe),w.depthBuffer&&Y.push(ce);const Ce=ie.__ignoreDepthValues!==void 0?ie.__ignoreDepthValues:!1;if(Ce===!1&&(w.depthBuffer&&(H|=n.DEPTH_BUFFER_BIT),w.stencilBuffer&&(H|=n.STENCIL_BUFFER_BIT)),me&&n.framebufferRenderbuffer(n.READ_FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.RENDERBUFFER,ie.__webglColorRenderbuffer[xe]),Ce===!0&&(n.invalidateFramebuffer(n.READ_FRAMEBUFFER,[ce]),n.invalidateFramebuffer(n.DRAW_FRAMEBUFFER,[ce])),me){const se=i.get(b[xe]).__webglTexture;n.framebufferTexture2D(n.DRAW_FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,se,0)}n.blitFramebuffer(0,0,D,B,0,0,D,B,H,n.NEAREST),c&&n.invalidateFramebuffer(n.READ_FRAMEBUFFER,Y)}if(t.bindFramebuffer(n.READ_FRAMEBUFFER,null),t.bindFramebuffer(n.DRAW_FRAMEBUFFER,null),me)for(let xe=0;xe<b.length;xe++){t.bindFramebuffer(n.FRAMEBUFFER,ie.__webglMultisampledFramebuffer),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0+xe,n.RENDERBUFFER,ie.__webglColorRenderbuffer[xe]);const Ce=i.get(b[xe]).__webglTexture;t.bindFramebuffer(n.FRAMEBUFFER,ie.__webglFramebuffer),n.framebufferTexture2D(n.DRAW_FRAMEBUFFER,n.COLOR_ATTACHMENT0+xe,n.TEXTURE_2D,Ce,0)}t.bindFramebuffer(n.DRAW_FRAMEBUFFER,ie.__webglMultisampledFramebuffer)}}function U(w){return Math.min(s.maxSamples,w.samples)}function N(w){const b=i.get(w);return a&&w.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===!0&&b.__useRenderToTexture!==!1}function V(w){const b=o.render.frame;h.get(w)!==b&&(h.set(w,b),w.update())}function $(w,b){const D=w.colorSpace,B=w.format,H=w.type;return w.isCompressedTexture===!0||w.isVideoTexture===!0||w.format===Hl||D!==ri&&D!==Cn&&(ut.getTransfer(D)===yt?a===!1?e.has("EXT_sRGB")===!0&&B===vn?(w.format=Hl,w.minFilter=Ut,w.generateMipmaps=!1):b=Dd.sRGBToLinear(b):(B!==vn||H!==wi)&&console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",D)),b}this.allocateTextureUnit=F,this.resetTextureUnits=de,this.setTexture2D=X,this.setTexture2DArray=te,this.setTexture3D=Q,this.setTextureCube=re,this.rebindTextures=we,this.setupRenderTarget=L,this.updateRenderTargetMipmap=E,this.updateMultisampleRenderTarget=T,this.setupDepthRenderbuffer=ae,this.setupFrameBufferTexture=z,this.useMultisampledRTT=N}function __(n,e,t){const i=t.isWebGL2;function s(r,o=Cn){let a;const l=ut.getTransfer(o);if(r===wi)return n.UNSIGNED_BYTE;if(r===Md)return n.UNSIGNED_SHORT_4_4_4_4;if(r===Sd)return n.UNSIGNED_SHORT_5_5_5_1;if(r===Fy)return n.BYTE;if(r===ky)return n.SHORT;if(r===dc)return n.UNSIGNED_SHORT;if(r===wd)return n.INT;if(r===yi)return n.UNSIGNED_INT;if(r===Vn)return n.FLOAT;if(r===Ur)return i?n.HALF_FLOAT:(a=e.get("OES_texture_half_float"),a!==null?a.HALF_FLOAT_OES:null);if(r===By)return n.ALPHA;if(r===vn)return n.RGBA;if(r===zy)return n.LUMINANCE;if(r===Vy)return n.LUMINANCE_ALPHA;if(r===Yi)return n.DEPTH_COMPONENT;if(r===zs)return n.DEPTH_STENCIL;if(r===Hl)return a=e.get("EXT_sRGB"),a!==null?a.SRGB_ALPHA_EXT:null;if(r===Hy)return n.RED;if(r===Ed)return n.RED_INTEGER;if(r===Gy)return n.RG;if(r===Td)return n.RG_INTEGER;if(r===Ad)return n.RGBA_INTEGER;if(r===xl||r===bl||r===wl||r===Ml)if(l===yt)if(a=e.get("WEBGL_compressed_texture_s3tc_srgb"),a!==null){if(r===xl)return a.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(r===bl)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(r===wl)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(r===Ml)return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else return null;else if(a=e.get("WEBGL_compressed_texture_s3tc"),a!==null){if(r===xl)return a.COMPRESSED_RGB_S3TC_DXT1_EXT;if(r===bl)return a.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(r===wl)return a.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(r===Ml)return a.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(r===cu||r===hu||r===uu||r===du)if(a=e.get("WEBGL_compressed_texture_pvrtc"),a!==null){if(r===cu)return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(r===hu)return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(r===uu)return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(r===du)return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(r===Cd)return a=e.get("WEBGL_compressed_texture_etc1"),a!==null?a.COMPRESSED_RGB_ETC1_WEBGL:null;if(r===fu||r===pu)if(a=e.get("WEBGL_compressed_texture_etc"),a!==null){if(r===fu)return l===yt?a.COMPRESSED_SRGB8_ETC2:a.COMPRESSED_RGB8_ETC2;if(r===pu)return l===yt?a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:a.COMPRESSED_RGBA8_ETC2_EAC}else return null;if(r===mu||r===gu||r===yu||r===_u||r===vu||r===xu||r===bu||r===wu||r===Mu||r===Su||r===Eu||r===Tu||r===Au||r===Cu)if(a=e.get("WEBGL_compressed_texture_astc"),a!==null){if(r===mu)return l===yt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:a.COMPRESSED_RGBA_ASTC_4x4_KHR;if(r===gu)return l===yt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:a.COMPRESSED_RGBA_ASTC_5x4_KHR;if(r===yu)return l===yt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:a.COMPRESSED_RGBA_ASTC_5x5_KHR;if(r===_u)return l===yt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:a.COMPRESSED_RGBA_ASTC_6x5_KHR;if(r===vu)return l===yt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:a.COMPRESSED_RGBA_ASTC_6x6_KHR;if(r===xu)return l===yt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:a.COMPRESSED_RGBA_ASTC_8x5_KHR;if(r===bu)return l===yt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:a.COMPRESSED_RGBA_ASTC_8x6_KHR;if(r===wu)return l===yt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:a.COMPRESSED_RGBA_ASTC_8x8_KHR;if(r===Mu)return l===yt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:a.COMPRESSED_RGBA_ASTC_10x5_KHR;if(r===Su)return l===yt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:a.COMPRESSED_RGBA_ASTC_10x6_KHR;if(r===Eu)return l===yt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:a.COMPRESSED_RGBA_ASTC_10x8_KHR;if(r===Tu)return l===yt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:a.COMPRESSED_RGBA_ASTC_10x10_KHR;if(r===Au)return l===yt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:a.COMPRESSED_RGBA_ASTC_12x10_KHR;if(r===Cu)return l===yt?a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:a.COMPRESSED_RGBA_ASTC_12x12_KHR}else return null;if(r===Sl||r===Ru||r===Pu)if(a=e.get("EXT_texture_compression_bptc"),a!==null){if(r===Sl)return l===yt?a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:a.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(r===Ru)return a.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(r===Pu)return a.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}else return null;if(r===Wy||r===Iu||r===Lu||r===Du)if(a=e.get("EXT_texture_compression_rgtc"),a!==null){if(r===Sl)return a.COMPRESSED_RED_RGTC1_EXT;if(r===Iu)return a.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(r===Lu)return a.COMPRESSED_RED_GREEN_RGTC2_EXT;if(r===Du)return a.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}else return null;return r===$i?i?n.UNSIGNED_INT_24_8:(a=e.get("WEBGL_depth_texture"),a!==null?a.UNSIGNED_INT_24_8_WEBGL:null):n[r]!==void 0?n[r]:null}return{convert:s}}class v_ extends kt{constructor(e=[]){super(),this.isArrayCamera=!0,this.cameras=e}}class br extends lt{constructor(){super(),this.isGroup=!0,this.type="Group"}}const lR={type:"move"};class wh{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new br,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new br,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new I,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new I),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new br,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new I,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new I),this._grip}dispatchEvent(e){return this._targetRay!==null&&this._targetRay.dispatchEvent(e),this._grip!==null&&this._grip.dispatchEvent(e),this._hand!==null&&this._hand.dispatchEvent(e),this}connect(e){if(e&&e.hand){const t=this._hand;if(t)for(const i of e.hand.values())this._getHandJoint(t,i)}return this.dispatchEvent({type:"connected",data:e}),this}disconnect(e){return this.dispatchEvent({type:"disconnected",data:e}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(e,t,i){let s=null,r=null,o=null;const a=this._targetRay,l=this._grip,c=this._hand;if(e&&t.session.visibilityState!=="visible-blurred"){if(c&&e.hand){o=!0;for(const y of e.hand.values()){const g=t.getJointPose(y,i),p=this._getHandJoint(c,y);g!==null&&(p.matrix.fromArray(g.transform.matrix),p.matrix.decompose(p.position,p.rotation,p.scale),p.matrixWorldNeedsUpdate=!0,p.jointRadius=g.radius),p.visible=g!==null}const h=c.joints["index-finger-tip"],u=c.joints["thumb-tip"],d=h.position.distanceTo(u.position),f=.02,m=.005;c.inputState.pinching&&d>f+m?(c.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:e.handedness,target:this})):!c.inputState.pinching&&d<=f-m&&(c.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:e.handedness,target:this}))}else l!==null&&e.gripSpace&&(r=t.getPose(e.gripSpace,i),r!==null&&(l.matrix.fromArray(r.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),l.matrixWorldNeedsUpdate=!0,r.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(r.linearVelocity)):l.hasLinearVelocity=!1,r.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(r.angularVelocity)):l.hasAngularVelocity=!1));a!==null&&(s=t.getPose(e.targetRaySpace,i),s===null&&r!==null&&(s=r),s!==null&&(a.matrix.fromArray(s.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),a.matrixWorldNeedsUpdate=!0,s.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(s.linearVelocity)):a.hasLinearVelocity=!1,s.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(s.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(lR)))}return a!==null&&(a.visible=s!==null),l!==null&&(l.visible=r!==null),c!==null&&(c.visible=o!==null),this}_getHandJoint(e,t){if(e.joints[t.jointName]===void 0){const i=new br;i.matrixAutoUpdate=!1,i.visible=!1,e.joints[t.jointName]=i,e.add(i)}return e.joints[t.jointName]}}class cR extends Ci{constructor(e,t){super();const i=this;let s=null,r=1,o=null,a="local-floor",l=1,c=null,h=null,u=null,d=null,f=null,m=null;const y=t.getContextAttributes();let g=null,p=null;const v=[],_=[],x=new ue;let P=null;const M=new kt;M.layers.enable(1),M.viewport=new dt;const A=new kt;A.layers.enable(2),A.viewport=new dt;const O=[M,A],S=new v_;S.layers.enable(1),S.layers.enable(2);let C=null,G=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(ne){let fe=v[ne];return fe===void 0&&(fe=new wh,v[ne]=fe),fe.getTargetRaySpace()},this.getControllerGrip=function(ne){let fe=v[ne];return fe===void 0&&(fe=new wh,v[ne]=fe),fe.getGripSpace()},this.getHand=function(ne){let fe=v[ne];return fe===void 0&&(fe=new wh,v[ne]=fe),fe.getHandSpace()};function J(ne){const fe=_.indexOf(ne.inputSource);if(fe===-1)return;const be=v[fe];be!==void 0&&(be.update(ne.inputSource,ne.frame,c||o),be.dispatchEvent({type:ne.type,data:ne.inputSource}))}function de(){s.removeEventListener("select",J),s.removeEventListener("selectstart",J),s.removeEventListener("selectend",J),s.removeEventListener("squeeze",J),s.removeEventListener("squeezestart",J),s.removeEventListener("squeezeend",J),s.removeEventListener("end",de),s.removeEventListener("inputsourceschange",F);for(let ne=0;ne<v.length;ne++){const fe=_[ne];fe!==null&&(_[ne]=null,v[ne].disconnect(fe))}C=null,G=null,e.setRenderTarget(g),f=null,d=null,u=null,s=null,p=null,ge.stop(),i.isPresenting=!1,e.setPixelRatio(P),e.setSize(x.width,x.height,!1),i.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(ne){r=ne,i.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(ne){a=ne,i.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return c||o},this.setReferenceSpace=function(ne){c=ne},this.getBaseLayer=function(){return d!==null?d:f},this.getBinding=function(){return u},this.getFrame=function(){return m},this.getSession=function(){return s},this.setSession=async function(ne){if(s=ne,s!==null){if(g=e.getRenderTarget(),s.addEventListener("select",J),s.addEventListener("selectstart",J),s.addEventListener("selectend",J),s.addEventListener("squeeze",J),s.addEventListener("squeezestart",J),s.addEventListener("squeezeend",J),s.addEventListener("end",de),s.addEventListener("inputsourceschange",F),y.xrCompatible!==!0&&await t.makeXRCompatible(),P=e.getPixelRatio(),e.getSize(x),s.renderState.layers===void 0||e.capabilities.isWebGL2===!1){const fe={antialias:s.renderState.layers===void 0?y.antialias:!0,alpha:!0,depth:y.depth,stencil:y.stencil,framebufferScaleFactor:r};f=new XRWebGLLayer(s,t,fe),s.updateRenderState({baseLayer:f}),e.setPixelRatio(1),e.setSize(f.framebufferWidth,f.framebufferHeight,!1),p=new $n(f.framebufferWidth,f.framebufferHeight,{format:vn,type:wi,colorSpace:e.outputColorSpace,stencilBuffer:y.stencil})}else{let fe=null,be=null,Me=null;y.depth&&(Me=y.stencil?t.DEPTH24_STENCIL8:t.DEPTH_COMPONENT24,fe=y.stencil?zs:Yi,be=y.stencil?$i:yi);const z={colorFormat:t.RGBA8,depthFormat:Me,scaleFactor:r};u=new XRWebGLBinding(s,t),d=u.createProjectionLayer(z),s.updateRenderState({layers:[d]}),e.setPixelRatio(1),e.setSize(d.textureWidth,d.textureHeight,!1),p=new $n(d.textureWidth,d.textureHeight,{format:vn,type:wi,depthTexture:new kd(d.textureWidth,d.textureHeight,be,void 0,void 0,void 0,void 0,void 0,void 0,fe),stencilBuffer:y.stencil,colorSpace:e.outputColorSpace,samples:y.antialias?4:0});const le=e.properties.get(p);le.__ignoreDepthValues=d.ignoreDepthValues}p.isXRRenderTarget=!0,this.setFoveation(l),c=null,o=await s.requestReferenceSpace(a),ge.setContext(s),ge.start(),i.isPresenting=!0,i.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(s!==null)return s.environmentBlendMode};function F(ne){for(let fe=0;fe<ne.removed.length;fe++){const be=ne.removed[fe],Me=_.indexOf(be);Me>=0&&(_[Me]=null,v[Me].disconnect(be))}for(let fe=0;fe<ne.added.length;fe++){const be=ne.added[fe];let Me=_.indexOf(be);if(Me===-1){for(let le=0;le<v.length;le++)if(le>=_.length){_.push(be),Me=le;break}else if(_[le]===null){_[le]=be,Me=le;break}if(Me===-1)break}const z=v[Me];z&&z.connect(be)}}const q=new I,X=new I;function te(ne,fe,be){q.setFromMatrixPosition(fe.matrixWorld),X.setFromMatrixPosition(be.matrixWorld);const Me=q.distanceTo(X),z=fe.projectionMatrix.elements,le=be.projectionMatrix.elements,oe=z[14]/(z[10]-1),ae=z[14]/(z[10]+1),we=(z[9]+1)/z[5],L=(z[9]-1)/z[5],E=(z[8]-1)/z[0],T=(le[8]+1)/le[0],U=oe*E,N=oe*T,V=Me/(-E+T),$=V*-E;fe.matrixWorld.decompose(ne.position,ne.quaternion,ne.scale),ne.translateX($),ne.translateZ(V),ne.matrixWorld.compose(ne.position,ne.quaternion,ne.scale),ne.matrixWorldInverse.copy(ne.matrixWorld).invert();const w=oe+V,b=ae+V,D=U-$,B=N+(Me-$),H=we*ae/b*w,Y=L*ae/b*w;ne.projectionMatrix.makePerspective(D,B,H,Y,w,b),ne.projectionMatrixInverse.copy(ne.projectionMatrix).invert()}function Q(ne,fe){fe===null?ne.matrixWorld.copy(ne.matrix):ne.matrixWorld.multiplyMatrices(fe.matrixWorld,ne.matrix),ne.matrixWorldInverse.copy(ne.matrixWorld).invert()}this.updateCamera=function(ne){if(s===null)return;S.near=A.near=M.near=ne.near,S.far=A.far=M.far=ne.far,(C!==S.near||G!==S.far)&&(s.updateRenderState({depthNear:S.near,depthFar:S.far}),C=S.near,G=S.far);const fe=ne.parent,be=S.cameras;Q(S,fe);for(let Me=0;Me<be.length;Me++)Q(be[Me],fe);be.length===2?te(S,M,A):S.projectionMatrix.copy(M.projectionMatrix),re(ne,S,fe)};function re(ne,fe,be){be===null?ne.matrix.copy(fe.matrixWorld):(ne.matrix.copy(be.matrixWorld),ne.matrix.invert(),ne.matrix.multiply(fe.matrixWorld)),ne.matrix.decompose(ne.position,ne.quaternion,ne.scale),ne.updateMatrixWorld(!0),ne.projectionMatrix.copy(fe.projectionMatrix),ne.projectionMatrixInverse.copy(fe.projectionMatrixInverse),ne.isPerspectiveCamera&&(ne.fov=Or*2*Math.atan(1/ne.projectionMatrix.elements[5]),ne.zoom=1)}this.getCamera=function(){return S},this.getFoveation=function(){if(!(d===null&&f===null))return l},this.setFoveation=function(ne){l=ne,d!==null&&(d.fixedFoveation=ne),f!==null&&f.fixedFoveation!==void 0&&(f.fixedFoveation=ne)};let he=null;function pe(ne,fe){if(h=fe.getViewerPose(c||o),m=fe,h!==null){const be=h.views;f!==null&&(e.setRenderTargetFramebuffer(p,f.framebuffer),e.setRenderTarget(p));let Me=!1;be.length!==S.cameras.length&&(S.cameras.length=0,Me=!0);for(let z=0;z<be.length;z++){const le=be[z];let oe=null;if(f!==null)oe=f.getViewport(le);else{const we=u.getViewSubImage(d,le);oe=we.viewport,z===0&&(e.setRenderTargetTextures(p,we.colorTexture,d.ignoreDepthValues?void 0:we.depthStencilTexture),e.setRenderTarget(p))}let ae=O[z];ae===void 0&&(ae=new kt,ae.layers.enable(z),ae.viewport=new dt,O[z]=ae),ae.matrix.fromArray(le.transform.matrix),ae.matrix.decompose(ae.position,ae.quaternion,ae.scale),ae.projectionMatrix.fromArray(le.projectionMatrix),ae.projectionMatrixInverse.copy(ae.projectionMatrix).invert(),ae.viewport.set(oe.x,oe.y,oe.width,oe.height),z===0&&(S.matrix.copy(ae.matrix),S.matrix.decompose(S.position,S.quaternion,S.scale)),Me===!0&&S.cameras.push(ae)}}for(let be=0;be<v.length;be++){const Me=_[be],z=v[be];Me!==null&&z!==void 0&&z.update(Me,fe,c||o)}he&&he(ne,fe),fe.detectedPlanes&&i.dispatchEvent({type:"planesdetected",data:fe}),m=null}const ge=new d_;ge.setAnimationLoop(pe),this.setAnimationLoop=function(ne){he=ne},this.dispose=function(){}}}function hR(n,e){function t(g,p){g.matrixAutoUpdate===!0&&g.updateMatrix(),p.value.copy(g.matrix)}function i(g,p){p.color.getRGB(g.fogColor.value,l_(n)),p.isFog?(g.fogNear.value=p.near,g.fogFar.value=p.far):p.isFogExp2&&(g.fogDensity.value=p.density)}function s(g,p,v,_,x){p.isMeshBasicMaterial||p.isMeshLambertMaterial?r(g,p):p.isMeshToonMaterial?(r(g,p),u(g,p)):p.isMeshPhongMaterial?(r(g,p),h(g,p)):p.isMeshStandardMaterial?(r(g,p),d(g,p),p.isMeshPhysicalMaterial&&f(g,p,x)):p.isMeshMatcapMaterial?(r(g,p),m(g,p)):p.isMeshDepthMaterial?r(g,p):p.isMeshDistanceMaterial?(r(g,p),y(g,p)):p.isMeshNormalMaterial?r(g,p):p.isLineBasicMaterial?(o(g,p),p.isLineDashedMaterial&&a(g,p)):p.isPointsMaterial?l(g,p,v,_):p.isSpriteMaterial?c(g,p):p.isShadowMaterial?(g.color.value.copy(p.color),g.opacity.value=p.opacity):p.isShaderMaterial&&(p.uniformsNeedUpdate=!1)}function r(g,p){g.opacity.value=p.opacity,p.color&&g.diffuse.value.copy(p.color),p.emissive&&g.emissive.value.copy(p.emissive).multiplyScalar(p.emissiveIntensity),p.map&&(g.map.value=p.map,t(p.map,g.mapTransform)),p.alphaMap&&(g.alphaMap.value=p.alphaMap,t(p.alphaMap,g.alphaMapTransform)),p.bumpMap&&(g.bumpMap.value=p.bumpMap,t(p.bumpMap,g.bumpMapTransform),g.bumpScale.value=p.bumpScale,p.side===dn&&(g.bumpScale.value*=-1)),p.normalMap&&(g.normalMap.value=p.normalMap,t(p.normalMap,g.normalMapTransform),g.normalScale.value.copy(p.normalScale),p.side===dn&&g.normalScale.value.negate()),p.displacementMap&&(g.displacementMap.value=p.displacementMap,t(p.displacementMap,g.displacementMapTransform),g.displacementScale.value=p.displacementScale,g.displacementBias.value=p.displacementBias),p.emissiveMap&&(g.emissiveMap.value=p.emissiveMap,t(p.emissiveMap,g.emissiveMapTransform)),p.specularMap&&(g.specularMap.value=p.specularMap,t(p.specularMap,g.specularMapTransform)),p.alphaTest>0&&(g.alphaTest.value=p.alphaTest);const v=e.get(p).envMap;if(v&&(g.envMap.value=v,g.flipEnvMap.value=v.isCubeTexture&&v.isRenderTargetTexture===!1?-1:1,g.reflectivity.value=p.reflectivity,g.ior.value=p.ior,g.refractionRatio.value=p.refractionRatio),p.lightMap){g.lightMap.value=p.lightMap;const _=n._useLegacyLights===!0?Math.PI:1;g.lightMapIntensity.value=p.lightMapIntensity*_,t(p.lightMap,g.lightMapTransform)}p.aoMap&&(g.aoMap.value=p.aoMap,g.aoMapIntensity.value=p.aoMapIntensity,t(p.aoMap,g.aoMapTransform))}function o(g,p){g.diffuse.value.copy(p.color),g.opacity.value=p.opacity,p.map&&(g.map.value=p.map,t(p.map,g.mapTransform))}function a(g,p){g.dashSize.value=p.dashSize,g.totalSize.value=p.dashSize+p.gapSize,g.scale.value=p.scale}function l(g,p,v,_){g.diffuse.value.copy(p.color),g.opacity.value=p.opacity,g.size.value=p.size*v,g.scale.value=_*.5,p.map&&(g.map.value=p.map,t(p.map,g.uvTransform)),p.alphaMap&&(g.alphaMap.value=p.alphaMap,t(p.alphaMap,g.alphaMapTransform)),p.alphaTest>0&&(g.alphaTest.value=p.alphaTest)}function c(g,p){g.diffuse.value.copy(p.color),g.opacity.value=p.opacity,g.rotation.value=p.rotation,p.map&&(g.map.value=p.map,t(p.map,g.mapTransform)),p.alphaMap&&(g.alphaMap.value=p.alphaMap,t(p.alphaMap,g.alphaMapTransform)),p.alphaTest>0&&(g.alphaTest.value=p.alphaTest)}function h(g,p){g.specular.value.copy(p.specular),g.shininess.value=Math.max(p.shininess,1e-4)}function u(g,p){p.gradientMap&&(g.gradientMap.value=p.gradientMap)}function d(g,p){g.metalness.value=p.metalness,p.metalnessMap&&(g.metalnessMap.value=p.metalnessMap,t(p.metalnessMap,g.metalnessMapTransform)),g.roughness.value=p.roughness,p.roughnessMap&&(g.roughnessMap.value=p.roughnessMap,t(p.roughnessMap,g.roughnessMapTransform)),e.get(p).envMap&&(g.envMapIntensity.value=p.envMapIntensity)}function f(g,p,v){g.ior.value=p.ior,p.sheen>0&&(g.sheenColor.value.copy(p.sheenColor).multiplyScalar(p.sheen),g.sheenRoughness.value=p.sheenRoughness,p.sheenColorMap&&(g.sheenColorMap.value=p.sheenColorMap,t(p.sheenColorMap,g.sheenColorMapTransform)),p.sheenRoughnessMap&&(g.sheenRoughnessMap.value=p.sheenRoughnessMap,t(p.sheenRoughnessMap,g.sheenRoughnessMapTransform))),p.clearcoat>0&&(g.clearcoat.value=p.clearcoat,g.clearcoatRoughness.value=p.clearcoatRoughness,p.clearcoatMap&&(g.clearcoatMap.value=p.clearcoatMap,t(p.clearcoatMap,g.clearcoatMapTransform)),p.clearcoatRoughnessMap&&(g.clearcoatRoughnessMap.value=p.clearcoatRoughnessMap,t(p.clearcoatRoughnessMap,g.clearcoatRoughnessMapTransform)),p.clearcoatNormalMap&&(g.clearcoatNormalMap.value=p.clearcoatNormalMap,t(p.clearcoatNormalMap,g.clearcoatNormalMapTransform),g.clearcoatNormalScale.value.copy(p.clearcoatNormalScale),p.side===dn&&g.clearcoatNormalScale.value.negate())),p.iridescence>0&&(g.iridescence.value=p.iridescence,g.iridescenceIOR.value=p.iridescenceIOR,g.iridescenceThicknessMinimum.value=p.iridescenceThicknessRange[0],g.iridescenceThicknessMaximum.value=p.iridescenceThicknessRange[1],p.iridescenceMap&&(g.iridescenceMap.value=p.iridescenceMap,t(p.iridescenceMap,g.iridescenceMapTransform)),p.iridescenceThicknessMap&&(g.iridescenceThicknessMap.value=p.iridescenceThicknessMap,t(p.iridescenceThicknessMap,g.iridescenceThicknessMapTransform))),p.transmission>0&&(g.transmission.value=p.transmission,g.transmissionSamplerMap.value=v.texture,g.transmissionSamplerSize.value.set(v.width,v.height),p.transmissionMap&&(g.transmissionMap.value=p.transmissionMap,t(p.transmissionMap,g.transmissionMapTransform)),g.thickness.value=p.thickness,p.thicknessMap&&(g.thicknessMap.value=p.thicknessMap,t(p.thicknessMap,g.thicknessMapTransform)),g.attenuationDistance.value=p.attenuationDistance,g.attenuationColor.value.copy(p.attenuationColor)),p.anisotropy>0&&(g.anisotropyVector.value.set(p.anisotropy*Math.cos(p.anisotropyRotation),p.anisotropy*Math.sin(p.anisotropyRotation)),p.anisotropyMap&&(g.anisotropyMap.value=p.anisotropyMap,t(p.anisotropyMap,g.anisotropyMapTransform))),g.specularIntensity.value=p.specularIntensity,g.specularColor.value.copy(p.specularColor),p.specularColorMap&&(g.specularColorMap.value=p.specularColorMap,t(p.specularColorMap,g.specularColorMapTransform)),p.specularIntensityMap&&(g.specularIntensityMap.value=p.specularIntensityMap,t(p.specularIntensityMap,g.specularIntensityMapTransform))}function m(g,p){p.matcap&&(g.matcap.value=p.matcap)}function y(g,p){const v=e.get(p).light;g.referencePosition.value.setFromMatrixPosition(v.matrixWorld),g.nearDistance.value=v.shadow.camera.near,g.farDistance.value=v.shadow.camera.far}return{refreshFogUniforms:i,refreshMaterialUniforms:s}}function uR(n,e,t,i){let s={},r={},o=[];const a=t.isWebGL2?n.getParameter(n.MAX_UNIFORM_BUFFER_BINDINGS):0;function l(v,_){const x=_.program;i.uniformBlockBinding(v,x)}function c(v,_){let x=s[v.id];x===void 0&&(m(v),x=h(v),s[v.id]=x,v.addEventListener("dispose",g));const P=_.program;i.updateUBOMapping(v,P);const M=e.render.frame;r[v.id]!==M&&(d(v),r[v.id]=M)}function h(v){const _=u();v.__bindingPointIndex=_;const x=n.createBuffer(),P=v.__size,M=v.usage;return n.bindBuffer(n.UNIFORM_BUFFER,x),n.bufferData(n.UNIFORM_BUFFER,P,M),n.bindBuffer(n.UNIFORM_BUFFER,null),n.bindBufferBase(n.UNIFORM_BUFFER,_,x),x}function u(){for(let v=0;v<a;v++)if(o.indexOf(v)===-1)return o.push(v),v;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}function d(v){const _=s[v.id],x=v.uniforms,P=v.__cache;n.bindBuffer(n.UNIFORM_BUFFER,_);for(let M=0,A=x.length;M<A;M++){const O=Array.isArray(x[M])?x[M]:[x[M]];for(let S=0,C=O.length;S<C;S++){const G=O[S];if(f(G,M,S,P)===!0){const J=G.__offset,de=Array.isArray(G.value)?G.value:[G.value];let F=0;for(let q=0;q<de.length;q++){const X=de[q],te=y(X);typeof X=="number"||typeof X=="boolean"?(G.__data[0]=X,n.bufferSubData(n.UNIFORM_BUFFER,J+F,G.__data)):X.isMatrix3?(G.__data[0]=X.elements[0],G.__data[1]=X.elements[1],G.__data[2]=X.elements[2],G.__data[3]=0,G.__data[4]=X.elements[3],G.__data[5]=X.elements[4],G.__data[6]=X.elements[5],G.__data[7]=0,G.__data[8]=X.elements[6],G.__data[9]=X.elements[7],G.__data[10]=X.elements[8],G.__data[11]=0):(X.toArray(G.__data,F),F+=te.storage/Float32Array.BYTES_PER_ELEMENT)}n.bufferSubData(n.UNIFORM_BUFFER,J,G.__data)}}}n.bindBuffer(n.UNIFORM_BUFFER,null)}function f(v,_,x,P){const M=v.value,A=_+"_"+x;if(P[A]===void 0)return typeof M=="number"||typeof M=="boolean"?P[A]=M:P[A]=M.clone(),!0;{const O=P[A];if(typeof M=="number"||typeof M=="boolean"){if(O!==M)return P[A]=M,!0}else if(O.equals(M)===!1)return O.copy(M),!0}return!1}function m(v){const _=v.uniforms;let x=0;const P=16;for(let A=0,O=_.length;A<O;A++){const S=Array.isArray(_[A])?_[A]:[_[A]];for(let C=0,G=S.length;C<G;C++){const J=S[C],de=Array.isArray(J.value)?J.value:[J.value];for(let F=0,q=de.length;F<q;F++){const X=de[F],te=y(X),Q=x%P;Q!==0&&P-Q<te.boundary&&(x+=P-Q),J.__data=new Float32Array(te.storage/Float32Array.BYTES_PER_ELEMENT),J.__offset=x,x+=te.storage}}}const M=x%P;return M>0&&(x+=P-M),v.__size=x,v.__cache={},this}function y(v){const _={boundary:0,storage:0};return typeof v=="number"||typeof v=="boolean"?(_.boundary=4,_.storage=4):v.isVector2?(_.boundary=8,_.storage=8):v.isVector3||v.isColor?(_.boundary=16,_.storage=12):v.isVector4?(_.boundary=16,_.storage=16):v.isMatrix3?(_.boundary=48,_.storage=48):v.isMatrix4?(_.boundary=64,_.storage=64):v.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",v),_}function g(v){const _=v.target;_.removeEventListener("dispose",g);const x=o.indexOf(_.__bindingPointIndex);o.splice(x,1),n.deleteBuffer(s[_.id]),delete s[_.id],delete r[_.id]}function p(){for(const v in s)n.deleteBuffer(s[v]);o=[],s={},r={}}return{bind:l,update:c,dispose:p}}class xo{constructor(e={}){const{canvas:t=r_(),context:i=null,depth:s=!0,stencil:r=!0,alpha:o=!1,antialias:a=!1,premultipliedAlpha:l=!0,preserveDrawingBuffer:c=!1,powerPreference:h="default",failIfMajorPerformanceCaveat:u=!1}=e;this.isWebGLRenderer=!0;let d;i!==null?d=i.getContextAttributes().alpha:d=o;const f=new Uint32Array(4),m=new Int32Array(4);let y=null,g=null;const p=[],v=[];this.domElement=t,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=Ft,this._useLegacyLights=!1,this.toneMapping=bi,this.toneMappingExposure=1;const _=this;let x=!1,P=0,M=0,A=null,O=-1,S=null;const C=new dt,G=new dt;let J=null;const de=new Te(0);let F=0,q=t.width,X=t.height,te=1,Q=null,re=null;const he=new dt(0,0,q,X),pe=new dt(0,0,q,X);let ge=!1;const ne=new la;let fe=!1,be=!1,Me=null;const z=new Oe,le=new ue,oe=new I,ae={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function we(){return A===null?te:1}let L=i;function E(R,W){for(let K=0;K<R.length;K++){const ee=R[K],Z=t.getContext(ee,W);if(Z!==null)return Z}return null}try{const R={alpha:!0,depth:s,stencil:r,antialias:a,premultipliedAlpha:l,preserveDrawingBuffer:c,powerPreference:h,failIfMajorPerformanceCaveat:u};if("setAttribute"in t&&t.setAttribute("data-engine",`three.js r${na}`),t.addEventListener("webglcontextlost",ve,!1),t.addEventListener("webglcontextrestored",k,!1),t.addEventListener("webglcontextcreationerror",Se,!1),L===null){const W=["webgl2","webgl","experimental-webgl"];if(_.isWebGL1Renderer===!0&&W.shift(),L=E(W,R),L===null)throw E(W)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}typeof WebGLRenderingContext<"u"&&L instanceof WebGLRenderingContext&&console.warn("THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163."),L.getShaderPrecisionFormat===void 0&&(L.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(R){throw console.error("THREE.WebGLRenderer: "+R.message),R}let T,U,N,V,$,w,b,D,B,H,Y,ce,ie,me,xe,Ce,se,He,Ve,Fe,Ie,Re,De,Ze;function _t(){T=new E1(L),U=new v1(L,T,e),T.init(U),Re=new __(L,T,U),N=new oR(L,T,U),V=new C1(L),$=new YC,w=new aR(L,T,N,$,U,Re,V),b=new b1(_),D=new S1(_),B=new OE(L,U),De=new y1(L,T,B,U),H=new T1(L,B,V,De),Y=new L1(L,H,B,V),Ve=new I1(L,U,w),Ce=new x1($),ce=new $C(_,b,D,T,U,De,Ce),ie=new hR(_,$),me=new ZC,xe=new nR(T,U),He=new g1(_,b,D,N,Y,d,l),se=new rR(_,Y,U),Ze=new uR(L,V,U,N),Fe=new _1(L,T,V,U),Ie=new A1(L,T,V,U),V.programs=ce.programs,_.capabilities=U,_.extensions=T,_.properties=$,_.renderLists=me,_.shadowMap=se,_.state=N,_.info=V}_t();const tt=new cR(_,L);this.xr=tt,this.getContext=function(){return L},this.getContextAttributes=function(){return L.getContextAttributes()},this.forceContextLoss=function(){const R=T.get("WEBGL_lose_context");R&&R.loseContext()},this.forceContextRestore=function(){const R=T.get("WEBGL_lose_context");R&&R.restoreContext()},this.getPixelRatio=function(){return te},this.setPixelRatio=function(R){R!==void 0&&(te=R,this.setSize(q,X,!1))},this.getSize=function(R){return R.set(q,X)},this.setSize=function(R,W,K=!0){if(tt.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}q=R,X=W,t.width=Math.floor(R*te),t.height=Math.floor(W*te),K===!0&&(t.style.width=R+"px",t.style.height=W+"px"),this.setViewport(0,0,R,W)},this.getDrawingBufferSize=function(R){return R.set(q*te,X*te).floor()},this.setDrawingBufferSize=function(R,W,K){q=R,X=W,te=K,t.width=Math.floor(R*K),t.height=Math.floor(W*K),this.setViewport(0,0,R,W)},this.getCurrentViewport=function(R){return R.copy(C)},this.getViewport=function(R){return R.copy(he)},this.setViewport=function(R,W,K,ee){R.isVector4?he.set(R.x,R.y,R.z,R.w):he.set(R,W,K,ee),N.viewport(C.copy(he).multiplyScalar(te).floor())},this.getScissor=function(R){return R.copy(pe)},this.setScissor=function(R,W,K,ee){R.isVector4?pe.set(R.x,R.y,R.z,R.w):pe.set(R,W,K,ee),N.scissor(G.copy(pe).multiplyScalar(te).floor())},this.getScissorTest=function(){return ge},this.setScissorTest=function(R){N.setScissorTest(ge=R)},this.setOpaqueSort=function(R){Q=R},this.setTransparentSort=function(R){re=R},this.getClearColor=function(R){return R.copy(He.getClearColor())},this.setClearColor=function(){He.setClearColor.apply(He,arguments)},this.getClearAlpha=function(){return He.getClearAlpha()},this.setClearAlpha=function(){He.setClearAlpha.apply(He,arguments)},this.clear=function(R=!0,W=!0,K=!0){let ee=0;if(R){let Z=!1;if(A!==null){const Ae=A.texture.format;Z=Ae===Ad||Ae===Td||Ae===Ed}if(Z){const Ae=A.texture.type,Le=Ae===wi||Ae===yi||Ae===dc||Ae===$i||Ae===Md||Ae===Sd,Ne=He.getClearColor(),Be=He.getClearAlpha(),Qe=Ne.r,Ge=Ne.g,Xe=Ne.b;Le?(f[0]=Qe,f[1]=Ge,f[2]=Xe,f[3]=Be,L.clearBufferuiv(L.COLOR,0,f)):(m[0]=Qe,m[1]=Ge,m[2]=Xe,m[3]=Be,L.clearBufferiv(L.COLOR,0,m))}else ee|=L.COLOR_BUFFER_BIT}W&&(ee|=L.DEPTH_BUFFER_BIT),K&&(ee|=L.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),L.clear(ee)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",ve,!1),t.removeEventListener("webglcontextrestored",k,!1),t.removeEventListener("webglcontextcreationerror",Se,!1),me.dispose(),xe.dispose(),$.dispose(),b.dispose(),D.dispose(),Y.dispose(),De.dispose(),Ze.dispose(),ce.dispose(),tt.dispose(),tt.removeEventListener("sessionstart",an),tt.removeEventListener("sessionend",gt),Me&&(Me.dispose(),Me=null),ln.stop()};function ve(R){R.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),x=!0}function k(){console.log("THREE.WebGLRenderer: Context Restored."),x=!1;const R=V.autoReset,W=se.enabled,K=se.autoUpdate,ee=se.needsUpdate,Z=se.type;_t(),V.autoReset=R,se.enabled=W,se.autoUpdate=K,se.needsUpdate=ee,se.type=Z}function Se(R){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",R.statusMessage)}function Ee(R){const W=R.target;W.removeEventListener("dispose",Ee),ke(W)}function ke(R){Ue(R),$.remove(R)}function Ue(R){const W=$.get(R).programs;W!==void 0&&(W.forEach(function(K){ce.releaseProgram(K)}),R.isShaderMaterial&&ce.releaseShaderCache(R))}this.renderBufferDirect=function(R,W,K,ee,Z,Ae){W===null&&(W=ae);const Le=Z.isMesh&&Z.matrixWorld.determinant()<0,Ne=Mv(R,W,K,ee,Z);N.setMaterial(ee,Le);let Be=K.index,Qe=1;if(ee.wireframe===!0){if(Be=H.getWireframeAttribute(K),Be===void 0)return;Qe=2}const Ge=K.drawRange,Xe=K.attributes.position;let It=Ge.start*Qe,Sn=(Ge.start+Ge.count)*Qe;Ae!==null&&(It=Math.max(It,Ae.start*Qe),Sn=Math.min(Sn,(Ae.start+Ae.count)*Qe)),Be!==null?(It=Math.max(It,0),Sn=Math.min(Sn,Be.count)):Xe!=null&&(It=Math.max(It,0),Sn=Math.min(Sn,Xe.count));const qt=Sn-It;if(qt<0||qt===1/0)return;De.setup(Z,ee,Ne,K,Be);let li,St=Fe;if(Be!==null&&(li=B.get(Be),St=Ie,St.setIndex(li)),Z.isMesh)ee.wireframe===!0?(N.setLineWidth(ee.wireframeLinewidth*we()),St.setMode(L.LINES)):St.setMode(L.TRIANGLES);else if(Z.isLine){let nt=ee.linewidth;nt===void 0&&(nt=1),N.setLineWidth(nt*we()),Z.isLineSegments?St.setMode(L.LINES):Z.isLineLoop?St.setMode(L.LINE_LOOP):St.setMode(L.LINE_STRIP)}else Z.isPoints?St.setMode(L.POINTS):Z.isSprite&&St.setMode(L.TRIANGLES);if(Z.isBatchedMesh)St.renderMultiDraw(Z._multiDrawStarts,Z._multiDrawCounts,Z._multiDrawCount);else if(Z.isInstancedMesh)St.renderInstances(It,qt,Z.count);else if(K.isInstancedBufferGeometry){const nt=K._maxInstanceCount!==void 0?K._maxInstanceCount:1/0,Bc=Math.min(K.instanceCount,nt);St.renderInstances(It,qt,Bc)}else St.render(It,qt)};function pt(R,W,K){R.transparent===!0&&R.side===ti&&R.forceSinglePass===!1?(R.side=dn,R.needsUpdate=!0,ga(R,W,K),R.side=Mi,R.needsUpdate=!0,ga(R,W,K),R.side=ti):ga(R,W,K)}this.compile=function(R,W,K=null){K===null&&(K=R),g=xe.get(K),g.init(),v.push(g),K.traverseVisible(function(Z){Z.isLight&&Z.layers.test(W.layers)&&(g.pushLight(Z),Z.castShadow&&g.pushShadow(Z))}),R!==K&&R.traverseVisible(function(Z){Z.isLight&&Z.layers.test(W.layers)&&(g.pushLight(Z),Z.castShadow&&g.pushShadow(Z))}),g.setupLights(_._useLegacyLights);const ee=new Set;return R.traverse(function(Z){const Ae=Z.material;if(Ae)if(Array.isArray(Ae))for(let Le=0;Le<Ae.length;Le++){const Ne=Ae[Le];pt(Ne,K,Z),ee.add(Ne)}else pt(Ae,K,Z),ee.add(Ae)}),v.pop(),g=null,ee},this.compileAsync=function(R,W,K=null){const ee=this.compile(R,W,K);return new Promise(Z=>{function Ae(){if(ee.forEach(function(Le){$.get(Le).currentProgram.isReady()&&ee.delete(Le)}),ee.size===0){Z(R);return}setTimeout(Ae,10)}T.get("KHR_parallel_shader_compile")!==null?Ae():setTimeout(Ae,10)})};let mt=null;function Wt(R){mt&&mt(R)}function an(){ln.stop()}function gt(){ln.start()}const ln=new d_;ln.setAnimationLoop(Wt),typeof self<"u"&&ln.setContext(self),this.setAnimationLoop=function(R){mt=R,tt.setAnimationLoop(R),R===null?ln.stop():ln.start()},tt.addEventListener("sessionstart",an),tt.addEventListener("sessionend",gt),this.render=function(R,W){if(W!==void 0&&W.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(x===!0)return;R.matrixWorldAutoUpdate===!0&&R.updateMatrixWorld(),W.parent===null&&W.matrixWorldAutoUpdate===!0&&W.updateMatrixWorld(),tt.enabled===!0&&tt.isPresenting===!0&&(tt.cameraAutoUpdate===!0&&tt.updateCamera(W),W=tt.getCamera()),R.isScene===!0&&R.onBeforeRender(_,R,W,A),g=xe.get(R,v.length),g.init(),v.push(g),z.multiplyMatrices(W.projectionMatrix,W.matrixWorldInverse),ne.setFromProjectionMatrix(z),be=this.localClippingEnabled,fe=Ce.init(this.clippingPlanes,be),y=me.get(R,p.length),y.init(),p.push(y),Zn(R,W,0,_.sortObjects),y.finish(),_.sortObjects===!0&&y.sort(Q,re),this.info.render.frame++,fe===!0&&Ce.beginShadows();const K=g.state.shadowsArray;if(se.render(K,R,W),fe===!0&&Ce.endShadows(),this.info.autoReset===!0&&this.info.reset(),He.render(y,R),g.setupLights(_._useLegacyLights),W.isArrayCamera){const ee=W.cameras;for(let Z=0,Ae=ee.length;Z<Ae;Z++){const Le=ee[Z];mf(y,R,Le,Le.viewport)}}else mf(y,R,W);A!==null&&(w.updateMultisampleRenderTarget(A),w.updateRenderTargetMipmap(A)),R.isScene===!0&&R.onAfterRender(_,R,W),De.resetDefaultState(),O=-1,S=null,v.pop(),v.length>0?g=v[v.length-1]:g=null,p.pop(),p.length>0?y=p[p.length-1]:y=null};function Zn(R,W,K,ee){if(R.visible===!1)return;if(R.layers.test(W.layers)){if(R.isGroup)K=R.renderOrder;else if(R.isLOD)R.autoUpdate===!0&&R.update(W);else if(R.isLight)g.pushLight(R),R.castShadow&&g.pushShadow(R);else if(R.isSprite){if(!R.frustumCulled||ne.intersectsSprite(R)){ee&&oe.setFromMatrixPosition(R.matrixWorld).applyMatrix4(z);const Le=Y.update(R),Ne=R.material;Ne.visible&&y.push(R,Le,Ne,K,oe.z,null)}}else if((R.isMesh||R.isLine||R.isPoints)&&(!R.frustumCulled||ne.intersectsObject(R))){const Le=Y.update(R),Ne=R.material;if(ee&&(R.boundingSphere!==void 0?(R.boundingSphere===null&&R.computeBoundingSphere(),oe.copy(R.boundingSphere.center)):(Le.boundingSphere===null&&Le.computeBoundingSphere(),oe.copy(Le.boundingSphere.center)),oe.applyMatrix4(R.matrixWorld).applyMatrix4(z)),Array.isArray(Ne)){const Be=Le.groups;for(let Qe=0,Ge=Be.length;Qe<Ge;Qe++){const Xe=Be[Qe],It=Ne[Xe.materialIndex];It&&It.visible&&y.push(R,Le,It,K,oe.z,Xe)}}else Ne.visible&&y.push(R,Le,Ne,K,oe.z,null)}}const Ae=R.children;for(let Le=0,Ne=Ae.length;Le<Ne;Le++)Zn(Ae[Le],W,K,ee)}function mf(R,W,K,ee){const Z=R.opaque,Ae=R.transmissive,Le=R.transparent;g.setupLightsView(K),fe===!0&&Ce.setGlobalState(_.clippingPlanes,K),Ae.length>0&&wv(Z,Ae,W,K),ee&&N.viewport(C.copy(ee)),Z.length>0&&ma(Z,W,K),Ae.length>0&&ma(Ae,W,K),Le.length>0&&ma(Le,W,K),N.buffers.depth.setTest(!0),N.buffers.depth.setMask(!0),N.buffers.color.setMask(!0),N.setPolygonOffset(!1)}function wv(R,W,K,ee){if((K.isScene===!0?K.overrideMaterial:null)!==null)return;const Ae=U.isWebGL2;Me===null&&(Me=new $n(1,1,{generateMipmaps:!0,type:T.has("EXT_color_buffer_half_float")?Ur:wi,minFilter:Ji,samples:Ae?4:0})),_.getDrawingBufferSize(le),Ae?Me.setSize(le.x,le.y):Me.setSize(Gl(le.x),Gl(le.y));const Le=_.getRenderTarget();_.setRenderTarget(Me),_.getClearColor(de),F=_.getClearAlpha(),F<1&&_.setClearColor(16777215,.5),_.clear();const Ne=_.toneMapping;_.toneMapping=bi,ma(R,K,ee),w.updateMultisampleRenderTarget(Me),w.updateRenderTargetMipmap(Me);let Be=!1;for(let Qe=0,Ge=W.length;Qe<Ge;Qe++){const Xe=W[Qe],It=Xe.object,Sn=Xe.geometry,qt=Xe.material,li=Xe.group;if(qt.side===ti&&It.layers.test(ee.layers)){const St=qt.side;qt.side=dn,qt.needsUpdate=!0,gf(It,K,ee,Sn,qt,li),qt.side=St,qt.needsUpdate=!0,Be=!0}}Be===!0&&(w.updateMultisampleRenderTarget(Me),w.updateRenderTargetMipmap(Me)),_.setRenderTarget(Le),_.setClearColor(de,F),_.toneMapping=Ne}function ma(R,W,K){const ee=W.isScene===!0?W.overrideMaterial:null;for(let Z=0,Ae=R.length;Z<Ae;Z++){const Le=R[Z],Ne=Le.object,Be=Le.geometry,Qe=ee===null?Le.material:ee,Ge=Le.group;Ne.layers.test(K.layers)&&gf(Ne,W,K,Be,Qe,Ge)}}function gf(R,W,K,ee,Z,Ae){R.onBeforeRender(_,W,K,ee,Z,Ae),R.modelViewMatrix.multiplyMatrices(K.matrixWorldInverse,R.matrixWorld),R.normalMatrix.getNormalMatrix(R.modelViewMatrix),Z.onBeforeRender(_,W,K,ee,R,Ae),Z.transparent===!0&&Z.side===ti&&Z.forceSinglePass===!1?(Z.side=dn,Z.needsUpdate=!0,_.renderBufferDirect(K,W,ee,Z,R,Ae),Z.side=Mi,Z.needsUpdate=!0,_.renderBufferDirect(K,W,ee,Z,R,Ae),Z.side=ti):_.renderBufferDirect(K,W,ee,Z,R,Ae),R.onAfterRender(_,W,K,ee,Z,Ae)}function ga(R,W,K){W.isScene!==!0&&(W=ae);const ee=$.get(R),Z=g.state.lights,Ae=g.state.shadowsArray,Le=Z.state.version,Ne=ce.getParameters(R,Z.state,Ae,W,K),Be=ce.getProgramCacheKey(Ne);let Qe=ee.programs;ee.environment=R.isMeshStandardMaterial?W.environment:null,ee.fog=W.fog,ee.envMap=(R.isMeshStandardMaterial?D:b).get(R.envMap||ee.environment),Qe===void 0&&(R.addEventListener("dispose",Ee),Qe=new Map,ee.programs=Qe);let Ge=Qe.get(Be);if(Ge!==void 0){if(ee.currentProgram===Ge&&ee.lightsStateVersion===Le)return _f(R,Ne),Ge}else Ne.uniforms=ce.getUniforms(R),R.onBuild(K,Ne,_),R.onBeforeCompile(Ne,_),Ge=ce.acquireProgram(Ne,Be),Qe.set(Be,Ge),ee.uniforms=Ne.uniforms;const Xe=ee.uniforms;return(!R.isShaderMaterial&&!R.isRawShaderMaterial||R.clipping===!0)&&(Xe.clippingPlanes=Ce.uniform),_f(R,Ne),ee.needsLights=Ev(R),ee.lightsStateVersion=Le,ee.needsLights&&(Xe.ambientLightColor.value=Z.state.ambient,Xe.lightProbe.value=Z.state.probe,Xe.directionalLights.value=Z.state.directional,Xe.directionalLightShadows.value=Z.state.directionalShadow,Xe.spotLights.value=Z.state.spot,Xe.spotLightShadows.value=Z.state.spotShadow,Xe.rectAreaLights.value=Z.state.rectArea,Xe.ltc_1.value=Z.state.rectAreaLTC1,Xe.ltc_2.value=Z.state.rectAreaLTC2,Xe.pointLights.value=Z.state.point,Xe.pointLightShadows.value=Z.state.pointShadow,Xe.hemisphereLights.value=Z.state.hemi,Xe.directionalShadowMap.value=Z.state.directionalShadowMap,Xe.directionalShadowMatrix.value=Z.state.directionalShadowMatrix,Xe.spotShadowMap.value=Z.state.spotShadowMap,Xe.spotLightMatrix.value=Z.state.spotLightMatrix,Xe.spotLightMap.value=Z.state.spotLightMap,Xe.pointShadowMap.value=Z.state.pointShadowMap,Xe.pointShadowMatrix.value=Z.state.pointShadowMatrix),ee.currentProgram=Ge,ee.uniformsList=null,Ge}function yf(R){if(R.uniformsList===null){const W=R.currentProgram.getUniforms();R.uniformsList=Tl.seqWithValue(W.seq,R.uniforms)}return R.uniformsList}function _f(R,W){const K=$.get(R);K.outputColorSpace=W.outputColorSpace,K.batching=W.batching,K.instancing=W.instancing,K.instancingColor=W.instancingColor,K.skinning=W.skinning,K.morphTargets=W.morphTargets,K.morphNormals=W.morphNormals,K.morphColors=W.morphColors,K.morphTargetsCount=W.morphTargetsCount,K.numClippingPlanes=W.numClippingPlanes,K.numIntersection=W.numClipIntersection,K.vertexAlphas=W.vertexAlphas,K.vertexTangents=W.vertexTangents,K.toneMapping=W.toneMapping}function Mv(R,W,K,ee,Z){W.isScene!==!0&&(W=ae),w.resetTextureUnits();const Ae=W.fog,Le=ee.isMeshStandardMaterial?W.environment:null,Ne=A===null?_.outputColorSpace:A.isXRRenderTarget===!0?A.texture.colorSpace:ri,Be=(ee.isMeshStandardMaterial?D:b).get(ee.envMap||Le),Qe=ee.vertexColors===!0&&!!K.attributes.color&&K.attributes.color.itemSize===4,Ge=!!K.attributes.tangent&&(!!ee.normalMap||ee.anisotropy>0),Xe=!!K.morphAttributes.position,It=!!K.morphAttributes.normal,Sn=!!K.morphAttributes.color;let qt=bi;ee.toneMapped&&(A===null||A.isXRRenderTarget===!0)&&(qt=_.toneMapping);const li=K.morphAttributes.position||K.morphAttributes.normal||K.morphAttributes.color,St=li!==void 0?li.length:0,nt=$.get(ee),Bc=g.state.lights;if(fe===!0&&(be===!0||R!==S)){const In=R===S&&ee.id===O;Ce.setState(ee,R,In)}let Tt=!1;ee.version===nt.__version?(nt.needsLights&&nt.lightsStateVersion!==Bc.state.version||nt.outputColorSpace!==Ne||Z.isBatchedMesh&&nt.batching===!1||!Z.isBatchedMesh&&nt.batching===!0||Z.isInstancedMesh&&nt.instancing===!1||!Z.isInstancedMesh&&nt.instancing===!0||Z.isSkinnedMesh&&nt.skinning===!1||!Z.isSkinnedMesh&&nt.skinning===!0||Z.isInstancedMesh&&nt.instancingColor===!0&&Z.instanceColor===null||Z.isInstancedMesh&&nt.instancingColor===!1&&Z.instanceColor!==null||nt.envMap!==Be||ee.fog===!0&&nt.fog!==Ae||nt.numClippingPlanes!==void 0&&(nt.numClippingPlanes!==Ce.numPlanes||nt.numIntersection!==Ce.numIntersection)||nt.vertexAlphas!==Qe||nt.vertexTangents!==Ge||nt.morphTargets!==Xe||nt.morphNormals!==It||nt.morphColors!==Sn||nt.toneMapping!==qt||U.isWebGL2===!0&&nt.morphTargetsCount!==St)&&(Tt=!0):(Tt=!0,nt.__version=ee.version);let os=nt.currentProgram;Tt===!0&&(os=ga(ee,W,Z));let vf=!1,Yr=!1,zc=!1;const Kt=os.getUniforms(),as=nt.uniforms;if(N.useProgram(os.program)&&(vf=!0,Yr=!0,zc=!0),ee.id!==O&&(O=ee.id,Yr=!0),vf||S!==R){Kt.setValue(L,"projectionMatrix",R.projectionMatrix),Kt.setValue(L,"viewMatrix",R.matrixWorldInverse);const In=Kt.map.cameraPosition;In!==void 0&&In.setValue(L,oe.setFromMatrixPosition(R.matrixWorld)),U.logarithmicDepthBuffer&&Kt.setValue(L,"logDepthBufFC",2/(Math.log(R.far+1)/Math.LN2)),(ee.isMeshPhongMaterial||ee.isMeshToonMaterial||ee.isMeshLambertMaterial||ee.isMeshBasicMaterial||ee.isMeshStandardMaterial||ee.isShaderMaterial)&&Kt.setValue(L,"isOrthographic",R.isOrthographicCamera===!0),S!==R&&(S=R,Yr=!0,zc=!0)}if(Z.isSkinnedMesh){Kt.setOptional(L,Z,"bindMatrix"),Kt.setOptional(L,Z,"bindMatrixInverse");const In=Z.skeleton;In&&(U.floatVertexTextures?(In.boneTexture===null&&In.computeBoneTexture(),Kt.setValue(L,"boneTexture",In.boneTexture,w)):console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required."))}Z.isBatchedMesh&&(Kt.setOptional(L,Z,"batchingTexture"),Kt.setValue(L,"batchingTexture",Z._matricesTexture,w));const Vc=K.morphAttributes;if((Vc.position!==void 0||Vc.normal!==void 0||Vc.color!==void 0&&U.isWebGL2===!0)&&Ve.update(Z,K,os),(Yr||nt.receiveShadow!==Z.receiveShadow)&&(nt.receiveShadow=Z.receiveShadow,Kt.setValue(L,"receiveShadow",Z.receiveShadow)),ee.isMeshGouraudMaterial&&ee.envMap!==null&&(as.envMap.value=Be,as.flipEnvMap.value=Be.isCubeTexture&&Be.isRenderTargetTexture===!1?-1:1),Yr&&(Kt.setValue(L,"toneMappingExposure",_.toneMappingExposure),nt.needsLights&&Sv(as,zc),Ae&&ee.fog===!0&&ie.refreshFogUniforms(as,Ae),ie.refreshMaterialUniforms(as,ee,te,X,Me),Tl.upload(L,yf(nt),as,w)),ee.isShaderMaterial&&ee.uniformsNeedUpdate===!0&&(Tl.upload(L,yf(nt),as,w),ee.uniformsNeedUpdate=!1),ee.isSpriteMaterial&&Kt.setValue(L,"center",Z.center),Kt.setValue(L,"modelViewMatrix",Z.modelViewMatrix),Kt.setValue(L,"normalMatrix",Z.normalMatrix),Kt.setValue(L,"modelMatrix",Z.matrixWorld),ee.isShaderMaterial||ee.isRawShaderMaterial){const In=ee.uniformsGroups;for(let Hc=0,Tv=In.length;Hc<Tv;Hc++)if(U.isWebGL2){const xf=In[Hc];Ze.update(xf,os),Ze.bind(xf,os)}else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.")}return os}function Sv(R,W){R.ambientLightColor.needsUpdate=W,R.lightProbe.needsUpdate=W,R.directionalLights.needsUpdate=W,R.directionalLightShadows.needsUpdate=W,R.pointLights.needsUpdate=W,R.pointLightShadows.needsUpdate=W,R.spotLights.needsUpdate=W,R.spotLightShadows.needsUpdate=W,R.rectAreaLights.needsUpdate=W,R.hemisphereLights.needsUpdate=W}function Ev(R){return R.isMeshLambertMaterial||R.isMeshToonMaterial||R.isMeshPhongMaterial||R.isMeshStandardMaterial||R.isShadowMaterial||R.isShaderMaterial&&R.lights===!0}this.getActiveCubeFace=function(){return P},this.getActiveMipmapLevel=function(){return M},this.getRenderTarget=function(){return A},this.setRenderTargetTextures=function(R,W,K){$.get(R.texture).__webglTexture=W,$.get(R.depthTexture).__webglTexture=K;const ee=$.get(R);ee.__hasExternalTextures=!0,ee.__hasExternalTextures&&(ee.__autoAllocateDepthBuffer=K===void 0,ee.__autoAllocateDepthBuffer||T.has("WEBGL_multisampled_render_to_texture")===!0&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),ee.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(R,W){const K=$.get(R);K.__webglFramebuffer=W,K.__useDefaultFramebuffer=W===void 0},this.setRenderTarget=function(R,W=0,K=0){A=R,P=W,M=K;let ee=!0,Z=null,Ae=!1,Le=!1;if(R){const Be=$.get(R);Be.__useDefaultFramebuffer!==void 0?(N.bindFramebuffer(L.FRAMEBUFFER,null),ee=!1):Be.__webglFramebuffer===void 0?w.setupRenderTarget(R):Be.__hasExternalTextures&&w.rebindTextures(R,$.get(R.texture).__webglTexture,$.get(R.depthTexture).__webglTexture);const Qe=R.texture;(Qe.isData3DTexture||Qe.isDataArrayTexture||Qe.isCompressedArrayTexture)&&(Le=!0);const Ge=$.get(R).__webglFramebuffer;R.isWebGLCubeRenderTarget?(Array.isArray(Ge[W])?Z=Ge[W][K]:Z=Ge[W],Ae=!0):U.isWebGL2&&R.samples>0&&w.useMultisampledRTT(R)===!1?Z=$.get(R).__webglMultisampledFramebuffer:Array.isArray(Ge)?Z=Ge[K]:Z=Ge,C.copy(R.viewport),G.copy(R.scissor),J=R.scissorTest}else C.copy(he).multiplyScalar(te).floor(),G.copy(pe).multiplyScalar(te).floor(),J=ge;if(N.bindFramebuffer(L.FRAMEBUFFER,Z)&&U.drawBuffers&&ee&&N.drawBuffers(R,Z),N.viewport(C),N.scissor(G),N.setScissorTest(J),Ae){const Be=$.get(R.texture);L.framebufferTexture2D(L.FRAMEBUFFER,L.COLOR_ATTACHMENT0,L.TEXTURE_CUBE_MAP_POSITIVE_X+W,Be.__webglTexture,K)}else if(Le){const Be=$.get(R.texture),Qe=W||0;L.framebufferTextureLayer(L.FRAMEBUFFER,L.COLOR_ATTACHMENT0,Be.__webglTexture,K||0,Qe)}O=-1},this.readRenderTargetPixels=function(R,W,K,ee,Z,Ae,Le){if(!(R&&R.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let Ne=$.get(R).__webglFramebuffer;if(R.isWebGLCubeRenderTarget&&Le!==void 0&&(Ne=Ne[Le]),Ne){N.bindFramebuffer(L.FRAMEBUFFER,Ne);try{const Be=R.texture,Qe=Be.format,Ge=Be.type;if(Qe!==vn&&Re.convert(Qe)!==L.getParameter(L.IMPLEMENTATION_COLOR_READ_FORMAT)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const Xe=Ge===Ur&&(T.has("EXT_color_buffer_half_float")||U.isWebGL2&&T.has("EXT_color_buffer_float"));if(Ge!==wi&&Re.convert(Ge)!==L.getParameter(L.IMPLEMENTATION_COLOR_READ_TYPE)&&!(Ge===Vn&&(U.isWebGL2||T.has("OES_texture_float")||T.has("WEBGL_color_buffer_float")))&&!Xe){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}W>=0&&W<=R.width-ee&&K>=0&&K<=R.height-Z&&L.readPixels(W,K,ee,Z,Re.convert(Qe),Re.convert(Ge),Ae)}finally{const Be=A!==null?$.get(A).__webglFramebuffer:null;N.bindFramebuffer(L.FRAMEBUFFER,Be)}}},this.copyFramebufferToTexture=function(R,W,K=0){const ee=Math.pow(2,-K),Z=Math.floor(W.image.width*ee),Ae=Math.floor(W.image.height*ee);w.setTexture2D(W,0),L.copyTexSubImage2D(L.TEXTURE_2D,K,0,0,R.x,R.y,Z,Ae),N.unbindTexture()},this.copyTextureToTexture=function(R,W,K,ee=0){const Z=W.image.width,Ae=W.image.height,Le=Re.convert(K.format),Ne=Re.convert(K.type);w.setTexture2D(K,0),L.pixelStorei(L.UNPACK_FLIP_Y_WEBGL,K.flipY),L.pixelStorei(L.UNPACK_PREMULTIPLY_ALPHA_WEBGL,K.premultiplyAlpha),L.pixelStorei(L.UNPACK_ALIGNMENT,K.unpackAlignment),W.isDataTexture?L.texSubImage2D(L.TEXTURE_2D,ee,R.x,R.y,Z,Ae,Le,Ne,W.image.data):W.isCompressedTexture?L.compressedTexSubImage2D(L.TEXTURE_2D,ee,R.x,R.y,W.mipmaps[0].width,W.mipmaps[0].height,Le,W.mipmaps[0].data):L.texSubImage2D(L.TEXTURE_2D,ee,R.x,R.y,Le,Ne,W.image),ee===0&&K.generateMipmaps&&L.generateMipmap(L.TEXTURE_2D),N.unbindTexture()},this.copyTextureToTexture3D=function(R,W,K,ee,Z=0){if(_.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const Ae=R.max.x-R.min.x+1,Le=R.max.y-R.min.y+1,Ne=R.max.z-R.min.z+1,Be=Re.convert(ee.format),Qe=Re.convert(ee.type);let Ge;if(ee.isData3DTexture)w.setTexture3D(ee,0),Ge=L.TEXTURE_3D;else if(ee.isDataArrayTexture||ee.isCompressedArrayTexture)w.setTexture2DArray(ee,0),Ge=L.TEXTURE_2D_ARRAY;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}L.pixelStorei(L.UNPACK_FLIP_Y_WEBGL,ee.flipY),L.pixelStorei(L.UNPACK_PREMULTIPLY_ALPHA_WEBGL,ee.premultiplyAlpha),L.pixelStorei(L.UNPACK_ALIGNMENT,ee.unpackAlignment);const Xe=L.getParameter(L.UNPACK_ROW_LENGTH),It=L.getParameter(L.UNPACK_IMAGE_HEIGHT),Sn=L.getParameter(L.UNPACK_SKIP_PIXELS),qt=L.getParameter(L.UNPACK_SKIP_ROWS),li=L.getParameter(L.UNPACK_SKIP_IMAGES),St=K.isCompressedTexture?K.mipmaps[Z]:K.image;L.pixelStorei(L.UNPACK_ROW_LENGTH,St.width),L.pixelStorei(L.UNPACK_IMAGE_HEIGHT,St.height),L.pixelStorei(L.UNPACK_SKIP_PIXELS,R.min.x),L.pixelStorei(L.UNPACK_SKIP_ROWS,R.min.y),L.pixelStorei(L.UNPACK_SKIP_IMAGES,R.min.z),K.isDataTexture||K.isData3DTexture?L.texSubImage3D(Ge,Z,W.x,W.y,W.z,Ae,Le,Ne,Be,Qe,St.data):K.isCompressedArrayTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),L.compressedTexSubImage3D(Ge,Z,W.x,W.y,W.z,Ae,Le,Ne,Be,St.data)):L.texSubImage3D(Ge,Z,W.x,W.y,W.z,Ae,Le,Ne,Be,Qe,St),L.pixelStorei(L.UNPACK_ROW_LENGTH,Xe),L.pixelStorei(L.UNPACK_IMAGE_HEIGHT,It),L.pixelStorei(L.UNPACK_SKIP_PIXELS,Sn),L.pixelStorei(L.UNPACK_SKIP_ROWS,qt),L.pixelStorei(L.UNPACK_SKIP_IMAGES,li),Z===0&&ee.generateMipmaps&&L.generateMipmap(Ge),N.unbindTexture()},this.initTexture=function(R){R.isCubeTexture?w.setTextureCube(R,0):R.isData3DTexture?w.setTexture3D(R,0):R.isDataArrayTexture||R.isCompressedArrayTexture?w.setTexture2DArray(R,0):w.setTexture2D(R,0),N.unbindTexture()},this.resetState=function(){P=0,M=0,A=null,N.reset(),De.reset()},typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Hn}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(e){this._outputColorSpace=e;const t=this.getContext();t.drawingBufferColorSpace=e===pc?"display-p3":"srgb",t.unpackColorSpace=ut.workingColorSpace===sa?"display-p3":"srgb"}get outputEncoding(){return console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace===Ft?ji:Pd}set outputEncoding(e){console.warn("THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead."),this.outputColorSpace=e===ji?Ft:ri}get useLegacyLights(){return console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights}set useLegacyLights(e){console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."),this._useLegacyLights=e}}class x_ extends xo{}x_.prototype.isWebGL1Renderer=!0;class _c{constructor(e,t=25e-5){this.isFogExp2=!0,this.name="",this.color=new Te(e),this.density=t}clone(){return new _c(this.color,this.density)}toJSON(){return{type:"FogExp2",name:this.name,color:this.color.getHex(),density:this.density}}}class vc{constructor(e,t=1,i=1e3){this.isFog=!0,this.name="",this.color=new Te(e),this.near=t,this.far=i}clone(){return new vc(this.color,this.near,this.far)}toJSON(){return{type:"Fog",name:this.name,color:this.color.getHex(),near:this.near,far:this.far}}}class Vd extends lt{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.overrideMaterial=null,typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(e,t){return super.copy(e,t),e.background!==null&&(this.background=e.background.clone()),e.environment!==null&&(this.environment=e.environment.clone()),e.fog!==null&&(this.fog=e.fog.clone()),this.backgroundBlurriness=e.backgroundBlurriness,this.backgroundIntensity=e.backgroundIntensity,e.overrideMaterial!==null&&(this.overrideMaterial=e.overrideMaterial.clone()),this.matrixAutoUpdate=e.matrixAutoUpdate,this}toJSON(e){const t=super.toJSON(e);return this.fog!==null&&(t.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(t.object.backgroundBlurriness=this.backgroundBlurriness),this.backgroundIntensity!==1&&(t.object.backgroundIntensity=this.backgroundIntensity),t}}class xc{constructor(e,t){this.isInterleavedBuffer=!0,this.array=e,this.stride=t,this.count=e!==void 0?e.length/t:0,this.usage=Vo,this._updateRange={offset:0,count:-1},this.updateRanges=[],this.version=0,this.uuid=Rn()}onUploadCallback(){}set needsUpdate(e){e===!0&&this.version++}get updateRange(){return console.warn("THREE.InterleavedBuffer: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead."),this._updateRange}setUsage(e){return this.usage=e,this}addUpdateRange(e,t){this.updateRanges.push({start:e,count:t})}clearUpdateRanges(){this.updateRanges.length=0}copy(e){return this.array=new e.array.constructor(e.array),this.count=e.count,this.stride=e.stride,this.usage=e.usage,this}copyAt(e,t,i){e*=this.stride,i*=t.stride;for(let s=0,r=this.stride;s<r;s++)this.array[e+s]=t.array[i+s];return this}set(e,t=0){return this.array.set(e,t),this}clone(e){e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Rn()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]),i=new this.constructor(t,this.stride);return i.setUsage(this.usage),i}onUpload(e){return this.onUploadCallback=e,this}toJSON(e){return e.arrayBuffers===void 0&&(e.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Rn()),e.arrayBuffers[this.array.buffer._uuid]===void 0&&(e.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const cn=new I;class Vs{constructor(e,t,i,s=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=e,this.itemSize=t,this.offset=i,this.normalized=s}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(e){this.data.needsUpdate=e}applyMatrix4(e){for(let t=0,i=this.data.count;t<i;t++)cn.fromBufferAttribute(this,t),cn.applyMatrix4(e),this.setXYZ(t,cn.x,cn.y,cn.z);return this}applyNormalMatrix(e){for(let t=0,i=this.count;t<i;t++)cn.fromBufferAttribute(this,t),cn.applyNormalMatrix(e),this.setXYZ(t,cn.x,cn.y,cn.z);return this}transformDirection(e){for(let t=0,i=this.count;t<i;t++)cn.fromBufferAttribute(this,t),cn.transformDirection(e),this.setXYZ(t,cn.x,cn.y,cn.z);return this}setX(e,t){return this.normalized&&(t=Ye(t,this.array)),this.data.array[e*this.data.stride+this.offset]=t,this}setY(e,t){return this.normalized&&(t=Ye(t,this.array)),this.data.array[e*this.data.stride+this.offset+1]=t,this}setZ(e,t){return this.normalized&&(t=Ye(t,this.array)),this.data.array[e*this.data.stride+this.offset+2]=t,this}setW(e,t){return this.normalized&&(t=Ye(t,this.array)),this.data.array[e*this.data.stride+this.offset+3]=t,this}getX(e){let t=this.data.array[e*this.data.stride+this.offset];return this.normalized&&(t=xn(t,this.array)),t}getY(e){let t=this.data.array[e*this.data.stride+this.offset+1];return this.normalized&&(t=xn(t,this.array)),t}getZ(e){let t=this.data.array[e*this.data.stride+this.offset+2];return this.normalized&&(t=xn(t,this.array)),t}getW(e){let t=this.data.array[e*this.data.stride+this.offset+3];return this.normalized&&(t=xn(t,this.array)),t}setXY(e,t,i){return e=e*this.data.stride+this.offset,this.normalized&&(t=Ye(t,this.array),i=Ye(i,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=i,this}setXYZ(e,t,i,s){return e=e*this.data.stride+this.offset,this.normalized&&(t=Ye(t,this.array),i=Ye(i,this.array),s=Ye(s,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=i,this.data.array[e+2]=s,this}setXYZW(e,t,i,s,r){return e=e*this.data.stride+this.offset,this.normalized&&(t=Ye(t,this.array),i=Ye(i,this.array),s=Ye(s,this.array),r=Ye(r,this.array)),this.data.array[e+0]=t,this.data.array[e+1]=i,this.data.array[e+2]=s,this.data.array[e+3]=r,this}clone(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let i=0;i<this.count;i++){const s=i*this.data.stride+this.offset;for(let r=0;r<this.itemSize;r++)t.push(this.data.array[s+r])}return new ct(new this.array.constructor(t),this.itemSize,this.normalized)}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.clone(e)),new Vs(e.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(e){if(e===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let i=0;i<this.count;i++){const s=i*this.data.stride+this.offset;for(let r=0;r<this.itemSize;r++)t.push(this.data.array[s+r])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else return e.interleavedBuffers===void 0&&(e.interleavedBuffers={}),e.interleavedBuffers[this.data.uuid]===void 0&&(e.interleavedBuffers[this.data.uuid]=this.data.toJSON(e)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class Hd extends on{constructor(e){super(),this.isSpriteMaterial=!0,this.type="SpriteMaterial",this.color=new Te(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.rotation=e.rotation,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}let hr;const to=new I,ur=new I,dr=new I,fr=new ue,no=new ue,b_=new Oe,qa=new I,io=new I,Xa=new I,em=new ue,Mh=new ue,tm=new ue;class w_ extends lt{constructor(e=new Hd){if(super(),this.isSprite=!0,this.type="Sprite",hr===void 0){hr=new Je;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),i=new xc(t,5);hr.setIndex([0,1,2,0,2,3]),hr.setAttribute("position",new Vs(i,3,0,!1)),hr.setAttribute("uv",new Vs(i,2,3,!1))}this.geometry=hr,this.material=e,this.center=new ue(.5,.5)}raycast(e,t){e.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),ur.setFromMatrixScale(this.matrixWorld),b_.copy(e.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse,this.matrixWorld),dr.setFromMatrixPosition(this.modelViewMatrix),e.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&ur.multiplyScalar(-dr.z);const i=this.material.rotation;let s,r;i!==0&&(r=Math.cos(i),s=Math.sin(i));const o=this.center;$a(qa.set(-.5,-.5,0),dr,o,ur,s,r),$a(io.set(.5,-.5,0),dr,o,ur,s,r),$a(Xa.set(.5,.5,0),dr,o,ur,s,r),em.set(0,0),Mh.set(1,0),tm.set(1,1);let a=e.ray.intersectTriangle(qa,io,Xa,!1,to);if(a===null&&($a(io.set(-.5,.5,0),dr,o,ur,s,r),Mh.set(0,1),a=e.ray.intersectTriangle(qa,Xa,io,!1,to),a===null))return;const l=e.ray.origin.distanceTo(to);l<e.near||l>e.far||t.push({distance:l,point:to.clone(),uv:_n.getInterpolation(to,qa,io,Xa,em,Mh,tm,new ue),face:null,object:this})}copy(e,t){return super.copy(e,t),e.center!==void 0&&this.center.copy(e.center),this.material=e.material,this}}function $a(n,e,t,i,s,r){fr.subVectors(n,t).addScalar(.5).multiply(i),s!==void 0?(no.x=r*fr.x-s*fr.y,no.y=s*fr.x+r*fr.y):no.copy(fr),n.copy(e),n.x+=no.x,n.y+=no.y,n.applyMatrix4(b_)}const Ya=new I,nm=new I;class M_ extends lt{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(e){super.copy(e,!1);const t=e.levels;for(let i=0,s=t.length;i<s;i++){const r=t[i];this.addLevel(r.object.clone(),r.distance,r.hysteresis)}return this.autoUpdate=e.autoUpdate,this}addLevel(e,t=0,i=0){t=Math.abs(t);const s=this.levels;let r;for(r=0;r<s.length&&!(t<s[r].distance);r++);return s.splice(r,0,{distance:t,hysteresis:i,object:e}),this.add(e),this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(e){const t=this.levels;if(t.length>0){let i,s;for(i=1,s=t.length;i<s;i++){let r=t[i].distance;if(t[i].object.visible&&(r-=r*t[i].hysteresis),e<r)break}return t[i-1].object}return null}raycast(e,t){if(this.levels.length>0){Ya.setFromMatrixPosition(this.matrixWorld);const s=e.ray.origin.distanceTo(Ya);this.getObjectForDistance(s).raycast(e,t)}}update(e){const t=this.levels;if(t.length>1){Ya.setFromMatrixPosition(e.matrixWorld),nm.setFromMatrixPosition(this.matrixWorld);const i=Ya.distanceTo(nm)/e.zoom;t[0].object.visible=!0;let s,r;for(s=1,r=t.length;s<r;s++){let o=t[s].distance;if(t[s].object.visible&&(o-=o*t[s].hysteresis),i>=o)t[s-1].object.visible=!1,t[s].object.visible=!0;else break}for(this._currentLevel=s-1;s<r;s++)t[s].object.visible=!1}}toJSON(e){const t=super.toJSON(e);this.autoUpdate===!1&&(t.object.autoUpdate=!1),t.object.levels=[];const i=this.levels;for(let s=0,r=i.length;s<r;s++){const o=i[s];t.object.levels.push({object:o.object.uuid,distance:o.distance,hysteresis:o.hysteresis})}return t}}const im=new I,sm=new dt,rm=new dt,dR=new I,om=new Oe,ja=new I,Sh=new rn,am=new Oe,Eh=new Wr;class S_ extends zt{constructor(e,t){super(e,t),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode=lu,this.bindMatrix=new Oe,this.bindMatrixInverse=new Oe,this.boundingBox=null,this.boundingSphere=null}computeBoundingBox(){const e=this.geometry;this.boundingBox===null&&(this.boundingBox=new fn),this.boundingBox.makeEmpty();const t=e.getAttribute("position");for(let i=0;i<t.count;i++)this.getVertexPosition(i,ja),this.boundingBox.expandByPoint(ja)}computeBoundingSphere(){const e=this.geometry;this.boundingSphere===null&&(this.boundingSphere=new rn),this.boundingSphere.makeEmpty();const t=e.getAttribute("position");for(let i=0;i<t.count;i++)this.getVertexPosition(i,ja),this.boundingSphere.expandByPoint(ja)}copy(e,t){return super.copy(e,t),this.bindMode=e.bindMode,this.bindMatrix.copy(e.bindMatrix),this.bindMatrixInverse.copy(e.bindMatrixInverse),this.skeleton=e.skeleton,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}raycast(e,t){const i=this.material,s=this.matrixWorld;i!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),Sh.copy(this.boundingSphere),Sh.applyMatrix4(s),e.ray.intersectsSphere(Sh)!==!1&&(am.copy(s).invert(),Eh.copy(e.ray).applyMatrix4(am),!(this.boundingBox!==null&&Eh.intersectsBox(this.boundingBox)===!1)&&this._computeIntersections(e,t,Eh)))}getVertexPosition(e,t){return super.getVertexPosition(e,t),this.applyBoneTransform(e,t),t}bind(e,t){this.skeleton=e,t===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.copy(t).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const e=new dt,t=this.geometry.attributes.skinWeight;for(let i=0,s=t.count;i<s;i++){e.fromBufferAttribute(t,i);const r=1/e.manhattanLength();r!==1/0?e.multiplyScalar(r):e.set(1,0,0,0),t.setXYZW(i,e.x,e.y,e.z,e.w)}}updateMatrixWorld(e){super.updateMatrixWorld(e),this.bindMode===lu?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode===Oy?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}applyBoneTransform(e,t){const i=this.skeleton,s=this.geometry;sm.fromBufferAttribute(s.attributes.skinIndex,e),rm.fromBufferAttribute(s.attributes.skinWeight,e),im.copy(t).applyMatrix4(this.bindMatrix),t.set(0,0,0);for(let r=0;r<4;r++){const o=rm.getComponent(r);if(o!==0){const a=sm.getComponent(r);om.multiplyMatrices(i.bones[a].matrixWorld,i.boneInverses[a]),t.addScaledVector(dR.copy(im).applyMatrix4(om),o)}}return t.applyMatrix4(this.bindMatrixInverse)}boneTransform(e,t){return console.warn("THREE.SkinnedMesh: .boneTransform() was renamed to .applyBoneTransform() in r151."),this.applyBoneTransform(e,t)}}class Gd extends lt{constructor(){super(),this.isBone=!0,this.type="Bone"}}class Fs extends Nt{constructor(e=null,t=1,i=1,s,r,o,a,l,c=Dt,h=Dt,u,d){super(null,o,a,l,c,h,s,r,u,d),this.isDataTexture=!0,this.image={data:e,width:t,height:i},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const lm=new Oe,fR=new Oe;class bc{constructor(e=[],t=[]){this.uuid=Rn(),this.bones=e.slice(0),this.boneInverses=t,this.boneMatrices=null,this.boneTexture=null,this.init()}init(){const e=this.bones,t=this.boneInverses;if(this.boneMatrices=new Float32Array(e.length*16),t.length===0)this.calculateInverses();else if(e.length!==t.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let i=0,s=this.bones.length;i<s;i++)this.boneInverses.push(new Oe)}}calculateInverses(){this.boneInverses.length=0;for(let e=0,t=this.bones.length;e<t;e++){const i=new Oe;this.bones[e]&&i.copy(this.bones[e].matrixWorld).invert(),this.boneInverses.push(i)}}pose(){for(let e=0,t=this.bones.length;e<t;e++){const i=this.bones[e];i&&i.matrixWorld.copy(this.boneInverses[e]).invert()}for(let e=0,t=this.bones.length;e<t;e++){const i=this.bones[e];i&&(i.parent&&i.parent.isBone?(i.matrix.copy(i.parent.matrixWorld).invert(),i.matrix.multiply(i.matrixWorld)):i.matrix.copy(i.matrixWorld),i.matrix.decompose(i.position,i.quaternion,i.scale))}}update(){const e=this.bones,t=this.boneInverses,i=this.boneMatrices,s=this.boneTexture;for(let r=0,o=e.length;r<o;r++){const a=e[r]?e[r].matrixWorld:fR;lm.multiplyMatrices(a,t[r]),lm.toArray(i,r*16)}s!==null&&(s.needsUpdate=!0)}clone(){return new bc(this.bones,this.boneInverses)}computeBoneTexture(){let e=Math.sqrt(this.bones.length*4);e=Math.ceil(e/4)*4,e=Math.max(e,4);const t=new Float32Array(e*e*4);t.set(this.boneMatrices);const i=new Fs(t,e,e,vn,Vn);return i.needsUpdate=!0,this.boneMatrices=t,this.boneTexture=i,this}getBoneByName(e){for(let t=0,i=this.bones.length;t<i;t++){const s=this.bones[t];if(s.name===e)return s}}dispose(){this.boneTexture!==null&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(e,t){this.uuid=e.uuid;for(let i=0,s=e.bones.length;i<s;i++){const r=e.bones[i];let o=t[r];o===void 0&&(console.warn("THREE.Skeleton: No bone found with UUID:",r),o=new Gd),this.bones.push(o),this.boneInverses.push(new Oe().fromArray(e.boneInverses[i]))}return this.init(),this}toJSON(){const e={metadata:{version:4.6,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};e.uuid=this.uuid;const t=this.bones,i=this.boneInverses;for(let s=0,r=t.length;s<r;s++){const o=t[s];e.bones.push(o.uuid);const a=i[s];e.boneInverses.push(a.toArray())}return e}}class kr extends ct{constructor(e,t,i,s=1){super(e,t,i),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=s}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}toJSON(){const e=super.toJSON();return e.meshPerAttribute=this.meshPerAttribute,e.isInstancedBufferAttribute=!0,e}}const pr=new Oe,cm=new Oe,Za=[],hm=new fn,pR=new Oe,so=new zt,ro=new rn;class E_ extends zt{constructor(e,t,i){super(e,t),this.isInstancedMesh=!0,this.instanceMatrix=new kr(new Float32Array(i*16),16),this.instanceColor=null,this.count=i,this.boundingBox=null,this.boundingSphere=null;for(let s=0;s<i;s++)this.setMatrixAt(s,pR)}computeBoundingBox(){const e=this.geometry,t=this.count;this.boundingBox===null&&(this.boundingBox=new fn),e.boundingBox===null&&e.computeBoundingBox(),this.boundingBox.makeEmpty();for(let i=0;i<t;i++)this.getMatrixAt(i,pr),hm.copy(e.boundingBox).applyMatrix4(pr),this.boundingBox.union(hm)}computeBoundingSphere(){const e=this.geometry,t=this.count;this.boundingSphere===null&&(this.boundingSphere=new rn),e.boundingSphere===null&&e.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let i=0;i<t;i++)this.getMatrixAt(i,pr),ro.copy(e.boundingSphere).applyMatrix4(pr),this.boundingSphere.union(ro)}copy(e,t){return super.copy(e,t),this.instanceMatrix.copy(e.instanceMatrix),e.instanceColor!==null&&(this.instanceColor=e.instanceColor.clone()),this.count=e.count,e.boundingBox!==null&&(this.boundingBox=e.boundingBox.clone()),e.boundingSphere!==null&&(this.boundingSphere=e.boundingSphere.clone()),this}getColorAt(e,t){t.fromArray(this.instanceColor.array,e*3)}getMatrixAt(e,t){t.fromArray(this.instanceMatrix.array,e*16)}raycast(e,t){const i=this.matrixWorld,s=this.count;if(so.geometry=this.geometry,so.material=this.material,so.material!==void 0&&(this.boundingSphere===null&&this.computeBoundingSphere(),ro.copy(this.boundingSphere),ro.applyMatrix4(i),e.ray.intersectsSphere(ro)!==!1))for(let r=0;r<s;r++){this.getMatrixAt(r,pr),cm.multiplyMatrices(i,pr),so.matrixWorld=cm,so.raycast(e,Za);for(let o=0,a=Za.length;o<a;o++){const l=Za[o];l.instanceId=r,l.object=this,t.push(l)}Za.length=0}}setColorAt(e,t){this.instanceColor===null&&(this.instanceColor=new kr(new Float32Array(this.instanceMatrix.count*3),3)),t.toArray(this.instanceColor.array,e*3)}setMatrixAt(e,t){t.toArray(this.instanceMatrix.array,e*16)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}function mR(n,e){return n.z-e.z}function gR(n,e){return e.z-n.z}class yR{constructor(){this.index=0,this.pool=[],this.list=[]}push(e,t){const i=this.pool,s=this.list;this.index>=i.length&&i.push({start:-1,count:-1,z:-1});const r=i[this.index];s.push(r),this.index++,r.start=e.start,r.count=e.count,r.z=t}reset(){this.list.length=0,this.index=0}}const mr="batchId",Fi=new Oe,um=new Oe,_R=new Oe,dm=new Oe,Th=new la,Ka=new fn,ps=new rn,oo=new I,Ah=new yR,en=new zt,Ja=[];function vR(n,e,t=0){const i=e.itemSize;if(n.isInterleavedBufferAttribute||n.array.constructor!==e.array.constructor){const s=n.count;for(let r=0;r<s;r++)for(let o=0;o<i;o++)e.setComponent(r+t,o,n.getComponent(r,o))}else e.array.set(n.array,t*i);e.needsUpdate=!0}class T_ extends zt{get maxGeometryCount(){return this._maxGeometryCount}constructor(e,t,i=t*2,s){super(new Je,s),this.isBatchedMesh=!0,this.perObjectFrustumCulled=!0,this.sortObjects=!0,this.boundingBox=null,this.boundingSphere=null,this.customSort=null,this._drawRanges=[],this._reservedRanges=[],this._visibility=[],this._active=[],this._bounds=[],this._maxGeometryCount=e,this._maxVertexCount=t,this._maxIndexCount=i,this._geometryInitialized=!1,this._geometryCount=0,this._multiDrawCounts=new Int32Array(e),this._multiDrawStarts=new Int32Array(e),this._multiDrawCount=0,this._visibilityChanged=!0,this._matricesTexture=null,this._initMatricesTexture()}_initMatricesTexture(){let e=Math.sqrt(this._maxGeometryCount*4);e=Math.ceil(e/4)*4,e=Math.max(e,4);const t=new Float32Array(e*e*4),i=new Fs(t,e,e,vn,Vn);this._matricesTexture=i}_initializeGeometry(e){const t=this.geometry,i=this._maxVertexCount,s=this._maxGeometryCount,r=this._maxIndexCount;if(this._geometryInitialized===!1){for(const a in e.attributes){const l=e.getAttribute(a),{array:c,itemSize:h,normalized:u}=l,d=new c.constructor(i*h),f=new l.constructor(d,h,u);f.setUsage(l.usage),t.setAttribute(a,f)}if(e.getIndex()!==null){const a=i>65536?new Uint32Array(r):new Uint16Array(r);t.setIndex(new ct(a,1))}const o=s>65536?new Uint32Array(i):new Uint16Array(i);t.setAttribute(mr,new ct(o,1)),this._geometryInitialized=!0}}_validateGeometry(e){if(e.getAttribute(mr))throw new Error(`BatchedMesh: Geometry cannot use attribute "${mr}"`);const t=this.geometry;if(!!e.getIndex()!=!!t.getIndex())throw new Error('BatchedMesh: All geometries must consistently have "index".');for(const i in t.attributes){if(i===mr)continue;if(!e.hasAttribute(i))throw new Error(`BatchedMesh: Added geometry missing "${i}". All geometries must have consistent attributes.`);const s=e.getAttribute(i),r=t.getAttribute(i);if(s.itemSize!==r.itemSize||s.normalized!==r.normalized)throw new Error("BatchedMesh: All attributes must have a consistent itemSize and normalized value.")}}setCustomSort(e){return this.customSort=e,this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new fn);const e=this._geometryCount,t=this.boundingBox,i=this._active;t.makeEmpty();for(let s=0;s<e;s++)i[s]!==!1&&(this.getMatrixAt(s,Fi),this.getBoundingBoxAt(s,Ka).applyMatrix4(Fi),t.union(Ka))}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new rn);const e=this._geometryCount,t=this.boundingSphere,i=this._active;t.makeEmpty();for(let s=0;s<e;s++)i[s]!==!1&&(this.getMatrixAt(s,Fi),this.getBoundingSphereAt(s,ps).applyMatrix4(Fi),t.union(ps))}addGeometry(e,t=-1,i=-1){if(this._initializeGeometry(e),this._validateGeometry(e),this._geometryCount>=this._maxGeometryCount)throw new Error("BatchedMesh: Maximum geometry count reached.");const s={vertexStart:-1,vertexCount:-1,indexStart:-1,indexCount:-1};let r=null;const o=this._reservedRanges,a=this._drawRanges,l=this._bounds;this._geometryCount!==0&&(r=o[o.length-1]),t===-1?s.vertexCount=e.getAttribute("position").count:s.vertexCount=t,r===null?s.vertexStart=0:s.vertexStart=r.vertexStart+r.vertexCount;const c=e.getIndex(),h=c!==null;if(h&&(i===-1?s.indexCount=c.count:s.indexCount=i,r===null?s.indexStart=0:s.indexStart=r.indexStart+r.indexCount),s.indexStart!==-1&&s.indexStart+s.indexCount>this._maxIndexCount||s.vertexStart+s.vertexCount>this._maxVertexCount)throw new Error("BatchedMesh: Reserved space request exceeds the maximum buffer size.");const u=this._visibility,d=this._active,f=this._matricesTexture,m=this._matricesTexture.image.data;u.push(!0),d.push(!0);const y=this._geometryCount;this._geometryCount++,_R.toArray(m,y*16),f.needsUpdate=!0,o.push(s),a.push({start:h?s.indexStart:s.vertexStart,count:-1}),l.push({boxInitialized:!1,box:new fn,sphereInitialized:!1,sphere:new rn});const g=this.geometry.getAttribute(mr);for(let p=0;p<s.vertexCount;p++)g.setX(s.vertexStart+p,y);return g.needsUpdate=!0,this.setGeometryAt(y,e),y}setGeometryAt(e,t){if(e>=this._geometryCount)throw new Error("BatchedMesh: Maximum geometry count reached.");this._validateGeometry(t);const i=this.geometry,s=i.getIndex()!==null,r=i.getIndex(),o=t.getIndex(),a=this._reservedRanges[e];if(s&&o.count>a.indexCount||t.attributes.position.count>a.vertexCount)throw new Error("BatchedMesh: Reserved space not large enough for provided geometry.");const l=a.vertexStart,c=a.vertexCount;for(const f in i.attributes){if(f===mr)continue;const m=t.getAttribute(f),y=i.getAttribute(f);vR(m,y,l);const g=m.itemSize;for(let p=m.count,v=c;p<v;p++){const _=l+p;for(let x=0;x<g;x++)y.setComponent(_,x,0)}y.needsUpdate=!0}if(s){const f=a.indexStart;for(let m=0;m<o.count;m++)r.setX(f+m,l+o.getX(m));for(let m=o.count,y=a.indexCount;m<y;m++)r.setX(f+m,l);r.needsUpdate=!0}const h=this._bounds[e];t.boundingBox!==null?(h.box.copy(t.boundingBox),h.boxInitialized=!0):h.boxInitialized=!1,t.boundingSphere!==null?(h.sphere.copy(t.boundingSphere),h.sphereInitialized=!0):h.sphereInitialized=!1;const u=this._drawRanges[e],d=t.getAttribute("position");return u.count=s?o.count:d.count,this._visibilityChanged=!0,e}deleteGeometry(e){const t=this._active;return e>=t.length||t[e]===!1?this:(t[e]=!1,this._visibilityChanged=!0,this)}getBoundingBoxAt(e,t){if(this._active[e]===!1)return this;const s=this._bounds[e],r=s.box,o=this.geometry;if(s.boxInitialized===!1){r.makeEmpty();const a=o.index,l=o.attributes.position,c=this._drawRanges[e];for(let h=c.start,u=c.start+c.count;h<u;h++){let d=h;a&&(d=a.getX(d)),r.expandByPoint(oo.fromBufferAttribute(l,d))}s.boxInitialized=!0}return t.copy(r),t}getBoundingSphereAt(e,t){if(this._active[e]===!1)return this;const s=this._bounds[e],r=s.sphere,o=this.geometry;if(s.sphereInitialized===!1){r.makeEmpty(),this.getBoundingBoxAt(e,Ka),Ka.getCenter(r.center);const a=o.index,l=o.attributes.position,c=this._drawRanges[e];let h=0;for(let u=c.start,d=c.start+c.count;u<d;u++){let f=u;a&&(f=a.getX(f)),oo.fromBufferAttribute(l,f),h=Math.max(h,r.center.distanceToSquared(oo))}r.radius=Math.sqrt(h),s.sphereInitialized=!0}return t.copy(r),t}setMatrixAt(e,t){const i=this._active,s=this._matricesTexture,r=this._matricesTexture.image.data,o=this._geometryCount;return e>=o||i[e]===!1?this:(t.toArray(r,e*16),s.needsUpdate=!0,this)}getMatrixAt(e,t){const i=this._active,s=this._matricesTexture.image.data,r=this._geometryCount;return e>=r||i[e]===!1?null:t.fromArray(s,e*16)}setVisibleAt(e,t){const i=this._visibility,s=this._active,r=this._geometryCount;return e>=r||s[e]===!1||i[e]===t?this:(i[e]=t,this._visibilityChanged=!0,this)}getVisibleAt(e){const t=this._visibility,i=this._active,s=this._geometryCount;return e>=s||i[e]===!1?!1:t[e]}raycast(e,t){const i=this._visibility,s=this._active,r=this._drawRanges,o=this._geometryCount,a=this.matrixWorld,l=this.geometry;en.material=this.material,en.geometry.index=l.index,en.geometry.attributes=l.attributes,en.geometry.boundingBox===null&&(en.geometry.boundingBox=new fn),en.geometry.boundingSphere===null&&(en.geometry.boundingSphere=new rn);for(let c=0;c<o;c++){if(!i[c]||!s[c])continue;const h=r[c];en.geometry.setDrawRange(h.start,h.count),this.getMatrixAt(c,en.matrixWorld).premultiply(a),this.getBoundingBoxAt(c,en.geometry.boundingBox),this.getBoundingSphereAt(c,en.geometry.boundingSphere),en.raycast(e,Ja);for(let u=0,d=Ja.length;u<d;u++){const f=Ja[u];f.object=this,f.batchId=c,t.push(f)}Ja.length=0}en.material=null,en.geometry.index=null,en.geometry.attributes={},en.geometry.setDrawRange(0,1/0)}copy(e){return super.copy(e),this.geometry=e.geometry.clone(),this.perObjectFrustumCulled=e.perObjectFrustumCulled,this.sortObjects=e.sortObjects,this.boundingBox=e.boundingBox!==null?e.boundingBox.clone():null,this.boundingSphere=e.boundingSphere!==null?e.boundingSphere.clone():null,this._drawRanges=e._drawRanges.map(t=>({...t})),this._reservedRanges=e._reservedRanges.map(t=>({...t})),this._visibility=e._visibility.slice(),this._active=e._active.slice(),this._bounds=e._bounds.map(t=>({boxInitialized:t.boxInitialized,box:t.box.clone(),sphereInitialized:t.sphereInitialized,sphere:t.sphere.clone()})),this._maxGeometryCount=e._maxGeometryCount,this._maxVertexCount=e._maxVertexCount,this._maxIndexCount=e._maxIndexCount,this._geometryInitialized=e._geometryInitialized,this._geometryCount=e._geometryCount,this._multiDrawCounts=e._multiDrawCounts.slice(),this._multiDrawStarts=e._multiDrawStarts.slice(),this._matricesTexture=e._matricesTexture.clone(),this._matricesTexture.image.data=this._matricesTexture.image.slice(),this}dispose(){return this.geometry.dispose(),this._matricesTexture.dispose(),this._matricesTexture=null,this}onBeforeRender(e,t,i,s,r){if(!this._visibilityChanged&&!this.perObjectFrustumCulled&&!this.sortObjects)return;const o=s.getIndex(),a=o===null?1:o.array.BYTES_PER_ELEMENT,l=this._visibility,c=this._multiDrawStarts,h=this._multiDrawCounts,u=this._drawRanges,d=this.perObjectFrustumCulled;d&&(dm.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse).multiply(this.matrixWorld),Th.setFromProjectionMatrix(dm,e.isWebGPURenderer?Nr:Hn));let f=0;if(this.sortObjects){um.copy(this.matrixWorld).invert(),oo.setFromMatrixPosition(i.matrixWorld).applyMatrix4(um);for(let g=0,p=l.length;g<p;g++)if(l[g]){this.getMatrixAt(g,Fi),this.getBoundingSphereAt(g,ps).applyMatrix4(Fi);let v=!1;if(d&&(v=!Th.intersectsSphere(ps)),!v){const _=oo.distanceTo(ps.center);Ah.push(u[g],_)}}const m=Ah.list,y=this.customSort;y===null?m.sort(r.transparent?gR:mR):y.call(this,m,i);for(let g=0,p=m.length;g<p;g++){const v=m[g];c[f]=v.start*a,h[f]=v.count,f++}Ah.reset()}else for(let m=0,y=l.length;m<y;m++)if(l[m]){let g=!1;if(d&&(this.getMatrixAt(m,Fi),this.getBoundingSphereAt(m,ps).applyMatrix4(Fi),g=!Th.intersectsSphere(ps)),!g){const p=u[m];c[f]=p.start*a,h[f]=p.count,f++}}this._multiDrawCount=f,this._visibilityChanged=!1}onBeforeShadow(e,t,i,s,r,o){this.onBeforeRender(e,null,s,r,o)}}class pn extends on{constructor(e){super(),this.isLineBasicMaterial=!0,this.type="LineBasicMaterial",this.color=new Te(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.linewidth=e.linewidth,this.linecap=e.linecap,this.linejoin=e.linejoin,this.fog=e.fog,this}}const fm=new I,pm=new I,mm=new Oe,Ch=new Wr,Qa=new rn;class Qi extends lt{constructor(e=new Je,t=new pn){super(),this.isLine=!0,this.type="Line",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,i=[0];for(let s=1,r=t.count;s<r;s++)fm.fromBufferAttribute(t,s-1),pm.fromBufferAttribute(t,s),i[s]=i[s-1],i[s]+=fm.distanceTo(pm);e.setAttribute("lineDistance",new Pe(i,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(e,t){const i=this.geometry,s=this.matrixWorld,r=e.params.Line.threshold,o=i.drawRange;if(i.boundingSphere===null&&i.computeBoundingSphere(),Qa.copy(i.boundingSphere),Qa.applyMatrix4(s),Qa.radius+=r,e.ray.intersectsSphere(Qa)===!1)return;mm.copy(s).invert(),Ch.copy(e.ray).applyMatrix4(mm);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),l=a*a,c=new I,h=new I,u=new I,d=new I,f=this.isLineSegments?2:1,m=i.index,g=i.attributes.position;if(m!==null){const p=Math.max(0,o.start),v=Math.min(m.count,o.start+o.count);for(let _=p,x=v-1;_<x;_+=f){const P=m.getX(_),M=m.getX(_+1);if(c.fromBufferAttribute(g,P),h.fromBufferAttribute(g,M),Ch.distanceSqToSegment(c,h,d,u)>l)continue;d.applyMatrix4(this.matrixWorld);const O=e.ray.origin.distanceTo(d);O<e.near||O>e.far||t.push({distance:O,point:u.clone().applyMatrix4(this.matrixWorld),index:_,face:null,faceIndex:null,object:this})}}else{const p=Math.max(0,o.start),v=Math.min(g.count,o.start+o.count);for(let _=p,x=v-1;_<x;_+=f){if(c.fromBufferAttribute(g,_),h.fromBufferAttribute(g,_+1),Ch.distanceSqToSegment(c,h,d,u)>l)continue;d.applyMatrix4(this.matrixWorld);const M=e.ray.origin.distanceTo(d);M<e.near||M>e.far||t.push({distance:M,point:u.clone().applyMatrix4(this.matrixWorld),index:_,face:null,faceIndex:null,object:this})}}}updateMorphTargets(){const t=this.geometry.morphAttributes,i=Object.keys(t);if(i.length>0){const s=t[i[0]];if(s!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,o=s.length;r<o;r++){const a=s[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=r}}}}}const gm=new I,ym=new I;class ai extends Qi{constructor(e,t){super(e,t),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const e=this.geometry;if(e.index===null){const t=e.attributes.position,i=[];for(let s=0,r=t.count;s<r;s+=2)gm.fromBufferAttribute(t,s),ym.fromBufferAttribute(t,s+1),i[s]=s===0?0:i[s-1],i[s+1]=i[s]+gm.distanceTo(ym);e.setAttribute("lineDistance",new Pe(i,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class A_ extends Qi{constructor(e,t){super(e,t),this.isLineLoop=!0,this.type="LineLoop"}}class Wd extends on{constructor(e){super(),this.isPointsMaterial=!0,this.type="PointsMaterial",this.color=new Te(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.alphaMap=e.alphaMap,this.size=e.size,this.sizeAttenuation=e.sizeAttenuation,this.fog=e.fog,this}}const _m=new Oe,Bu=new Wr,el=new rn,tl=new I;class C_ extends lt{constructor(e=new Je,t=new Wd){super(),this.isPoints=!0,this.type="Points",this.geometry=e,this.material=t,this.updateMorphTargets()}copy(e,t){return super.copy(e,t),this.material=Array.isArray(e.material)?e.material.slice():e.material,this.geometry=e.geometry,this}raycast(e,t){const i=this.geometry,s=this.matrixWorld,r=e.params.Points.threshold,o=i.drawRange;if(i.boundingSphere===null&&i.computeBoundingSphere(),el.copy(i.boundingSphere),el.applyMatrix4(s),el.radius+=r,e.ray.intersectsSphere(el)===!1)return;_m.copy(s).invert(),Bu.copy(e.ray).applyMatrix4(_m);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),l=a*a,c=i.index,u=i.attributes.position;if(c!==null){const d=Math.max(0,o.start),f=Math.min(c.count,o.start+o.count);for(let m=d,y=f;m<y;m++){const g=c.getX(m);tl.fromBufferAttribute(u,g),vm(tl,g,l,s,e,t,this)}}else{const d=Math.max(0,o.start),f=Math.min(u.count,o.start+o.count);for(let m=d,y=f;m<y;m++)tl.fromBufferAttribute(u,m),vm(tl,m,l,s,e,t,this)}}updateMorphTargets(){const t=this.geometry.morphAttributes,i=Object.keys(t);if(i.length>0){const s=t[i[0]];if(s!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,o=s.length;r<o;r++){const a=s[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=r}}}}}function vm(n,e,t,i,s,r,o){const a=Bu.distanceSqToPoint(n);if(a<t){const l=new I;Bu.closestPointToPoint(n,l),l.applyMatrix4(i);const c=s.ray.origin.distanceTo(l);if(c<s.near||c>s.far)return;r.push({distance:c,distanceToRay:Math.sqrt(a),point:l,index:e,face:null,object:o})}}class xR extends Nt{constructor(e,t,i,s,r,o,a,l,c){super(e,t,i,s,r,o,a,l,c),this.isVideoTexture=!0,this.minFilter=o!==void 0?o:Ut,this.magFilter=r!==void 0?r:Ut,this.generateMipmaps=!1;const h=this;function u(){h.needsUpdate=!0,e.requestVideoFrameCallback(u)}"requestVideoFrameCallback"in e&&e.requestVideoFrameCallback(u)}clone(){return new this.constructor(this.image).copy(this)}update(){const e=this.image;"requestVideoFrameCallback"in e===!1&&e.readyState>=e.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}class bR extends Nt{constructor(e,t){super({width:e,height:t}),this.isFramebufferTexture=!0,this.magFilter=Dt,this.minFilter=Dt,this.generateMipmaps=!1,this.needsUpdate=!0}}class wc extends Nt{constructor(e,t,i,s,r,o,a,l,c,h,u,d){super(null,o,a,l,c,h,s,r,u,d),this.isCompressedTexture=!0,this.image={width:t,height:i},this.mipmaps=e,this.flipY=!1,this.generateMipmaps=!1}}class wR extends wc{constructor(e,t,i,s,r,o){super(e,t,i,r,o),this.isCompressedArrayTexture=!0,this.image.depth=s,this.wrapR=nn}}class MR extends wc{constructor(e,t,i){super(void 0,e[0].width,e[0].height,t,i,Si),this.isCompressedCubeTexture=!0,this.isCubeTexture=!0,this.image=e}}class SR extends Nt{constructor(e,t,i,s,r,o,a,l,c){super(e,t,i,s,r,o,a,l,c),this.isCanvasTexture=!0,this.needsUpdate=!0}}class Yn{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(e,t){const i=this.getUtoTmapping(e);return this.getPoint(i,t)}getPoints(e=5){const t=[];for(let i=0;i<=e;i++)t.push(this.getPoint(i/e));return t}getSpacedPoints(e=5){const t=[];for(let i=0;i<=e;i++)t.push(this.getPointAt(i/e));return t}getLength(){const e=this.getLengths();return e[e.length-1]}getLengths(e=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===e+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let i,s=this.getPoint(0),r=0;t.push(0);for(let o=1;o<=e;o++)i=this.getPoint(o/e),r+=i.distanceTo(s),t.push(r),s=i;return this.cacheArcLengths=t,t}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(e,t){const i=this.getLengths();let s=0;const r=i.length;let o;t?o=t:o=e*i[r-1];let a=0,l=r-1,c;for(;a<=l;)if(s=Math.floor(a+(l-a)/2),c=i[s]-o,c<0)a=s+1;else if(c>0)l=s-1;else{l=s;break}if(s=l,i[s]===o)return s/(r-1);const h=i[s],d=i[s+1]-h,f=(o-h)/d;return(s+f)/(r-1)}getTangent(e,t){let s=e-1e-4,r=e+1e-4;s<0&&(s=0),r>1&&(r=1);const o=this.getPoint(s),a=this.getPoint(r),l=t||(o.isVector2?new ue:new I);return l.copy(a).sub(o).normalize(),l}getTangentAt(e,t){const i=this.getUtoTmapping(e);return this.getTangent(i,t)}computeFrenetFrames(e,t){const i=new I,s=[],r=[],o=[],a=new I,l=new Oe;for(let f=0;f<=e;f++){const m=f/e;s[f]=this.getTangentAt(m,new I)}r[0]=new I,o[0]=new I;let c=Number.MAX_VALUE;const h=Math.abs(s[0].x),u=Math.abs(s[0].y),d=Math.abs(s[0].z);h<=c&&(c=h,i.set(1,0,0)),u<=c&&(c=u,i.set(0,1,0)),d<=c&&i.set(0,0,1),a.crossVectors(s[0],i).normalize(),r[0].crossVectors(s[0],a),o[0].crossVectors(s[0],r[0]);for(let f=1;f<=e;f++){if(r[f]=r[f-1].clone(),o[f]=o[f-1].clone(),a.crossVectors(s[f-1],s[f]),a.length()>Number.EPSILON){a.normalize();const m=Math.acos(Pt(s[f-1].dot(s[f]),-1,1));r[f].applyMatrix4(l.makeRotationAxis(a,m))}o[f].crossVectors(s[f],r[f])}if(t===!0){let f=Math.acos(Pt(r[0].dot(r[e]),-1,1));f/=e,s[0].dot(a.crossVectors(r[0],r[e]))>0&&(f=-f);for(let m=1;m<=e;m++)r[m].applyMatrix4(l.makeRotationAxis(s[m],f*m)),o[m].crossVectors(s[m],r[m])}return{tangents:s,normals:r,binormals:o}}clone(){return new this.constructor().copy(this)}copy(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}toJSON(){const e={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};return e.arcLengthDivisions=this.arcLengthDivisions,e.type=this.type,e}fromJSON(e){return this.arcLengthDivisions=e.arcLengthDivisions,this}}class Mc extends Yn{constructor(e=0,t=0,i=1,s=1,r=0,o=Math.PI*2,a=!1,l=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=e,this.aY=t,this.xRadius=i,this.yRadius=s,this.aStartAngle=r,this.aEndAngle=o,this.aClockwise=a,this.aRotation=l}getPoint(e,t){const i=t||new ue,s=Math.PI*2;let r=this.aEndAngle-this.aStartAngle;const o=Math.abs(r)<Number.EPSILON;for(;r<0;)r+=s;for(;r>s;)r-=s;r<Number.EPSILON&&(o?r=0:r=s),this.aClockwise===!0&&!o&&(r===s?r=-s:r=r-s);const a=this.aStartAngle+e*r;let l=this.aX+this.xRadius*Math.cos(a),c=this.aY+this.yRadius*Math.sin(a);if(this.aRotation!==0){const h=Math.cos(this.aRotation),u=Math.sin(this.aRotation),d=l-this.aX,f=c-this.aY;l=d*h-f*u+this.aX,c=d*u+f*h+this.aY}return i.set(l,c)}copy(e){return super.copy(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}toJSON(){const e=super.toJSON();return e.aX=this.aX,e.aY=this.aY,e.xRadius=this.xRadius,e.yRadius=this.yRadius,e.aStartAngle=this.aStartAngle,e.aEndAngle=this.aEndAngle,e.aClockwise=this.aClockwise,e.aRotation=this.aRotation,e}fromJSON(e){return super.fromJSON(e),this.aX=e.aX,this.aY=e.aY,this.xRadius=e.xRadius,this.yRadius=e.yRadius,this.aStartAngle=e.aStartAngle,this.aEndAngle=e.aEndAngle,this.aClockwise=e.aClockwise,this.aRotation=e.aRotation,this}}class R_ extends Mc{constructor(e,t,i,s,r,o){super(e,t,i,i,s,r,o),this.isArcCurve=!0,this.type="ArcCurve"}}function qd(){let n=0,e=0,t=0,i=0;function s(r,o,a,l){n=r,e=a,t=-3*r+3*o-2*a-l,i=2*r-2*o+a+l}return{initCatmullRom:function(r,o,a,l,c){s(o,a,c*(a-r),c*(l-o))},initNonuniformCatmullRom:function(r,o,a,l,c,h,u){let d=(o-r)/c-(a-r)/(c+h)+(a-o)/h,f=(a-o)/h-(l-o)/(h+u)+(l-a)/u;d*=h,f*=h,s(o,a,d,f)},calc:function(r){const o=r*r,a=o*r;return n+e*r+t*o+i*a}}}const nl=new I,Rh=new qd,Ph=new qd,Ih=new qd;class P_ extends Yn{constructor(e=[],t=!1,i="centripetal",s=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=e,this.closed=t,this.curveType=i,this.tension=s}getPoint(e,t=new I){const i=t,s=this.points,r=s.length,o=(r-(this.closed?0:1))*e;let a=Math.floor(o),l=o-a;this.closed?a+=a>0?0:(Math.floor(Math.abs(a)/r)+1)*r:l===0&&a===r-1&&(a=r-2,l=1);let c,h;this.closed||a>0?c=s[(a-1)%r]:(nl.subVectors(s[0],s[1]).add(s[0]),c=nl);const u=s[a%r],d=s[(a+1)%r];if(this.closed||a+2<r?h=s[(a+2)%r]:(nl.subVectors(s[r-1],s[r-2]).add(s[r-1]),h=nl),this.curveType==="centripetal"||this.curveType==="chordal"){const f=this.curveType==="chordal"?.5:.25;let m=Math.pow(c.distanceToSquared(u),f),y=Math.pow(u.distanceToSquared(d),f),g=Math.pow(d.distanceToSquared(h),f);y<1e-4&&(y=1),m<1e-4&&(m=y),g<1e-4&&(g=y),Rh.initNonuniformCatmullRom(c.x,u.x,d.x,h.x,m,y,g),Ph.initNonuniformCatmullRom(c.y,u.y,d.y,h.y,m,y,g),Ih.initNonuniformCatmullRom(c.z,u.z,d.z,h.z,m,y,g)}else this.curveType==="catmullrom"&&(Rh.initCatmullRom(c.x,u.x,d.x,h.x,this.tension),Ph.initCatmullRom(c.y,u.y,d.y,h.y,this.tension),Ih.initCatmullRom(c.z,u.z,d.z,h.z,this.tension));return i.set(Rh.calc(l),Ph.calc(l),Ih.calc(l)),i}copy(e){super.copy(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){const s=e.points[t];this.points.push(s.clone())}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,i=this.points.length;t<i;t++){const s=this.points[t];e.points.push(s.toArray())}return e.closed=this.closed,e.curveType=this.curveType,e.tension=this.tension,e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){const s=e.points[t];this.points.push(new I().fromArray(s))}return this.closed=e.closed,this.curveType=e.curveType,this.tension=e.tension,this}}function xm(n,e,t,i,s){const r=(i-e)*.5,o=(s-t)*.5,a=n*n,l=n*a;return(2*t-2*i+r+o)*l+(-3*t+3*i-2*r-o)*a+r*n+t}function ER(n,e){const t=1-n;return t*t*e}function TR(n,e){return 2*(1-n)*n*e}function AR(n,e){return n*n*e}function bo(n,e,t,i){return ER(n,e)+TR(n,t)+AR(n,i)}function CR(n,e){const t=1-n;return t*t*t*e}function RR(n,e){const t=1-n;return 3*t*t*n*e}function PR(n,e){return 3*(1-n)*n*n*e}function IR(n,e){return n*n*n*e}function wo(n,e,t,i,s){return CR(n,e)+RR(n,t)+PR(n,i)+IR(n,s)}class Xd extends Yn{constructor(e=new ue,t=new ue,i=new ue,s=new ue){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=e,this.v1=t,this.v2=i,this.v3=s}getPoint(e,t=new ue){const i=t,s=this.v0,r=this.v1,o=this.v2,a=this.v3;return i.set(wo(e,s.x,r.x,o.x,a.x),wo(e,s.y,r.y,o.y,a.y)),i}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class I_ extends Yn{constructor(e=new I,t=new I,i=new I,s=new I){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=e,this.v1=t,this.v2=i,this.v3=s}getPoint(e,t=new I){const i=t,s=this.v0,r=this.v1,o=this.v2,a=this.v3;return i.set(wo(e,s.x,r.x,o.x,a.x),wo(e,s.y,r.y,o.y,a.y),wo(e,s.z,r.z,o.z,a.z)),i}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this.v3.copy(e.v3),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e.v3=this.v3.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this.v3.fromArray(e.v3),this}}class $d extends Yn{constructor(e=new ue,t=new ue){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=e,this.v2=t}getPoint(e,t=new ue){const i=t;return e===1?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(e).add(this.v1)),i}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new ue){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class L_ extends Yn{constructor(e=new I,t=new I){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=e,this.v2=t}getPoint(e,t=new I){const i=t;return e===1?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(e).add(this.v1)),i}getPointAt(e,t){return this.getPoint(e,t)}getTangent(e,t=new I){return t.subVectors(this.v2,this.v1).normalize()}getTangentAt(e,t){return this.getTangent(e,t)}copy(e){return super.copy(e),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class Yd extends Yn{constructor(e=new ue,t=new ue,i=new ue){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=e,this.v1=t,this.v2=i}getPoint(e,t=new ue){const i=t,s=this.v0,r=this.v1,o=this.v2;return i.set(bo(e,s.x,r.x,o.x),bo(e,s.y,r.y,o.y)),i}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class jd extends Yn{constructor(e=new I,t=new I,i=new I){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=e,this.v1=t,this.v2=i}getPoint(e,t=new I){const i=t,s=this.v0,r=this.v1,o=this.v2;return i.set(bo(e,s.x,r.x,o.x),bo(e,s.y,r.y,o.y),bo(e,s.z,r.z,o.z)),i}copy(e){return super.copy(e),this.v0.copy(e.v0),this.v1.copy(e.v1),this.v2.copy(e.v2),this}toJSON(){const e=super.toJSON();return e.v0=this.v0.toArray(),e.v1=this.v1.toArray(),e.v2=this.v2.toArray(),e}fromJSON(e){return super.fromJSON(e),this.v0.fromArray(e.v0),this.v1.fromArray(e.v1),this.v2.fromArray(e.v2),this}}class Zd extends Yn{constructor(e=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=e}getPoint(e,t=new ue){const i=t,s=this.points,r=(s.length-1)*e,o=Math.floor(r),a=r-o,l=s[o===0?o:o-1],c=s[o],h=s[o>s.length-2?s.length-1:o+1],u=s[o>s.length-3?s.length-1:o+2];return i.set(xm(a,l.x,c.x,h.x,u.x),xm(a,l.y,c.y,h.y,u.y)),i}copy(e){super.copy(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){const s=e.points[t];this.points.push(s.clone())}return this}toJSON(){const e=super.toJSON();e.points=[];for(let t=0,i=this.points.length;t<i;t++){const s=this.points[t];e.points.push(s.toArray())}return e}fromJSON(e){super.fromJSON(e),this.points=[];for(let t=0,i=e.points.length;t<i;t++){const s=e.points[t];this.points.push(new ue().fromArray(s))}return this}}var Wl=Object.freeze({__proto__:null,ArcCurve:R_,CatmullRomCurve3:P_,CubicBezierCurve:Xd,CubicBezierCurve3:I_,EllipseCurve:Mc,LineCurve:$d,LineCurve3:L_,QuadraticBezierCurve:Yd,QuadraticBezierCurve3:jd,SplineCurve:Zd});class D_ extends Yn{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(e){this.curves.push(e)}closePath(){const e=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);if(!e.equals(t)){const i=e.isVector2===!0?"LineCurve":"LineCurve3";this.curves.push(new Wl[i](t,e))}return this}getPoint(e,t){const i=e*this.getLength(),s=this.getCurveLengths();let r=0;for(;r<s.length;){if(s[r]>=i){const o=s[r]-i,a=this.curves[r],l=a.getLength(),c=l===0?0:1-o/l;return a.getPointAt(c,t)}r++}return null}getLength(){const e=this.getCurveLengths();return e[e.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const e=[];let t=0;for(let i=0,s=this.curves.length;i<s;i++)t+=this.curves[i].getLength(),e.push(t);return this.cacheLengths=e,e}getSpacedPoints(e=40){const t=[];for(let i=0;i<=e;i++)t.push(this.getPoint(i/e));return this.autoClose&&t.push(t[0]),t}getPoints(e=12){const t=[];let i;for(let s=0,r=this.curves;s<r.length;s++){const o=r[s],a=o.isEllipseCurve?e*2:o.isLineCurve||o.isLineCurve3?1:o.isSplineCurve?e*o.points.length:e,l=o.getPoints(a);for(let c=0;c<l.length;c++){const h=l[c];i&&i.equals(h)||(t.push(h),i=h)}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t}copy(e){super.copy(e),this.curves=[];for(let t=0,i=e.curves.length;t<i;t++){const s=e.curves[t];this.curves.push(s.clone())}return this.autoClose=e.autoClose,this}toJSON(){const e=super.toJSON();e.autoClose=this.autoClose,e.curves=[];for(let t=0,i=this.curves.length;t<i;t++){const s=this.curves[t];e.curves.push(s.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.autoClose=e.autoClose,this.curves=[];for(let t=0,i=e.curves.length;t<i;t++){const s=e.curves[t];this.curves.push(new Wl[s.type]().fromJSON(s))}return this}}class Go extends D_{constructor(e){super(),this.type="Path",this.currentPoint=new ue,e&&this.setFromPoints(e)}setFromPoints(e){this.moveTo(e[0].x,e[0].y);for(let t=1,i=e.length;t<i;t++)this.lineTo(e[t].x,e[t].y);return this}moveTo(e,t){return this.currentPoint.set(e,t),this}lineTo(e,t){const i=new $d(this.currentPoint.clone(),new ue(e,t));return this.curves.push(i),this.currentPoint.set(e,t),this}quadraticCurveTo(e,t,i,s){const r=new Yd(this.currentPoint.clone(),new ue(e,t),new ue(i,s));return this.curves.push(r),this.currentPoint.set(i,s),this}bezierCurveTo(e,t,i,s,r,o){const a=new Xd(this.currentPoint.clone(),new ue(e,t),new ue(i,s),new ue(r,o));return this.curves.push(a),this.currentPoint.set(r,o),this}splineThru(e){const t=[this.currentPoint.clone()].concat(e),i=new Zd(t);return this.curves.push(i),this.currentPoint.copy(e[e.length-1]),this}arc(e,t,i,s,r,o){const a=this.currentPoint.x,l=this.currentPoint.y;return this.absarc(e+a,t+l,i,s,r,o),this}absarc(e,t,i,s,r,o){return this.absellipse(e,t,i,i,s,r,o),this}ellipse(e,t,i,s,r,o,a,l){const c=this.currentPoint.x,h=this.currentPoint.y;return this.absellipse(e+c,t+h,i,s,r,o,a,l),this}absellipse(e,t,i,s,r,o,a,l){const c=new Mc(e,t,i,s,r,o,a,l);if(this.curves.length>0){const u=c.getPoint(0);u.equals(this.currentPoint)||this.lineTo(u.x,u.y)}this.curves.push(c);const h=c.getPoint(1);return this.currentPoint.copy(h),this}copy(e){return super.copy(e),this.currentPoint.copy(e.currentPoint),this}toJSON(){const e=super.toJSON();return e.currentPoint=this.currentPoint.toArray(),e}fromJSON(e){return super.fromJSON(e),this.currentPoint.fromArray(e.currentPoint),this}}class ua extends Je{constructor(e=[new ue(0,-.5),new ue(.5,0),new ue(0,.5)],t=12,i=0,s=Math.PI*2){super(),this.type="LatheGeometry",this.parameters={points:e,segments:t,phiStart:i,phiLength:s},t=Math.floor(t),s=Pt(s,0,Math.PI*2);const r=[],o=[],a=[],l=[],c=[],h=1/t,u=new I,d=new ue,f=new I,m=new I,y=new I;let g=0,p=0;for(let v=0;v<=e.length-1;v++)switch(v){case 0:g=e[v+1].x-e[v].x,p=e[v+1].y-e[v].y,f.x=p*1,f.y=-g,f.z=p*0,y.copy(f),f.normalize(),l.push(f.x,f.y,f.z);break;case e.length-1:l.push(y.x,y.y,y.z);break;default:g=e[v+1].x-e[v].x,p=e[v+1].y-e[v].y,f.x=p*1,f.y=-g,f.z=p*0,m.copy(f),f.x+=y.x,f.y+=y.y,f.z+=y.z,f.normalize(),l.push(f.x,f.y,f.z),y.copy(m)}for(let v=0;v<=t;v++){const _=i+v*h*s,x=Math.sin(_),P=Math.cos(_);for(let M=0;M<=e.length-1;M++){u.x=e[M].x*x,u.y=e[M].y,u.z=e[M].x*P,o.push(u.x,u.y,u.z),d.x=v/t,d.y=M/(e.length-1),a.push(d.x,d.y);const A=l[3*M+0]*x,O=l[3*M+1],S=l[3*M+0]*P;c.push(A,O,S)}}for(let v=0;v<t;v++)for(let _=0;_<e.length-1;_++){const x=_+v*e.length,P=x,M=x+e.length,A=x+e.length+1,O=x+1;r.push(P,M,O),r.push(A,O,M)}this.setIndex(r),this.setAttribute("position",new Pe(o,3)),this.setAttribute("uv",new Pe(a,2)),this.setAttribute("normal",new Pe(c,3))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new ua(e.points,e.segments,e.phiStart,e.phiLength)}}class Sc extends ua{constructor(e=1,t=1,i=4,s=8){const r=new Go;r.absarc(0,-t/2,e,Math.PI*1.5,0),r.absarc(0,t/2,e,0,Math.PI*.5),super(r.getPoints(i),s),this.type="CapsuleGeometry",this.parameters={radius:e,length:t,capSegments:i,radialSegments:s}}static fromJSON(e){return new Sc(e.radius,e.length,e.capSegments,e.radialSegments)}}class Ec extends Je{constructor(e=1,t=32,i=0,s=Math.PI*2){super(),this.type="CircleGeometry",this.parameters={radius:e,segments:t,thetaStart:i,thetaLength:s},t=Math.max(3,t);const r=[],o=[],a=[],l=[],c=new I,h=new ue;o.push(0,0,0),a.push(0,0,1),l.push(.5,.5);for(let u=0,d=3;u<=t;u++,d+=3){const f=i+u/t*s;c.x=e*Math.cos(f),c.y=e*Math.sin(f),o.push(c.x,c.y,c.z),a.push(0,0,1),h.x=(o[d]/e+1)/2,h.y=(o[d+1]/e+1)/2,l.push(h.x,h.y)}for(let u=1;u<=t;u++)r.push(u,u+1,0);this.setIndex(r),this.setAttribute("position",new Pe(o,3)),this.setAttribute("normal",new Pe(a,3)),this.setAttribute("uv",new Pe(l,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Ec(e.radius,e.segments,e.thetaStart,e.thetaLength)}}class Xr extends Je{constructor(e=1,t=1,i=1,s=32,r=1,o=!1,a=0,l=Math.PI*2){super(),this.type="CylinderGeometry",this.parameters={radiusTop:e,radiusBottom:t,height:i,radialSegments:s,heightSegments:r,openEnded:o,thetaStart:a,thetaLength:l};const c=this;s=Math.floor(s),r=Math.floor(r);const h=[],u=[],d=[],f=[];let m=0;const y=[],g=i/2;let p=0;v(),o===!1&&(e>0&&_(!0),t>0&&_(!1)),this.setIndex(h),this.setAttribute("position",new Pe(u,3)),this.setAttribute("normal",new Pe(d,3)),this.setAttribute("uv",new Pe(f,2));function v(){const x=new I,P=new I;let M=0;const A=(t-e)/i;for(let O=0;O<=r;O++){const S=[],C=O/r,G=C*(t-e)+e;for(let J=0;J<=s;J++){const de=J/s,F=de*l+a,q=Math.sin(F),X=Math.cos(F);P.x=G*q,P.y=-C*i+g,P.z=G*X,u.push(P.x,P.y,P.z),x.set(q,A,X).normalize(),d.push(x.x,x.y,x.z),f.push(de,1-C),S.push(m++)}y.push(S)}for(let O=0;O<s;O++)for(let S=0;S<r;S++){const C=y[S][O],G=y[S+1][O],J=y[S+1][O+1],de=y[S][O+1];h.push(C,G,de),h.push(G,J,de),M+=6}c.addGroup(p,M,0),p+=M}function _(x){const P=m,M=new ue,A=new I;let O=0;const S=x===!0?e:t,C=x===!0?1:-1;for(let J=1;J<=s;J++)u.push(0,g*C,0),d.push(0,C,0),f.push(.5,.5),m++;const G=m;for(let J=0;J<=s;J++){const F=J/s*l+a,q=Math.cos(F),X=Math.sin(F);A.x=S*X,A.y=g*C,A.z=S*q,u.push(A.x,A.y,A.z),d.push(0,C,0),M.x=q*.5+.5,M.y=X*.5*C+.5,f.push(M.x,M.y),m++}for(let J=0;J<s;J++){const de=P+J,F=G+J;x===!0?h.push(F,F+1,de):h.push(F+1,F,de),O+=3}c.addGroup(p,O,x===!0?1:2),p+=O}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Xr(e.radiusTop,e.radiusBottom,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class Tc extends Xr{constructor(e=1,t=1,i=32,s=1,r=!1,o=0,a=Math.PI*2){super(0,e,t,i,s,r,o,a),this.type="ConeGeometry",this.parameters={radius:e,height:t,radialSegments:i,heightSegments:s,openEnded:r,thetaStart:o,thetaLength:a}}static fromJSON(e){return new Tc(e.radius,e.height,e.radialSegments,e.heightSegments,e.openEnded,e.thetaStart,e.thetaLength)}}class ss extends Je{constructor(e=[],t=[],i=1,s=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:e,indices:t,radius:i,detail:s};const r=[],o=[];a(s),c(i),h(),this.setAttribute("position",new Pe(r,3)),this.setAttribute("normal",new Pe(r.slice(),3)),this.setAttribute("uv",new Pe(o,2)),s===0?this.computeVertexNormals():this.normalizeNormals();function a(v){const _=new I,x=new I,P=new I;for(let M=0;M<t.length;M+=3)f(t[M+0],_),f(t[M+1],x),f(t[M+2],P),l(_,x,P,v)}function l(v,_,x,P){const M=P+1,A=[];for(let O=0;O<=M;O++){A[O]=[];const S=v.clone().lerp(x,O/M),C=_.clone().lerp(x,O/M),G=M-O;for(let J=0;J<=G;J++)J===0&&O===M?A[O][J]=S:A[O][J]=S.clone().lerp(C,J/G)}for(let O=0;O<M;O++)for(let S=0;S<2*(M-O)-1;S++){const C=Math.floor(S/2);S%2===0?(d(A[O][C+1]),d(A[O+1][C]),d(A[O][C])):(d(A[O][C+1]),d(A[O+1][C+1]),d(A[O+1][C]))}}function c(v){const _=new I;for(let x=0;x<r.length;x+=3)_.x=r[x+0],_.y=r[x+1],_.z=r[x+2],_.normalize().multiplyScalar(v),r[x+0]=_.x,r[x+1]=_.y,r[x+2]=_.z}function h(){const v=new I;for(let _=0;_<r.length;_+=3){v.x=r[_+0],v.y=r[_+1],v.z=r[_+2];const x=g(v)/2/Math.PI+.5,P=p(v)/Math.PI+.5;o.push(x,1-P)}m(),u()}function u(){for(let v=0;v<o.length;v+=6){const _=o[v+0],x=o[v+2],P=o[v+4],M=Math.max(_,x,P),A=Math.min(_,x,P);M>.9&&A<.1&&(_<.2&&(o[v+0]+=1),x<.2&&(o[v+2]+=1),P<.2&&(o[v+4]+=1))}}function d(v){r.push(v.x,v.y,v.z)}function f(v,_){const x=v*3;_.x=e[x+0],_.y=e[x+1],_.z=e[x+2]}function m(){const v=new I,_=new I,x=new I,P=new I,M=new ue,A=new ue,O=new ue;for(let S=0,C=0;S<r.length;S+=9,C+=6){v.set(r[S+0],r[S+1],r[S+2]),_.set(r[S+3],r[S+4],r[S+5]),x.set(r[S+6],r[S+7],r[S+8]),M.set(o[C+0],o[C+1]),A.set(o[C+2],o[C+3]),O.set(o[C+4],o[C+5]),P.copy(v).add(_).add(x).divideScalar(3);const G=g(P);y(M,C+0,v,G),y(A,C+2,_,G),y(O,C+4,x,G)}}function y(v,_,x,P){P<0&&v.x===1&&(o[_]=v.x-1),x.x===0&&x.z===0&&(o[_]=P/2/Math.PI+.5)}function g(v){return Math.atan2(v.z,-v.x)}function p(v){return Math.atan2(-v.y,Math.sqrt(v.x*v.x+v.z*v.z))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new ss(e.vertices,e.indices,e.radius,e.details)}}class Ac extends ss{constructor(e=1,t=0){const i=(1+Math.sqrt(5))/2,s=1/i,r=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-s,-i,0,-s,i,0,s,-i,0,s,i,-s,-i,0,-s,i,0,s,-i,0,s,i,0,-i,0,-s,i,0,-s,-i,0,s,i,0,s],o=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(r,o,e,t),this.type="DodecahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new Ac(e.radius,e.detail)}}const il=new I,sl=new I,Lh=new I,rl=new _n;class U_ extends Je{constructor(e=null,t=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:e,thresholdAngle:t},e!==null){const s=Math.pow(10,4),r=Math.cos(Os*t),o=e.getIndex(),a=e.getAttribute("position"),l=o?o.count:a.count,c=[0,0,0],h=["a","b","c"],u=new Array(3),d={},f=[];for(let m=0;m<l;m+=3){o?(c[0]=o.getX(m),c[1]=o.getX(m+1),c[2]=o.getX(m+2)):(c[0]=m,c[1]=m+1,c[2]=m+2);const{a:y,b:g,c:p}=rl;if(y.fromBufferAttribute(a,c[0]),g.fromBufferAttribute(a,c[1]),p.fromBufferAttribute(a,c[2]),rl.getNormal(Lh),u[0]=`${Math.round(y.x*s)},${Math.round(y.y*s)},${Math.round(y.z*s)}`,u[1]=`${Math.round(g.x*s)},${Math.round(g.y*s)},${Math.round(g.z*s)}`,u[2]=`${Math.round(p.x*s)},${Math.round(p.y*s)},${Math.round(p.z*s)}`,!(u[0]===u[1]||u[1]===u[2]||u[2]===u[0]))for(let v=0;v<3;v++){const _=(v+1)%3,x=u[v],P=u[_],M=rl[h[v]],A=rl[h[_]],O=`${x}_${P}`,S=`${P}_${x}`;S in d&&d[S]?(Lh.dot(d[S].normal)<=r&&(f.push(M.x,M.y,M.z),f.push(A.x,A.y,A.z)),d[S]=null):O in d||(d[O]={index0:c[v],index1:c[_],normal:Lh.clone()})}}for(const m in d)if(d[m]){const{index0:y,index1:g}=d[m];il.fromBufferAttribute(a,y),sl.fromBufferAttribute(a,g),f.push(il.x,il.y,il.z),f.push(sl.x,sl.y,sl.z)}this.setAttribute("position",new Pe(f,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}class ks extends Go{constructor(e){super(e),this.uuid=Rn(),this.type="Shape",this.holes=[]}getPointsHoles(e){const t=[];for(let i=0,s=this.holes.length;i<s;i++)t[i]=this.holes[i].getPoints(e);return t}extractPoints(e){return{shape:this.getPoints(e),holes:this.getPointsHoles(e)}}copy(e){super.copy(e),this.holes=[];for(let t=0,i=e.holes.length;t<i;t++){const s=e.holes[t];this.holes.push(s.clone())}return this}toJSON(){const e=super.toJSON();e.uuid=this.uuid,e.holes=[];for(let t=0,i=this.holes.length;t<i;t++){const s=this.holes[t];e.holes.push(s.toJSON())}return e}fromJSON(e){super.fromJSON(e),this.uuid=e.uuid,this.holes=[];for(let t=0,i=e.holes.length;t<i;t++){const s=e.holes[t];this.holes.push(new Go().fromJSON(s))}return this}}const LR={triangulate:function(n,e,t=2){const i=e&&e.length,s=i?e[0]*t:n.length;let r=N_(n,0,s,t,!0);const o=[];if(!r||r.next===r.prev)return o;let a,l,c,h,u,d,f;if(i&&(r=FR(n,e,r,t)),n.length>80*t){a=c=n[0],l=h=n[1];for(let m=t;m<s;m+=t)u=n[m],d=n[m+1],u<a&&(a=u),d<l&&(l=d),u>c&&(c=u),d>h&&(h=d);f=Math.max(c-a,h-l),f=f!==0?32767/f:0}return Wo(r,o,t,a,l,f,0),o}};function N_(n,e,t,i,s){let r,o;if(s===YR(n,e,t,i)>0)for(r=e;r<t;r+=i)o=bm(r,n[r],n[r+1],o);else for(r=t-i;r>=e;r-=i)o=bm(r,n[r],n[r+1],o);return o&&Cc(o,o.next)&&(Xo(o),o=o.next),o}function Hs(n,e){if(!n)return n;e||(e=n);let t=n,i;do if(i=!1,!t.steiner&&(Cc(t,t.next)||Et(t.prev,t,t.next)===0)){if(Xo(t),t=e=t.prev,t===t.next)break;i=!0}else t=t.next;while(i||t!==e);return e}function Wo(n,e,t,i,s,r,o){if(!n)return;!o&&r&&HR(n,i,s,r);let a=n,l,c;for(;n.prev!==n.next;){if(l=n.prev,c=n.next,r?UR(n,i,s,r):DR(n)){e.push(l.i/t|0),e.push(n.i/t|0),e.push(c.i/t|0),Xo(n),n=c.next,a=c.next;continue}if(n=c,n===a){o?o===1?(n=NR(Hs(n),e,t),Wo(n,e,t,i,s,r,2)):o===2&&OR(n,e,t,i,s,r):Wo(Hs(n),e,t,i,s,r,1);break}}}function DR(n){const e=n.prev,t=n,i=n.next;if(Et(e,t,i)>=0)return!1;const s=e.x,r=t.x,o=i.x,a=e.y,l=t.y,c=i.y,h=s<r?s<o?s:o:r<o?r:o,u=a<l?a<c?a:c:l<c?l:c,d=s>r?s>o?s:o:r>o?r:o,f=a>l?a>c?a:c:l>c?l:c;let m=i.next;for(;m!==e;){if(m.x>=h&&m.x<=d&&m.y>=u&&m.y<=f&&wr(s,a,r,l,o,c,m.x,m.y)&&Et(m.prev,m,m.next)>=0)return!1;m=m.next}return!0}function UR(n,e,t,i){const s=n.prev,r=n,o=n.next;if(Et(s,r,o)>=0)return!1;const a=s.x,l=r.x,c=o.x,h=s.y,u=r.y,d=o.y,f=a<l?a<c?a:c:l<c?l:c,m=h<u?h<d?h:d:u<d?u:d,y=a>l?a>c?a:c:l>c?l:c,g=h>u?h>d?h:d:u>d?u:d,p=zu(f,m,e,t,i),v=zu(y,g,e,t,i);let _=n.prevZ,x=n.nextZ;for(;_&&_.z>=p&&x&&x.z<=v;){if(_.x>=f&&_.x<=y&&_.y>=m&&_.y<=g&&_!==s&&_!==o&&wr(a,h,l,u,c,d,_.x,_.y)&&Et(_.prev,_,_.next)>=0||(_=_.prevZ,x.x>=f&&x.x<=y&&x.y>=m&&x.y<=g&&x!==s&&x!==o&&wr(a,h,l,u,c,d,x.x,x.y)&&Et(x.prev,x,x.next)>=0))return!1;x=x.nextZ}for(;_&&_.z>=p;){if(_.x>=f&&_.x<=y&&_.y>=m&&_.y<=g&&_!==s&&_!==o&&wr(a,h,l,u,c,d,_.x,_.y)&&Et(_.prev,_,_.next)>=0)return!1;_=_.prevZ}for(;x&&x.z<=v;){if(x.x>=f&&x.x<=y&&x.y>=m&&x.y<=g&&x!==s&&x!==o&&wr(a,h,l,u,c,d,x.x,x.y)&&Et(x.prev,x,x.next)>=0)return!1;x=x.nextZ}return!0}function NR(n,e,t){let i=n;do{const s=i.prev,r=i.next.next;!Cc(s,r)&&O_(s,i,i.next,r)&&qo(s,r)&&qo(r,s)&&(e.push(s.i/t|0),e.push(i.i/t|0),e.push(r.i/t|0),Xo(i),Xo(i.next),i=n=r),i=i.next}while(i!==n);return Hs(i)}function OR(n,e,t,i,s,r){let o=n;do{let a=o.next.next;for(;a!==o.prev;){if(o.i!==a.i&&qR(o,a)){let l=F_(o,a);o=Hs(o,o.next),l=Hs(l,l.next),Wo(o,e,t,i,s,r,0),Wo(l,e,t,i,s,r,0);return}a=a.next}o=o.next}while(o!==n)}function FR(n,e,t,i){const s=[];let r,o,a,l,c;for(r=0,o=e.length;r<o;r++)a=e[r]*i,l=r<o-1?e[r+1]*i:n.length,c=N_(n,a,l,i,!1),c===c.next&&(c.steiner=!0),s.push(WR(c));for(s.sort(kR),r=0;r<s.length;r++)t=BR(s[r],t);return t}function kR(n,e){return n.x-e.x}function BR(n,e){const t=zR(n,e);if(!t)return e;const i=F_(t,n);return Hs(i,i.next),Hs(t,t.next)}function zR(n,e){let t=e,i=-1/0,s;const r=n.x,o=n.y;do{if(o<=t.y&&o>=t.next.y&&t.next.y!==t.y){const d=t.x+(o-t.y)*(t.next.x-t.x)/(t.next.y-t.y);if(d<=r&&d>i&&(i=d,s=t.x<t.next.x?t:t.next,d===r))return s}t=t.next}while(t!==e);if(!s)return null;const a=s,l=s.x,c=s.y;let h=1/0,u;t=s;do r>=t.x&&t.x>=l&&r!==t.x&&wr(o<c?r:i,o,l,c,o<c?i:r,o,t.x,t.y)&&(u=Math.abs(o-t.y)/(r-t.x),qo(t,n)&&(u<h||u===h&&(t.x>s.x||t.x===s.x&&VR(s,t)))&&(s=t,h=u)),t=t.next;while(t!==a);return s}function VR(n,e){return Et(n.prev,n,e.prev)<0&&Et(e.next,n,n.next)<0}function HR(n,e,t,i){let s=n;do s.z===0&&(s.z=zu(s.x,s.y,e,t,i)),s.prevZ=s.prev,s.nextZ=s.next,s=s.next;while(s!==n);s.prevZ.nextZ=null,s.prevZ=null,GR(s)}function GR(n){let e,t,i,s,r,o,a,l,c=1;do{for(t=n,n=null,r=null,o=0;t;){for(o++,i=t,a=0,e=0;e<c&&(a++,i=i.nextZ,!!i);e++);for(l=c;a>0||l>0&&i;)a!==0&&(l===0||!i||t.z<=i.z)?(s=t,t=t.nextZ,a--):(s=i,i=i.nextZ,l--),r?r.nextZ=s:n=s,s.prevZ=r,r=s;t=i}r.nextZ=null,c*=2}while(o>1);return n}function zu(n,e,t,i,s){return n=(n-t)*s|0,e=(e-i)*s|0,n=(n|n<<8)&16711935,n=(n|n<<4)&252645135,n=(n|n<<2)&858993459,n=(n|n<<1)&1431655765,e=(e|e<<8)&16711935,e=(e|e<<4)&252645135,e=(e|e<<2)&858993459,e=(e|e<<1)&1431655765,n|e<<1}function WR(n){let e=n,t=n;do(e.x<t.x||e.x===t.x&&e.y<t.y)&&(t=e),e=e.next;while(e!==n);return t}function wr(n,e,t,i,s,r,o,a){return(s-o)*(e-a)>=(n-o)*(r-a)&&(n-o)*(i-a)>=(t-o)*(e-a)&&(t-o)*(r-a)>=(s-o)*(i-a)}function qR(n,e){return n.next.i!==e.i&&n.prev.i!==e.i&&!XR(n,e)&&(qo(n,e)&&qo(e,n)&&$R(n,e)&&(Et(n.prev,n,e.prev)||Et(n,e.prev,e))||Cc(n,e)&&Et(n.prev,n,n.next)>0&&Et(e.prev,e,e.next)>0)}function Et(n,e,t){return(e.y-n.y)*(t.x-e.x)-(e.x-n.x)*(t.y-e.y)}function Cc(n,e){return n.x===e.x&&n.y===e.y}function O_(n,e,t,i){const s=al(Et(n,e,t)),r=al(Et(n,e,i)),o=al(Et(t,i,n)),a=al(Et(t,i,e));return!!(s!==r&&o!==a||s===0&&ol(n,t,e)||r===0&&ol(n,i,e)||o===0&&ol(t,n,i)||a===0&&ol(t,e,i))}function ol(n,e,t){return e.x<=Math.max(n.x,t.x)&&e.x>=Math.min(n.x,t.x)&&e.y<=Math.max(n.y,t.y)&&e.y>=Math.min(n.y,t.y)}function al(n){return n>0?1:n<0?-1:0}function XR(n,e){let t=n;do{if(t.i!==n.i&&t.next.i!==n.i&&t.i!==e.i&&t.next.i!==e.i&&O_(t,t.next,n,e))return!0;t=t.next}while(t!==n);return!1}function qo(n,e){return Et(n.prev,n,n.next)<0?Et(n,e,n.next)>=0&&Et(n,n.prev,e)>=0:Et(n,e,n.prev)<0||Et(n,n.next,e)<0}function $R(n,e){let t=n,i=!1;const s=(n.x+e.x)/2,r=(n.y+e.y)/2;do t.y>r!=t.next.y>r&&t.next.y!==t.y&&s<(t.next.x-t.x)*(r-t.y)/(t.next.y-t.y)+t.x&&(i=!i),t=t.next;while(t!==n);return i}function F_(n,e){const t=new Vu(n.i,n.x,n.y),i=new Vu(e.i,e.x,e.y),s=n.next,r=e.prev;return n.next=e,e.prev=n,t.next=s,s.prev=t,i.next=t,t.prev=i,r.next=i,i.prev=r,i}function bm(n,e,t,i){const s=new Vu(n,e,t);return i?(s.next=i.next,s.prev=i,i.next.prev=s,i.next=s):(s.prev=s,s.next=s),s}function Xo(n){n.next.prev=n.prev,n.prev.next=n.next,n.prevZ&&(n.prevZ.nextZ=n.nextZ),n.nextZ&&(n.nextZ.prevZ=n.prevZ)}function Vu(n,e,t){this.i=n,this.x=e,this.y=t,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}function YR(n,e,t,i){let s=0;for(let r=e,o=t-i;r<t;r+=i)s+=(n[o]-n[r])*(n[r+1]+n[o+1]),o=r;return s}class ii{static area(e){const t=e.length;let i=0;for(let s=t-1,r=0;r<t;s=r++)i+=e[s].x*e[r].y-e[r].x*e[s].y;return i*.5}static isClockWise(e){return ii.area(e)<0}static triangulateShape(e,t){const i=[],s=[],r=[];wm(e),Mm(i,e);let o=e.length;t.forEach(wm);for(let l=0;l<t.length;l++)s.push(o),o+=t[l].length,Mm(i,t[l]);const a=LR.triangulate(i,s);for(let l=0;l<a.length;l+=3)r.push(a.slice(l,l+3));return r}}function wm(n){const e=n.length;e>2&&n[e-1].equals(n[0])&&n.pop()}function Mm(n,e){for(let t=0;t<e.length;t++)n.push(e[t].x),n.push(e[t].y)}class Rc extends Je{constructor(e=new ks([new ue(.5,.5),new ue(-.5,.5),new ue(-.5,-.5),new ue(.5,-.5)]),t={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:e,options:t},e=Array.isArray(e)?e:[e];const i=this,s=[],r=[];for(let a=0,l=e.length;a<l;a++){const c=e[a];o(c)}this.setAttribute("position",new Pe(s,3)),this.setAttribute("uv",new Pe(r,2)),this.computeVertexNormals();function o(a){const l=[],c=t.curveSegments!==void 0?t.curveSegments:12,h=t.steps!==void 0?t.steps:1,u=t.depth!==void 0?t.depth:1;let d=t.bevelEnabled!==void 0?t.bevelEnabled:!0,f=t.bevelThickness!==void 0?t.bevelThickness:.2,m=t.bevelSize!==void 0?t.bevelSize:f-.1,y=t.bevelOffset!==void 0?t.bevelOffset:0,g=t.bevelSegments!==void 0?t.bevelSegments:3;const p=t.extrudePath,v=t.UVGenerator!==void 0?t.UVGenerator:jR;let _,x=!1,P,M,A,O;p&&(_=p.getSpacedPoints(h),x=!0,d=!1,P=p.computeFrenetFrames(h,!1),M=new I,A=new I,O=new I),d||(g=0,f=0,m=0,y=0);const S=a.extractPoints(c);let C=S.shape;const G=S.holes;if(!ii.isClockWise(C)){C=C.reverse();for(let L=0,E=G.length;L<E;L++){const T=G[L];ii.isClockWise(T)&&(G[L]=T.reverse())}}const de=ii.triangulateShape(C,G),F=C;for(let L=0,E=G.length;L<E;L++){const T=G[L];C=C.concat(T)}function q(L,E,T){return E||console.error("THREE.ExtrudeGeometry: vec does not exist"),L.clone().addScaledVector(E,T)}const X=C.length,te=de.length;function Q(L,E,T){let U,N,V;const $=L.x-E.x,w=L.y-E.y,b=T.x-L.x,D=T.y-L.y,B=$*$+w*w,H=$*D-w*b;if(Math.abs(H)>Number.EPSILON){const Y=Math.sqrt(B),ce=Math.sqrt(b*b+D*D),ie=E.x-w/Y,me=E.y+$/Y,xe=T.x-D/ce,Ce=T.y+b/ce,se=((xe-ie)*D-(Ce-me)*b)/($*D-w*b);U=ie+$*se-L.x,N=me+w*se-L.y;const He=U*U+N*N;if(He<=2)return new ue(U,N);V=Math.sqrt(He/2)}else{let Y=!1;$>Number.EPSILON?b>Number.EPSILON&&(Y=!0):$<-Number.EPSILON?b<-Number.EPSILON&&(Y=!0):Math.sign(w)===Math.sign(D)&&(Y=!0),Y?(U=-w,N=$,V=Math.sqrt(B)):(U=$,N=w,V=Math.sqrt(B/2))}return new ue(U/V,N/V)}const re=[];for(let L=0,E=F.length,T=E-1,U=L+1;L<E;L++,T++,U++)T===E&&(T=0),U===E&&(U=0),re[L]=Q(F[L],F[T],F[U]);const he=[];let pe,ge=re.concat();for(let L=0,E=G.length;L<E;L++){const T=G[L];pe=[];for(let U=0,N=T.length,V=N-1,$=U+1;U<N;U++,V++,$++)V===N&&(V=0),$===N&&($=0),pe[U]=Q(T[U],T[V],T[$]);he.push(pe),ge=ge.concat(pe)}for(let L=0;L<g;L++){const E=L/g,T=f*Math.cos(E*Math.PI/2),U=m*Math.sin(E*Math.PI/2)+y;for(let N=0,V=F.length;N<V;N++){const $=q(F[N],re[N],U);z($.x,$.y,-T)}for(let N=0,V=G.length;N<V;N++){const $=G[N];pe=he[N];for(let w=0,b=$.length;w<b;w++){const D=q($[w],pe[w],U);z(D.x,D.y,-T)}}}const ne=m+y;for(let L=0;L<X;L++){const E=d?q(C[L],ge[L],ne):C[L];x?(A.copy(P.normals[0]).multiplyScalar(E.x),M.copy(P.binormals[0]).multiplyScalar(E.y),O.copy(_[0]).add(A).add(M),z(O.x,O.y,O.z)):z(E.x,E.y,0)}for(let L=1;L<=h;L++)for(let E=0;E<X;E++){const T=d?q(C[E],ge[E],ne):C[E];x?(A.copy(P.normals[L]).multiplyScalar(T.x),M.copy(P.binormals[L]).multiplyScalar(T.y),O.copy(_[L]).add(A).add(M),z(O.x,O.y,O.z)):z(T.x,T.y,u/h*L)}for(let L=g-1;L>=0;L--){const E=L/g,T=f*Math.cos(E*Math.PI/2),U=m*Math.sin(E*Math.PI/2)+y;for(let N=0,V=F.length;N<V;N++){const $=q(F[N],re[N],U);z($.x,$.y,u+T)}for(let N=0,V=G.length;N<V;N++){const $=G[N];pe=he[N];for(let w=0,b=$.length;w<b;w++){const D=q($[w],pe[w],U);x?z(D.x,D.y+_[h-1].y,_[h-1].x+T):z(D.x,D.y,u+T)}}}fe(),be();function fe(){const L=s.length/3;if(d){let E=0,T=X*E;for(let U=0;U<te;U++){const N=de[U];le(N[2]+T,N[1]+T,N[0]+T)}E=h+g*2,T=X*E;for(let U=0;U<te;U++){const N=de[U];le(N[0]+T,N[1]+T,N[2]+T)}}else{for(let E=0;E<te;E++){const T=de[E];le(T[2],T[1],T[0])}for(let E=0;E<te;E++){const T=de[E];le(T[0]+X*h,T[1]+X*h,T[2]+X*h)}}i.addGroup(L,s.length/3-L,0)}function be(){const L=s.length/3;let E=0;Me(F,E),E+=F.length;for(let T=0,U=G.length;T<U;T++){const N=G[T];Me(N,E),E+=N.length}i.addGroup(L,s.length/3-L,1)}function Me(L,E){let T=L.length;for(;--T>=0;){const U=T;let N=T-1;N<0&&(N=L.length-1);for(let V=0,$=h+g*2;V<$;V++){const w=X*V,b=X*(V+1),D=E+U+w,B=E+N+w,H=E+N+b,Y=E+U+b;oe(D,B,H,Y)}}}function z(L,E,T){l.push(L),l.push(E),l.push(T)}function le(L,E,T){ae(L),ae(E),ae(T);const U=s.length/3,N=v.generateTopUV(i,s,U-3,U-2,U-1);we(N[0]),we(N[1]),we(N[2])}function oe(L,E,T,U){ae(L),ae(E),ae(U),ae(E),ae(T),ae(U);const N=s.length/3,V=v.generateSideWallUV(i,s,N-6,N-3,N-2,N-1);we(V[0]),we(V[1]),we(V[3]),we(V[1]),we(V[2]),we(V[3])}function ae(L){s.push(l[L*3+0]),s.push(l[L*3+1]),s.push(l[L*3+2])}function we(L){r.push(L.x),r.push(L.y)}}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON(),t=this.parameters.shapes,i=this.parameters.options;return ZR(t,i,e)}static fromJSON(e,t){const i=[];for(let r=0,o=e.shapes.length;r<o;r++){const a=t[e.shapes[r]];i.push(a)}const s=e.options.extrudePath;return s!==void 0&&(e.options.extrudePath=new Wl[s.type]().fromJSON(s)),new Rc(i,e.options)}}const jR={generateTopUV:function(n,e,t,i,s){const r=e[t*3],o=e[t*3+1],a=e[i*3],l=e[i*3+1],c=e[s*3],h=e[s*3+1];return[new ue(r,o),new ue(a,l),new ue(c,h)]},generateSideWallUV:function(n,e,t,i,s,r){const o=e[t*3],a=e[t*3+1],l=e[t*3+2],c=e[i*3],h=e[i*3+1],u=e[i*3+2],d=e[s*3],f=e[s*3+1],m=e[s*3+2],y=e[r*3],g=e[r*3+1],p=e[r*3+2];return Math.abs(a-h)<Math.abs(o-c)?[new ue(o,1-l),new ue(c,1-u),new ue(d,1-m),new ue(y,1-p)]:[new ue(a,1-l),new ue(h,1-u),new ue(f,1-m),new ue(g,1-p)]}};function ZR(n,e,t){if(t.shapes=[],Array.isArray(n))for(let i=0,s=n.length;i<s;i++){const r=n[i];t.shapes.push(r.uuid)}else t.shapes.push(n.uuid);return t.options=Object.assign({},e),e.extrudePath!==void 0&&(t.options.extrudePath=e.extrudePath.toJSON()),t}class Pc extends ss{constructor(e=1,t=0){const i=(1+Math.sqrt(5))/2,s=[-1,i,0,1,i,0,-1,-i,0,1,-i,0,0,-1,i,0,1,i,0,-1,-i,0,1,-i,i,0,-1,i,0,1,-i,0,-1,-i,0,1],r=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(s,r,e,t),this.type="IcosahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new Pc(e.radius,e.detail)}}class da extends ss{constructor(e=1,t=0){const i=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],s=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(i,s,e,t),this.type="OctahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new da(e.radius,e.detail)}}class Ic extends Je{constructor(e=.5,t=1,i=32,s=1,r=0,o=Math.PI*2){super(),this.type="RingGeometry",this.parameters={innerRadius:e,outerRadius:t,thetaSegments:i,phiSegments:s,thetaStart:r,thetaLength:o},i=Math.max(3,i),s=Math.max(1,s);const a=[],l=[],c=[],h=[];let u=e;const d=(t-e)/s,f=new I,m=new ue;for(let y=0;y<=s;y++){for(let g=0;g<=i;g++){const p=r+g/i*o;f.x=u*Math.cos(p),f.y=u*Math.sin(p),l.push(f.x,f.y,f.z),c.push(0,0,1),m.x=(f.x/t+1)/2,m.y=(f.y/t+1)/2,h.push(m.x,m.y)}u+=d}for(let y=0;y<s;y++){const g=y*(i+1);for(let p=0;p<i;p++){const v=p+g,_=v,x=v+i+1,P=v+i+2,M=v+1;a.push(_,x,M),a.push(x,P,M)}}this.setIndex(a),this.setAttribute("position",new Pe(l,3)),this.setAttribute("normal",new Pe(c,3)),this.setAttribute("uv",new Pe(h,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Ic(e.innerRadius,e.outerRadius,e.thetaSegments,e.phiSegments,e.thetaStart,e.thetaLength)}}class Lc extends Je{constructor(e=new ks([new ue(0,.5),new ue(-.5,-.5),new ue(.5,-.5)]),t=12){super(),this.type="ShapeGeometry",this.parameters={shapes:e,curveSegments:t};const i=[],s=[],r=[],o=[];let a=0,l=0;if(Array.isArray(e)===!1)c(e);else for(let h=0;h<e.length;h++)c(e[h]),this.addGroup(a,l,h),a+=l,l=0;this.setIndex(i),this.setAttribute("position",new Pe(s,3)),this.setAttribute("normal",new Pe(r,3)),this.setAttribute("uv",new Pe(o,2));function c(h){const u=s.length/3,d=h.extractPoints(t);let f=d.shape;const m=d.holes;ii.isClockWise(f)===!1&&(f=f.reverse());for(let g=0,p=m.length;g<p;g++){const v=m[g];ii.isClockWise(v)===!0&&(m[g]=v.reverse())}const y=ii.triangulateShape(f,m);for(let g=0,p=m.length;g<p;g++){const v=m[g];f=f.concat(v)}for(let g=0,p=f.length;g<p;g++){const v=f[g];s.push(v.x,v.y,0),r.push(0,0,1),o.push(v.x,v.y)}for(let g=0,p=y.length;g<p;g++){const v=y[g],_=v[0]+u,x=v[1]+u,P=v[2]+u;i.push(_,x,P),l+=3}}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON(),t=this.parameters.shapes;return KR(t,e)}static fromJSON(e,t){const i=[];for(let s=0,r=e.shapes.length;s<r;s++){const o=t[e.shapes[s]];i.push(o)}return new Lc(i,e.curveSegments)}}function KR(n,e){if(e.shapes=[],Array.isArray(n))for(let t=0,i=n.length;t<i;t++){const s=n[t];e.shapes.push(s.uuid)}else e.shapes.push(n.uuid);return e}class fa extends Je{constructor(e=1,t=32,i=16,s=0,r=Math.PI*2,o=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:e,widthSegments:t,heightSegments:i,phiStart:s,phiLength:r,thetaStart:o,thetaLength:a},t=Math.max(3,Math.floor(t)),i=Math.max(2,Math.floor(i));const l=Math.min(o+a,Math.PI);let c=0;const h=[],u=new I,d=new I,f=[],m=[],y=[],g=[];for(let p=0;p<=i;p++){const v=[],_=p/i;let x=0;p===0&&o===0?x=.5/t:p===i&&l===Math.PI&&(x=-.5/t);for(let P=0;P<=t;P++){const M=P/t;u.x=-e*Math.cos(s+M*r)*Math.sin(o+_*a),u.y=e*Math.cos(o+_*a),u.z=e*Math.sin(s+M*r)*Math.sin(o+_*a),m.push(u.x,u.y,u.z),d.copy(u).normalize(),y.push(d.x,d.y,d.z),g.push(M+x,1-_),v.push(c++)}h.push(v)}for(let p=0;p<i;p++)for(let v=0;v<t;v++){const _=h[p][v+1],x=h[p][v],P=h[p+1][v],M=h[p+1][v+1];(p!==0||o>0)&&f.push(_,x,M),(p!==i-1||l<Math.PI)&&f.push(x,P,M)}this.setIndex(f),this.setAttribute("position",new Pe(m,3)),this.setAttribute("normal",new Pe(y,3)),this.setAttribute("uv",new Pe(g,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new fa(e.radius,e.widthSegments,e.heightSegments,e.phiStart,e.phiLength,e.thetaStart,e.thetaLength)}}class Dc extends ss{constructor(e=1,t=0){const i=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],s=[2,1,0,0,3,2,1,3,0,2,3,1];super(i,s,e,t),this.type="TetrahedronGeometry",this.parameters={radius:e,detail:t}}static fromJSON(e){return new Dc(e.radius,e.detail)}}class Uc extends Je{constructor(e=1,t=.4,i=12,s=48,r=Math.PI*2){super(),this.type="TorusGeometry",this.parameters={radius:e,tube:t,radialSegments:i,tubularSegments:s,arc:r},i=Math.floor(i),s=Math.floor(s);const o=[],a=[],l=[],c=[],h=new I,u=new I,d=new I;for(let f=0;f<=i;f++)for(let m=0;m<=s;m++){const y=m/s*r,g=f/i*Math.PI*2;u.x=(e+t*Math.cos(g))*Math.cos(y),u.y=(e+t*Math.cos(g))*Math.sin(y),u.z=t*Math.sin(g),a.push(u.x,u.y,u.z),h.x=e*Math.cos(y),h.y=e*Math.sin(y),d.subVectors(u,h).normalize(),l.push(d.x,d.y,d.z),c.push(m/s),c.push(f/i)}for(let f=1;f<=i;f++)for(let m=1;m<=s;m++){const y=(s+1)*f+m-1,g=(s+1)*(f-1)+m-1,p=(s+1)*(f-1)+m,v=(s+1)*f+m;o.push(y,g,v),o.push(g,p,v)}this.setIndex(o),this.setAttribute("position",new Pe(a,3)),this.setAttribute("normal",new Pe(l,3)),this.setAttribute("uv",new Pe(c,2))}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Uc(e.radius,e.tube,e.radialSegments,e.tubularSegments,e.arc)}}class Nc extends Je{constructor(e=1,t=.4,i=64,s=8,r=2,o=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:e,tube:t,tubularSegments:i,radialSegments:s,p:r,q:o},i=Math.floor(i),s=Math.floor(s);const a=[],l=[],c=[],h=[],u=new I,d=new I,f=new I,m=new I,y=new I,g=new I,p=new I;for(let _=0;_<=i;++_){const x=_/i*r*Math.PI*2;v(x,r,o,e,f),v(x+.01,r,o,e,m),g.subVectors(m,f),p.addVectors(m,f),y.crossVectors(g,p),p.crossVectors(y,g),y.normalize(),p.normalize();for(let P=0;P<=s;++P){const M=P/s*Math.PI*2,A=-t*Math.cos(M),O=t*Math.sin(M);u.x=f.x+(A*p.x+O*y.x),u.y=f.y+(A*p.y+O*y.y),u.z=f.z+(A*p.z+O*y.z),l.push(u.x,u.y,u.z),d.subVectors(u,f).normalize(),c.push(d.x,d.y,d.z),h.push(_/i),h.push(P/s)}}for(let _=1;_<=i;_++)for(let x=1;x<=s;x++){const P=(s+1)*(_-1)+(x-1),M=(s+1)*_+(x-1),A=(s+1)*_+x,O=(s+1)*(_-1)+x;a.push(P,M,O),a.push(M,A,O)}this.setIndex(a),this.setAttribute("position",new Pe(l,3)),this.setAttribute("normal",new Pe(c,3)),this.setAttribute("uv",new Pe(h,2));function v(_,x,P,M,A){const O=Math.cos(_),S=Math.sin(_),C=P/x*_,G=Math.cos(C);A.x=M*(2+G)*.5*O,A.y=M*(2+G)*S*.5,A.z=M*Math.sin(C)*.5}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}static fromJSON(e){return new Nc(e.radius,e.tube,e.tubularSegments,e.radialSegments,e.p,e.q)}}class Oc extends Je{constructor(e=new jd(new I(-1,-1,0),new I(-1,1,0),new I(1,1,0)),t=64,i=1,s=8,r=!1){super(),this.type="TubeGeometry",this.parameters={path:e,tubularSegments:t,radius:i,radialSegments:s,closed:r};const o=e.computeFrenetFrames(t,r);this.tangents=o.tangents,this.normals=o.normals,this.binormals=o.binormals;const a=new I,l=new I,c=new ue;let h=new I;const u=[],d=[],f=[],m=[];y(),this.setIndex(m),this.setAttribute("position",new Pe(u,3)),this.setAttribute("normal",new Pe(d,3)),this.setAttribute("uv",new Pe(f,2));function y(){for(let _=0;_<t;_++)g(_);g(r===!1?t:0),v(),p()}function g(_){h=e.getPointAt(_/t,h);const x=o.normals[_],P=o.binormals[_];for(let M=0;M<=s;M++){const A=M/s*Math.PI*2,O=Math.sin(A),S=-Math.cos(A);l.x=S*x.x+O*P.x,l.y=S*x.y+O*P.y,l.z=S*x.z+O*P.z,l.normalize(),d.push(l.x,l.y,l.z),a.x=h.x+i*l.x,a.y=h.y+i*l.y,a.z=h.z+i*l.z,u.push(a.x,a.y,a.z)}}function p(){for(let _=1;_<=t;_++)for(let x=1;x<=s;x++){const P=(s+1)*(_-1)+(x-1),M=(s+1)*_+(x-1),A=(s+1)*_+x,O=(s+1)*(_-1)+x;m.push(P,M,O),m.push(M,A,O)}}function v(){for(let _=0;_<=t;_++)for(let x=0;x<=s;x++)c.x=_/t,c.y=x/s,f.push(c.x,c.y)}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}toJSON(){const e=super.toJSON();return e.path=this.parameters.path.toJSON(),e}static fromJSON(e){return new Oc(new Wl[e.path.type]().fromJSON(e.path),e.tubularSegments,e.radius,e.radialSegments,e.closed)}}class k_ extends Je{constructor(e=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:e},e!==null){const t=[],i=new Set,s=new I,r=new I;if(e.index!==null){const o=e.attributes.position,a=e.index;let l=e.groups;l.length===0&&(l=[{start:0,count:a.count,materialIndex:0}]);for(let c=0,h=l.length;c<h;++c){const u=l[c],d=u.start,f=u.count;for(let m=d,y=d+f;m<y;m+=3)for(let g=0;g<3;g++){const p=a.getX(m+g),v=a.getX(m+(g+1)%3);s.fromBufferAttribute(o,p),r.fromBufferAttribute(o,v),Sm(s,r,i)===!0&&(t.push(s.x,s.y,s.z),t.push(r.x,r.y,r.z))}}}else{const o=e.attributes.position;for(let a=0,l=o.count/3;a<l;a++)for(let c=0;c<3;c++){const h=3*a+c,u=3*a+(c+1)%3;s.fromBufferAttribute(o,h),r.fromBufferAttribute(o,u),Sm(s,r,i)===!0&&(t.push(s.x,s.y,s.z),t.push(r.x,r.y,r.z))}}this.setAttribute("position",new Pe(t,3))}}copy(e){return super.copy(e),this.parameters=Object.assign({},e.parameters),this}}function Sm(n,e,t){const i=`${n.x},${n.y},${n.z}-${e.x},${e.y},${e.z}`,s=`${e.x},${e.y},${e.z}-${n.x},${n.y},${n.z}`;return t.has(i)===!0||t.has(s)===!0?!1:(t.add(i),t.add(s),!0)}var Em=Object.freeze({__proto__:null,BoxGeometry:Xs,CapsuleGeometry:Sc,CircleGeometry:Ec,ConeGeometry:Tc,CylinderGeometry:Xr,DodecahedronGeometry:Ac,EdgesGeometry:U_,ExtrudeGeometry:Rc,IcosahedronGeometry:Pc,LatheGeometry:ua,OctahedronGeometry:da,PlaneGeometry:ca,PolyhedronGeometry:ss,RingGeometry:Ic,ShapeGeometry:Lc,SphereGeometry:fa,TetrahedronGeometry:Dc,TorusGeometry:Uc,TorusKnotGeometry:Nc,TubeGeometry:Oc,WireframeGeometry:k_});class B_ extends on{constructor(e){super(),this.isShadowMaterial=!0,this.type="ShadowMaterial",this.color=new Te(0),this.transparent=!0,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.fog=e.fog,this}}class z_ extends oi{constructor(e){super(e),this.isRawShaderMaterial=!0,this.type="RawShaderMaterial"}}class Kd extends on{constructor(e){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Te(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Te(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ns,this.normalScale=new ue(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={STANDARD:""},this.color.copy(e.color),this.roughness=e.roughness,this.metalness=e.metalness,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.roughnessMap=e.roughnessMap,this.metalnessMap=e.metalnessMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.envMapIntensity=e.envMapIntensity,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class V_ extends Kd{constructor(e){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new ue(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return Pt(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new Te(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new Te(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new Te(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(e)}get anisotropy(){return this._anisotropy}set anisotropy(e){this._anisotropy>0!=e>0&&this.version++,this._anisotropy=e}get clearcoat(){return this._clearcoat}set clearcoat(e){this._clearcoat>0!=e>0&&this.version++,this._clearcoat=e}get iridescence(){return this._iridescence}set iridescence(e){this._iridescence>0!=e>0&&this.version++,this._iridescence=e}get sheen(){return this._sheen}set sheen(e){this._sheen>0!=e>0&&this.version++,this._sheen=e}get transmission(){return this._transmission}set transmission(e){this._transmission>0!=e>0&&this.version++,this._transmission=e}copy(e){return super.copy(e),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=e.anisotropy,this.anisotropyRotation=e.anisotropyRotation,this.anisotropyMap=e.anisotropyMap,this.clearcoat=e.clearcoat,this.clearcoatMap=e.clearcoatMap,this.clearcoatRoughness=e.clearcoatRoughness,this.clearcoatRoughnessMap=e.clearcoatRoughnessMap,this.clearcoatNormalMap=e.clearcoatNormalMap,this.clearcoatNormalScale.copy(e.clearcoatNormalScale),this.ior=e.ior,this.iridescence=e.iridescence,this.iridescenceMap=e.iridescenceMap,this.iridescenceIOR=e.iridescenceIOR,this.iridescenceThicknessRange=[...e.iridescenceThicknessRange],this.iridescenceThicknessMap=e.iridescenceThicknessMap,this.sheen=e.sheen,this.sheenColor.copy(e.sheenColor),this.sheenColorMap=e.sheenColorMap,this.sheenRoughness=e.sheenRoughness,this.sheenRoughnessMap=e.sheenRoughnessMap,this.transmission=e.transmission,this.transmissionMap=e.transmissionMap,this.thickness=e.thickness,this.thicknessMap=e.thicknessMap,this.attenuationDistance=e.attenuationDistance,this.attenuationColor.copy(e.attenuationColor),this.specularIntensity=e.specularIntensity,this.specularIntensityMap=e.specularIntensityMap,this.specularColor.copy(e.specularColor),this.specularColorMap=e.specularColorMap,this}}class H_ extends on{constructor(e){super(),this.isMeshPhongMaterial=!0,this.type="MeshPhongMaterial",this.color=new Te(16777215),this.specular=new Te(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Te(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ns,this.normalScale=new ue(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ia,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.specular.copy(e.specular),this.shininess=e.shininess,this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class G_ extends on{constructor(e){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Te(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Te(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ns,this.normalScale=new ue(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.gradientMap=e.gradientMap,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.fog=e.fog,this}}class W_ extends on{constructor(e){super(),this.isMeshNormalMaterial=!0,this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ns,this.normalScale=new ue(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(e)}copy(e){return super.copy(e),this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.flatShading=e.flatShading,this}}class q_ extends on{constructor(e){super(),this.isMeshLambertMaterial=!0,this.type="MeshLambertMaterial",this.color=new Te(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Te(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ns,this.normalScale=new ue(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ia,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.color.copy(e.color),this.map=e.map,this.lightMap=e.lightMap,this.lightMapIntensity=e.lightMapIntensity,this.aoMap=e.aoMap,this.aoMapIntensity=e.aoMapIntensity,this.emissive.copy(e.emissive),this.emissiveMap=e.emissiveMap,this.emissiveIntensity=e.emissiveIntensity,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.specularMap=e.specularMap,this.alphaMap=e.alphaMap,this.envMap=e.envMap,this.combine=e.combine,this.reflectivity=e.reflectivity,this.refractionRatio=e.refractionRatio,this.wireframe=e.wireframe,this.wireframeLinewidth=e.wireframeLinewidth,this.wireframeLinecap=e.wireframeLinecap,this.wireframeLinejoin=e.wireframeLinejoin,this.flatShading=e.flatShading,this.fog=e.fog,this}}class X_ extends on{constructor(e){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Te(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=ns,this.normalScale=new ue(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(e)}copy(e){return super.copy(e),this.defines={MATCAP:""},this.color.copy(e.color),this.matcap=e.matcap,this.map=e.map,this.bumpMap=e.bumpMap,this.bumpScale=e.bumpScale,this.normalMap=e.normalMap,this.normalMapType=e.normalMapType,this.normalScale.copy(e.normalScale),this.displacementMap=e.displacementMap,this.displacementScale=e.displacementScale,this.displacementBias=e.displacementBias,this.alphaMap=e.alphaMap,this.flatShading=e.flatShading,this.fog=e.fog,this}}class $_ extends pn{constructor(e){super(),this.isLineDashedMaterial=!0,this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(e)}copy(e){return super.copy(e),this.scale=e.scale,this.dashSize=e.dashSize,this.gapSize=e.gapSize,this}}function As(n,e,t){return!n||!t&&n.constructor===e?n:typeof e.BYTES_PER_ELEMENT=="number"?new e(n):Array.prototype.slice.call(n)}function Y_(n){return ArrayBuffer.isView(n)&&!(n instanceof DataView)}function j_(n){function e(s,r){return n[s]-n[r]}const t=n.length,i=new Array(t);for(let s=0;s!==t;++s)i[s]=s;return i.sort(e),i}function Hu(n,e,t){const i=n.length,s=new n.constructor(i);for(let r=0,o=0;o!==i;++r){const a=t[r]*e;for(let l=0;l!==e;++l)s[o++]=n[a+l]}return s}function Jd(n,e,t,i){let s=1,r=n[0];for(;r!==void 0&&r[i]===void 0;)r=n[s++];if(r===void 0)return;let o=r[i];if(o!==void 0)if(Array.isArray(o))do o=r[i],o!==void 0&&(e.push(r.time),t.push.apply(t,o)),r=n[s++];while(r!==void 0);else if(o.toArray!==void 0)do o=r[i],o!==void 0&&(e.push(r.time),o.toArray(t,t.length)),r=n[s++];while(r!==void 0);else do o=r[i],o!==void 0&&(e.push(r.time),t.push(o)),r=n[s++];while(r!==void 0)}function JR(n,e,t,i,s=30){const r=n.clone();r.name=e;const o=[];for(let l=0;l<r.tracks.length;++l){const c=r.tracks[l],h=c.getValueSize(),u=[],d=[];for(let f=0;f<c.times.length;++f){const m=c.times[f]*s;if(!(m<t||m>=i)){u.push(c.times[f]);for(let y=0;y<h;++y)d.push(c.values[f*h+y])}}u.length!==0&&(c.times=As(u,c.times.constructor),c.values=As(d,c.values.constructor),o.push(c))}r.tracks=o;let a=1/0;for(let l=0;l<r.tracks.length;++l)a>r.tracks[l].times[0]&&(a=r.tracks[l].times[0]);for(let l=0;l<r.tracks.length;++l)r.tracks[l].shift(-1*a);return r.resetDuration(),r}function QR(n,e=0,t=n,i=30){i<=0&&(i=30);const s=t.tracks.length,r=e/i;for(let o=0;o<s;++o){const a=t.tracks[o],l=a.ValueTypeName;if(l==="bool"||l==="string")continue;const c=n.tracks.find(function(p){return p.name===a.name&&p.ValueTypeName===l});if(c===void 0)continue;let h=0;const u=a.getValueSize();a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(h=u/3);let d=0;const f=c.getValueSize();c.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(d=f/3);const m=a.times.length-1;let y;if(r<=a.times[0]){const p=h,v=u-h;y=a.values.slice(p,v)}else if(r>=a.times[m]){const p=m*u+h,v=p+u-h;y=a.values.slice(p,v)}else{const p=a.createInterpolant(),v=h,_=u-h;p.evaluate(r),y=p.resultBuffer.slice(v,_)}l==="quaternion"&&new bn().fromArray(y).normalize().conjugate().toArray(y);const g=c.times.length;for(let p=0;p<g;++p){const v=p*f+d;if(l==="quaternion")bn.multiplyQuaternionsFlat(c.values,v,y,0,c.values,v);else{const _=f-d*2;for(let x=0;x<_;++x)c.values[v+x]-=y[x]}}}return n.blendMode=Rd,n}const eP={convertArray:As,isTypedArray:Y_,getKeyframeOrder:j_,sortedArray:Hu,flattenJSON:Jd,subclip:JR,makeClipAdditive:QR};class pa{constructor(e,t,i,s){this.parameterPositions=e,this._cachedIndex=0,this.resultBuffer=s!==void 0?s:new t.constructor(i),this.sampleValues=t,this.valueSize=i,this.settings=null,this.DefaultSettings_={}}evaluate(e){const t=this.parameterPositions;let i=this._cachedIndex,s=t[i],r=t[i-1];e:{t:{let o;n:{i:if(!(e<s)){for(let a=i+2;;){if(s===void 0){if(e<r)break i;return i=t.length,this._cachedIndex=i,this.copySampleValue_(i-1)}if(i===a)break;if(r=s,s=t[++i],e<s)break t}o=t.length;break n}if(!(e>=r)){const a=t[1];e<a&&(i=2,r=a);for(let l=i-2;;){if(r===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(i===l)break;if(s=r,r=t[--i-1],e>=r)break t}o=i,i=0;break n}break e}for(;i<o;){const a=i+o>>>1;e<t[a]?o=a:i=a+1}if(s=t[i],r=t[i-1],r===void 0)return this._cachedIndex=0,this.copySampleValue_(0);if(s===void 0)return i=t.length,this._cachedIndex=i,this.copySampleValue_(i-1)}this._cachedIndex=i,this.intervalChanged_(i,r,s)}return this.interpolate_(i,r,e,s)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(e){const t=this.resultBuffer,i=this.sampleValues,s=this.valueSize,r=e*s;for(let o=0;o!==s;++o)t[o]=i[r+o];return t}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class Z_ extends pa{constructor(e,t,i,s){super(e,t,i,s),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:Ss,endingEnd:Ss}}intervalChanged_(e,t,i){const s=this.parameterPositions;let r=e-2,o=e+1,a=s[r],l=s[o];if(a===void 0)switch(this.getSettings_().endingStart){case Es:r=e,a=2*t-i;break;case Fo:r=s.length-2,a=t+s[r]-s[r+1];break;default:r=e,a=i}if(l===void 0)switch(this.getSettings_().endingEnd){case Es:o=e,l=2*i-t;break;case Fo:o=1,l=i+s[1]-s[0];break;default:o=e-1,l=t}const c=(i-t)*.5,h=this.valueSize;this._weightPrev=c/(t-a),this._weightNext=c/(l-i),this._offsetPrev=r*h,this._offsetNext=o*h}interpolate_(e,t,i,s){const r=this.resultBuffer,o=this.sampleValues,a=this.valueSize,l=e*a,c=l-a,h=this._offsetPrev,u=this._offsetNext,d=this._weightPrev,f=this._weightNext,m=(i-t)/(s-t),y=m*m,g=y*m,p=-d*g+2*d*y-d*m,v=(1+d)*g+(-1.5-2*d)*y+(-.5+d)*m+1,_=(-1-f)*g+(1.5+f)*y+.5*m,x=f*g-f*y;for(let P=0;P!==a;++P)r[P]=p*o[h+P]+v*o[c+P]+_*o[l+P]+x*o[u+P];return r}}class Qd extends pa{constructor(e,t,i,s){super(e,t,i,s)}interpolate_(e,t,i,s){const r=this.resultBuffer,o=this.sampleValues,a=this.valueSize,l=e*a,c=l-a,h=(i-t)/(s-t),u=1-h;for(let d=0;d!==a;++d)r[d]=o[c+d]*u+o[l+d]*h;return r}}class K_ extends pa{constructor(e,t,i,s){super(e,t,i,s)}interpolate_(e){return this.copySampleValue_(e-1)}}class jn{constructor(e,t,i,s){if(e===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===void 0||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+e);this.name=e,this.times=As(t,this.TimeBufferType),this.values=As(i,this.ValueBufferType),this.setInterpolation(s||this.DefaultInterpolation)}static toJSON(e){const t=e.constructor;let i;if(t.toJSON!==this.toJSON)i=t.toJSON(e);else{i={name:e.name,times:As(e.times,Array),values:As(e.values,Array)};const s=e.getInterpolation();s!==e.DefaultInterpolation&&(i.interpolation=s)}return i.type=e.ValueTypeName,i}InterpolantFactoryMethodDiscrete(e){return new K_(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodLinear(e){return new Qd(this.times,this.values,this.getValueSize(),e)}InterpolantFactoryMethodSmooth(e){return new Z_(this.times,this.values,this.getValueSize(),e)}setInterpolation(e){let t;switch(e){case No:t=this.InterpolantFactoryMethodDiscrete;break;case Oo:t=this.InterpolantFactoryMethodLinear;break;case El:t=this.InterpolantFactoryMethodSmooth;break}if(t===void 0){const i="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(e!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(i);return console.warn("THREE.KeyframeTrack:",i),this}return this.createInterpolant=t,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return No;case this.InterpolantFactoryMethodLinear:return Oo;case this.InterpolantFactoryMethodSmooth:return El}}getValueSize(){return this.values.length/this.times.length}shift(e){if(e!==0){const t=this.times;for(let i=0,s=t.length;i!==s;++i)t[i]+=e}return this}scale(e){if(e!==1){const t=this.times;for(let i=0,s=t.length;i!==s;++i)t[i]*=e}return this}trim(e,t){const i=this.times,s=i.length;let r=0,o=s-1;for(;r!==s&&i[r]<e;)++r;for(;o!==-1&&i[o]>t;)--o;if(++o,r!==0||o!==s){r>=o&&(o=Math.max(o,1),r=o-1);const a=this.getValueSize();this.times=i.slice(r,o),this.values=this.values.slice(r*a,o*a)}return this}validate(){let e=!0;const t=this.getValueSize();t-Math.floor(t)!==0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),e=!1);const i=this.times,s=this.values,r=i.length;r===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),e=!1);let o=null;for(let a=0;a!==r;a++){const l=i[a];if(typeof l=="number"&&isNaN(l)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,a,l),e=!1;break}if(o!==null&&o>l){console.error("THREE.KeyframeTrack: Out of order keys.",this,a,l,o),e=!1;break}o=l}if(s!==void 0&&Y_(s))for(let a=0,l=s.length;a!==l;++a){const c=s[a];if(isNaN(c)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,a,c),e=!1;break}}return e}optimize(){const e=this.times.slice(),t=this.values.slice(),i=this.getValueSize(),s=this.getInterpolation()===El,r=e.length-1;let o=1;for(let a=1;a<r;++a){let l=!1;const c=e[a],h=e[a+1];if(c!==h&&(a!==1||c!==e[0]))if(s)l=!0;else{const u=a*i,d=u-i,f=u+i;for(let m=0;m!==i;++m){const y=t[u+m];if(y!==t[d+m]||y!==t[f+m]){l=!0;break}}}if(l){if(a!==o){e[o]=e[a];const u=a*i,d=o*i;for(let f=0;f!==i;++f)t[d+f]=t[u+f]}++o}}if(r>0){e[o]=e[r];for(let a=r*i,l=o*i,c=0;c!==i;++c)t[l+c]=t[a+c];++o}return o!==e.length?(this.times=e.slice(0,o),this.values=t.slice(0,o*i)):(this.times=e,this.values=t),this}clone(){const e=this.times.slice(),t=this.values.slice(),i=this.constructor,s=new i(this.name,e,t);return s.createInterpolant=this.createInterpolant,s}}jn.prototype.TimeBufferType=Float32Array;jn.prototype.ValueBufferType=Float32Array;jn.prototype.DefaultInterpolation=Oo;class $s extends jn{}$s.prototype.ValueTypeName="bool";$s.prototype.ValueBufferType=Array;$s.prototype.DefaultInterpolation=No;$s.prototype.InterpolantFactoryMethodLinear=void 0;$s.prototype.InterpolantFactoryMethodSmooth=void 0;class ef extends jn{}ef.prototype.ValueTypeName="color";class $o extends jn{}$o.prototype.ValueTypeName="number";class J_ extends pa{constructor(e,t,i,s){super(e,t,i,s)}interpolate_(e,t,i,s){const r=this.resultBuffer,o=this.sampleValues,a=this.valueSize,l=(i-t)/(s-t);let c=e*a;for(let h=c+a;c!==h;c+=4)bn.slerpFlat(r,0,o,c-a,o,c,l);return r}}class $r extends jn{InterpolantFactoryMethodLinear(e){return new J_(this.times,this.values,this.getValueSize(),e)}}$r.prototype.ValueTypeName="quaternion";$r.prototype.DefaultInterpolation=Oo;$r.prototype.InterpolantFactoryMethodSmooth=void 0;class Ys extends jn{}Ys.prototype.ValueTypeName="string";Ys.prototype.ValueBufferType=Array;Ys.prototype.DefaultInterpolation=No;Ys.prototype.InterpolantFactoryMethodLinear=void 0;Ys.prototype.InterpolantFactoryMethodSmooth=void 0;class Yo extends jn{}Yo.prototype.ValueTypeName="vector";class jo{constructor(e,t=-1,i,s=fc){this.name=e,this.tracks=i,this.duration=t,this.blendMode=s,this.uuid=Rn(),this.duration<0&&this.resetDuration()}static parse(e){const t=[],i=e.tracks,s=1/(e.fps||1);for(let o=0,a=i.length;o!==a;++o)t.push(nP(i[o]).scale(s));const r=new this(e.name,e.duration,t,e.blendMode);return r.uuid=e.uuid,r}static toJSON(e){const t=[],i=e.tracks,s={name:e.name,duration:e.duration,tracks:t,uuid:e.uuid,blendMode:e.blendMode};for(let r=0,o=i.length;r!==o;++r)t.push(jn.toJSON(i[r]));return s}static CreateFromMorphTargetSequence(e,t,i,s){const r=t.length,o=[];for(let a=0;a<r;a++){let l=[],c=[];l.push((a+r-1)%r,a,(a+1)%r),c.push(0,1,0);const h=j_(l);l=Hu(l,1,h),c=Hu(c,1,h),!s&&l[0]===0&&(l.push(r),c.push(c[0])),o.push(new $o(".morphTargetInfluences["+t[a].name+"]",l,c).scale(1/i))}return new this(e,-1,o)}static findByName(e,t){let i=e;if(!Array.isArray(e)){const s=e;i=s.geometry&&s.geometry.animations||s.animations}for(let s=0;s<i.length;s++)if(i[s].name===t)return i[s];return null}static CreateClipsFromMorphTargetSequences(e,t,i){const s={},r=/^([\w-]*?)([\d]+)$/;for(let a=0,l=e.length;a<l;a++){const c=e[a],h=c.name.match(r);if(h&&h.length>1){const u=h[1];let d=s[u];d||(s[u]=d=[]),d.push(c)}}const o=[];for(const a in s)o.push(this.CreateFromMorphTargetSequence(a,s[a],t,i));return o}static parseAnimation(e,t){if(!e)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const i=function(u,d,f,m,y){if(f.length!==0){const g=[],p=[];Jd(f,g,p,m),g.length!==0&&y.push(new u(d,g,p))}},s=[],r=e.name||"default",o=e.fps||30,a=e.blendMode;let l=e.length||-1;const c=e.hierarchy||[];for(let u=0;u<c.length;u++){const d=c[u].keys;if(!(!d||d.length===0))if(d[0].morphTargets){const f={};let m;for(m=0;m<d.length;m++)if(d[m].morphTargets)for(let y=0;y<d[m].morphTargets.length;y++)f[d[m].morphTargets[y]]=-1;for(const y in f){const g=[],p=[];for(let v=0;v!==d[m].morphTargets.length;++v){const _=d[m];g.push(_.time),p.push(_.morphTarget===y?1:0)}s.push(new $o(".morphTargetInfluence["+y+"]",g,p))}l=f.length*o}else{const f=".bones["+t[u].name+"]";i(Yo,f+".position",d,"pos",s),i($r,f+".quaternion",d,"rot",s),i(Yo,f+".scale",d,"scl",s)}}return s.length===0?null:new this(r,l,s,a)}resetDuration(){const e=this.tracks;let t=0;for(let i=0,s=e.length;i!==s;++i){const r=this.tracks[i];t=Math.max(t,r.times[r.times.length-1])}return this.duration=t,this}trim(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].trim(0,this.duration);return this}validate(){let e=!0;for(let t=0;t<this.tracks.length;t++)e=e&&this.tracks[t].validate();return e}optimize(){for(let e=0;e<this.tracks.length;e++)this.tracks[e].optimize();return this}clone(){const e=[];for(let t=0;t<this.tracks.length;t++)e.push(this.tracks[t].clone());return new this.constructor(this.name,this.duration,e,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function tP(n){switch(n.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return $o;case"vector":case"vector2":case"vector3":case"vector4":return Yo;case"color":return ef;case"quaternion":return $r;case"bool":case"boolean":return $s;case"string":return Ys}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+n)}function nP(n){if(n.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=tP(n.type);if(n.times===void 0){const t=[],i=[];Jd(n.keys,t,i,"value"),n.times=t,n.values=i}return e.parse!==void 0?e.parse(n):new e(n.name,n.times,n.values,n.interpolation)}const _i={enabled:!1,files:{},add:function(n,e){this.enabled!==!1&&(this.files[n]=e)},get:function(n){if(this.enabled!==!1)return this.files[n]},remove:function(n){delete this.files[n]},clear:function(){this.files={}}};class tf{constructor(e,t,i){const s=this;let r=!1,o=0,a=0,l;const c=[];this.onStart=void 0,this.onLoad=e,this.onProgress=t,this.onError=i,this.itemStart=function(h){a++,r===!1&&s.onStart!==void 0&&s.onStart(h,o,a),r=!0},this.itemEnd=function(h){o++,s.onProgress!==void 0&&s.onProgress(h,o,a),o===a&&(r=!1,s.onLoad!==void 0&&s.onLoad())},this.itemError=function(h){s.onError!==void 0&&s.onError(h)},this.resolveURL=function(h){return l?l(h):h},this.setURLModifier=function(h){return l=h,this},this.addHandler=function(h,u){return c.push(h,u),this},this.removeHandler=function(h){const u=c.indexOf(h);return u!==-1&&c.splice(u,2),this},this.getHandler=function(h){for(let u=0,d=c.length;u<d;u+=2){const f=c[u],m=c[u+1];if(f.global&&(f.lastIndex=0),f.test(h))return m}return null}}}const Q_=new tf;class Mn{constructor(e){this.manager=e!==void 0?e:Q_,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(e,t){const i=this;return new Promise(function(s,r){i.load(e,s,t,r)})}parse(){}setCrossOrigin(e){return this.crossOrigin=e,this}setWithCredentials(e){return this.withCredentials=e,this}setPath(e){return this.path=e,this}setResourcePath(e){return this.resourcePath=e,this}setRequestHeader(e){return this.requestHeader=e,this}}Mn.DEFAULT_MATERIAL_NAME="__DEFAULT";const mi={};class iP extends Error{constructor(e,t){super(e),this.response=t}}class Ei extends Mn{constructor(e){super(e)}load(e,t,i,s){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const r=_i.get(e);if(r!==void 0)return this.manager.itemStart(e),setTimeout(()=>{t&&t(r),this.manager.itemEnd(e)},0),r;if(mi[e]!==void 0){mi[e].push({onLoad:t,onProgress:i,onError:s});return}mi[e]=[],mi[e].push({onLoad:t,onProgress:i,onError:s});const o=new Request(e,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),a=this.mimeType,l=this.responseType;fetch(o).then(c=>{if(c.status===200||c.status===0){if(c.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),typeof ReadableStream>"u"||c.body===void 0||c.body.getReader===void 0)return c;const h=mi[e],u=c.body.getReader(),d=c.headers.get("Content-Length")||c.headers.get("X-File-Size"),f=d?parseInt(d):0,m=f!==0;let y=0;const g=new ReadableStream({start(p){v();function v(){u.read().then(({done:_,value:x})=>{if(_)p.close();else{y+=x.byteLength;const P=new ProgressEvent("progress",{lengthComputable:m,loaded:y,total:f});for(let M=0,A=h.length;M<A;M++){const O=h[M];O.onProgress&&O.onProgress(P)}p.enqueue(x),v()}})}}});return new Response(g)}else throw new iP(`fetch for "${c.url}" responded with ${c.status}: ${c.statusText}`,c)}).then(c=>{switch(l){case"arraybuffer":return c.arrayBuffer();case"blob":return c.blob();case"document":return c.text().then(h=>new DOMParser().parseFromString(h,a));case"json":return c.json();default:if(a===void 0)return c.text();{const u=/charset="?([^;"\s]*)"?/i.exec(a),d=u&&u[1]?u[1].toLowerCase():void 0,f=new TextDecoder(d);return c.arrayBuffer().then(m=>f.decode(m))}}}).then(c=>{_i.add(e,c);const h=mi[e];delete mi[e];for(let u=0,d=h.length;u<d;u++){const f=h[u];f.onLoad&&f.onLoad(c)}}).catch(c=>{const h=mi[e];if(h===void 0)throw this.manager.itemError(e),c;delete mi[e];for(let u=0,d=h.length;u<d;u++){const f=h[u];f.onError&&f.onError(c)}this.manager.itemError(e)}).finally(()=>{this.manager.itemEnd(e)}),this.manager.itemStart(e)}setResponseType(e){return this.responseType=e,this}setMimeType(e){return this.mimeType=e,this}}class sP extends Mn{constructor(e){super(e)}load(e,t,i,s){const r=this,o=new Ei(this.manager);o.setPath(this.path),o.setRequestHeader(this.requestHeader),o.setWithCredentials(this.withCredentials),o.load(e,function(a){try{t(r.parse(JSON.parse(a)))}catch(l){s?s(l):console.error(l),r.manager.itemError(e)}},i,s)}parse(e){const t=[];for(let i=0;i<e.length;i++){const s=jo.parse(e[i]);t.push(s)}return t}}class rP extends Mn{constructor(e){super(e)}load(e,t,i,s){const r=this,o=[],a=new wc,l=new Ei(this.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),l.setRequestHeader(this.requestHeader),l.setWithCredentials(r.withCredentials);let c=0;function h(u){l.load(e[u],function(d){const f=r.parse(d,!0);o[u]={width:f.width,height:f.height,format:f.format,mipmaps:f.mipmaps},c+=1,c===6&&(f.mipmapCount===1&&(a.minFilter=Ut),a.image=o,a.format=f.format,a.needsUpdate=!0,t&&t(a))},i,s)}if(Array.isArray(e))for(let u=0,d=e.length;u<d;++u)h(u);else l.load(e,function(u){const d=r.parse(u,!0);if(d.isCubemap){const f=d.mipmaps.length/d.mipmapCount;for(let m=0;m<f;m++){o[m]={mipmaps:[]};for(let y=0;y<d.mipmapCount;y++)o[m].mipmaps.push(d.mipmaps[m*d.mipmapCount+y]),o[m].format=d.format,o[m].width=d.width,o[m].height=d.height}a.image=o}else a.image.width=d.width,a.image.height=d.height,a.mipmaps=d.mipmaps;d.mipmapCount===1&&(a.minFilter=Ut),a.format=d.format,a.needsUpdate=!0,t&&t(a)},i,s);return a}}class Zo extends Mn{constructor(e){super(e)}load(e,t,i,s){this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const r=this,o=_i.get(e);if(o!==void 0)return r.manager.itemStart(e),setTimeout(function(){t&&t(o),r.manager.itemEnd(e)},0),o;const a=Ho("img");function l(){h(),_i.add(e,this),t&&t(this),r.manager.itemEnd(e)}function c(u){h(),s&&s(u),r.manager.itemError(e),r.manager.itemEnd(e)}function h(){a.removeEventListener("load",l,!1),a.removeEventListener("error",c,!1)}return a.addEventListener("load",l,!1),a.addEventListener("error",c,!1),e.slice(0,5)!=="data:"&&this.crossOrigin!==void 0&&(a.crossOrigin=this.crossOrigin),r.manager.itemStart(e),a.src=e,a}}class oP extends Mn{constructor(e){super(e)}load(e,t,i,s){const r=new aa;r.colorSpace=Ft;const o=new Zo(this.manager);o.setCrossOrigin(this.crossOrigin),o.setPath(this.path);let a=0;function l(c){o.load(e[c],function(h){r.images[c]=h,a++,a===6&&(r.needsUpdate=!0,t&&t(r))},void 0,s)}for(let c=0;c<e.length;++c)l(c);return r}}class aP extends Mn{constructor(e){super(e)}load(e,t,i,s){const r=this,o=new Fs,a=new Ei(this.manager);return a.setResponseType("arraybuffer"),a.setRequestHeader(this.requestHeader),a.setPath(this.path),a.setWithCredentials(r.withCredentials),a.load(e,function(l){let c;try{c=r.parse(l)}catch(h){if(s!==void 0)s(h);else{console.error(h);return}}c.image!==void 0?o.image=c.image:c.data!==void 0&&(o.image.width=c.width,o.image.height=c.height,o.image.data=c.data),o.wrapS=c.wrapS!==void 0?c.wrapS:nn,o.wrapT=c.wrapT!==void 0?c.wrapT:nn,o.magFilter=c.magFilter!==void 0?c.magFilter:Ut,o.minFilter=c.minFilter!==void 0?c.minFilter:Ut,o.anisotropy=c.anisotropy!==void 0?c.anisotropy:1,c.colorSpace!==void 0?o.colorSpace=c.colorSpace:c.encoding!==void 0&&(o.encoding=c.encoding),c.flipY!==void 0&&(o.flipY=c.flipY),c.format!==void 0&&(o.format=c.format),c.type!==void 0&&(o.type=c.type),c.mipmaps!==void 0&&(o.mipmaps=c.mipmaps,o.minFilter=Ji),c.mipmapCount===1&&(o.minFilter=Ut),c.generateMipmaps!==void 0&&(o.generateMipmaps=c.generateMipmaps),o.needsUpdate=!0,t&&t(o,c)},i,s),o}}class lP extends Mn{constructor(e){super(e)}load(e,t,i,s){const r=new Nt,o=new Zo(this.manager);return o.setCrossOrigin(this.crossOrigin),o.setPath(this.path),o.load(e,function(a){r.image=a,r.needsUpdate=!0,t!==void 0&&t(r)},i,s),r}}class rs extends lt{constructor(e,t=1){super(),this.isLight=!0,this.type="Light",this.color=new Te(e),this.intensity=t}dispose(){}copy(e,t){return super.copy(e,t),this.color.copy(e.color),this.intensity=e.intensity,this}toJSON(e){const t=super.toJSON(e);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),t}}class ev extends rs{constructor(e,t,i){super(e,i),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(lt.DEFAULT_UP),this.updateMatrix(),this.groundColor=new Te(t)}copy(e,t){return super.copy(e,t),this.groundColor.copy(e.groundColor),this}}const Dh=new Oe,Tm=new I,Am=new I;class nf{constructor(e){this.camera=e,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new ue(512,512),this.map=null,this.mapPass=null,this.matrix=new Oe,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new la,this._frameExtents=new ue(1,1),this._viewportCount=1,this._viewports=[new dt(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(e){const t=this.camera,i=this.matrix;Tm.setFromMatrixPosition(e.matrixWorld),t.position.copy(Tm),Am.setFromMatrixPosition(e.target.matrixWorld),t.lookAt(Am),t.updateMatrixWorld(),Dh.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Dh),i.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),i.multiply(Dh)}getViewport(e){return this._viewports[e]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(e){return this.camera=e.camera.clone(),this.bias=e.bias,this.radius=e.radius,this.mapSize.copy(e.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const e={};return this.bias!==0&&(e.bias=this.bias),this.normalBias!==0&&(e.normalBias=this.normalBias),this.radius!==1&&(e.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(e.mapSize=this.mapSize.toArray()),e.camera=this.camera.toJSON(!1).object,delete e.camera.matrix,e}}class cP extends nf{constructor(){super(new kt(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(e){const t=this.camera,i=Or*2*e.angle*this.focus,s=this.mapSize.width/this.mapSize.height,r=e.distance||t.far;(i!==t.fov||s!==t.aspect||r!==t.far)&&(t.fov=i,t.aspect=s,t.far=r,t.updateProjectionMatrix()),super.updateMatrices(e)}copy(e){return super.copy(e),this.focus=e.focus,this}}class tv extends rs{constructor(e,t,i=0,s=Math.PI/3,r=0,o=2){super(e,t),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(lt.DEFAULT_UP),this.updateMatrix(),this.target=new lt,this.distance=i,this.angle=s,this.penumbra=r,this.decay=o,this.map=null,this.shadow=new cP}get power(){return this.intensity*Math.PI}set power(e){this.intensity=e/Math.PI}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.angle=e.angle,this.penumbra=e.penumbra,this.decay=e.decay,this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}const Cm=new Oe,ao=new I,Uh=new I;class hP extends nf{constructor(){super(new kt(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new ue(4,2),this._viewportCount=6,this._viewports=[new dt(2,1,1,1),new dt(0,1,1,1),new dt(3,1,1,1),new dt(1,1,1,1),new dt(3,0,1,1),new dt(1,0,1,1)],this._cubeDirections=[new I(1,0,0),new I(-1,0,0),new I(0,0,1),new I(0,0,-1),new I(0,1,0),new I(0,-1,0)],this._cubeUps=[new I(0,1,0),new I(0,1,0),new I(0,1,0),new I(0,1,0),new I(0,0,1),new I(0,0,-1)]}updateMatrices(e,t=0){const i=this.camera,s=this.matrix,r=e.distance||i.far;r!==i.far&&(i.far=r,i.updateProjectionMatrix()),ao.setFromMatrixPosition(e.matrixWorld),i.position.copy(ao),Uh.copy(i.position),Uh.add(this._cubeDirections[t]),i.up.copy(this._cubeUps[t]),i.lookAt(Uh),i.updateMatrixWorld(),s.makeTranslation(-ao.x,-ao.y,-ao.z),Cm.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Cm)}}class nv extends rs{constructor(e,t,i=0,s=2){super(e,t),this.isPointLight=!0,this.type="PointLight",this.distance=i,this.decay=s,this.shadow=new hP}get power(){return this.intensity*4*Math.PI}set power(e){this.intensity=e/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(e,t){return super.copy(e,t),this.distance=e.distance,this.decay=e.decay,this.shadow=e.shadow.clone(),this}}class uP extends nf{constructor(){super(new ha(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class iv extends rs{constructor(e,t){super(e,t),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(lt.DEFAULT_UP),this.updateMatrix(),this.target=new lt,this.shadow=new uP}dispose(){this.shadow.dispose()}copy(e){return super.copy(e),this.target=e.target.clone(),this.shadow=e.shadow.clone(),this}}class sv extends rs{constructor(e,t){super(e,t),this.isAmbientLight=!0,this.type="AmbientLight"}}class rv extends rs{constructor(e,t,i=10,s=10){super(e,t),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=i,this.height=s}get power(){return this.intensity*this.width*this.height*Math.PI}set power(e){this.intensity=e/(this.width*this.height*Math.PI)}copy(e){return super.copy(e),this.width=e.width,this.height=e.height,this}toJSON(e){const t=super.toJSON(e);return t.object.width=this.width,t.object.height=this.height,t}}class ov{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let e=0;e<9;e++)this.coefficients.push(new I)}set(e){for(let t=0;t<9;t++)this.coefficients[t].copy(e[t]);return this}zero(){for(let e=0;e<9;e++)this.coefficients[e].set(0,0,0);return this}getAt(e,t){const i=e.x,s=e.y,r=e.z,o=this.coefficients;return t.copy(o[0]).multiplyScalar(.282095),t.addScaledVector(o[1],.488603*s),t.addScaledVector(o[2],.488603*r),t.addScaledVector(o[3],.488603*i),t.addScaledVector(o[4],1.092548*(i*s)),t.addScaledVector(o[5],1.092548*(s*r)),t.addScaledVector(o[6],.315392*(3*r*r-1)),t.addScaledVector(o[7],1.092548*(i*r)),t.addScaledVector(o[8],.546274*(i*i-s*s)),t}getIrradianceAt(e,t){const i=e.x,s=e.y,r=e.z,o=this.coefficients;return t.copy(o[0]).multiplyScalar(.886227),t.addScaledVector(o[1],2*.511664*s),t.addScaledVector(o[2],2*.511664*r),t.addScaledVector(o[3],2*.511664*i),t.addScaledVector(o[4],2*.429043*i*s),t.addScaledVector(o[5],2*.429043*s*r),t.addScaledVector(o[6],.743125*r*r-.247708),t.addScaledVector(o[7],2*.429043*i*r),t.addScaledVector(o[8],.429043*(i*i-s*s)),t}add(e){for(let t=0;t<9;t++)this.coefficients[t].add(e.coefficients[t]);return this}addScaledSH(e,t){for(let i=0;i<9;i++)this.coefficients[i].addScaledVector(e.coefficients[i],t);return this}scale(e){for(let t=0;t<9;t++)this.coefficients[t].multiplyScalar(e);return this}lerp(e,t){for(let i=0;i<9;i++)this.coefficients[i].lerp(e.coefficients[i],t);return this}equals(e){for(let t=0;t<9;t++)if(!this.coefficients[t].equals(e.coefficients[t]))return!1;return!0}copy(e){return this.set(e.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(e,t=0){const i=this.coefficients;for(let s=0;s<9;s++)i[s].fromArray(e,t+s*3);return this}toArray(e=[],t=0){const i=this.coefficients;for(let s=0;s<9;s++)i[s].toArray(e,t+s*3);return e}static getBasisAt(e,t){const i=e.x,s=e.y,r=e.z;t[0]=.282095,t[1]=.488603*s,t[2]=.488603*r,t[3]=.488603*i,t[4]=1.092548*i*s,t[5]=1.092548*s*r,t[6]=.315392*(3*r*r-1),t[7]=1.092548*i*r,t[8]=.546274*(i*i-s*s)}}class av extends rs{constructor(e=new ov,t=1){super(void 0,t),this.isLightProbe=!0,this.sh=e}copy(e){return super.copy(e),this.sh.copy(e.sh),this}fromJSON(e){return this.intensity=e.intensity,this.sh.fromArray(e.sh),this}toJSON(e){const t=super.toJSON(e);return t.object.sh=this.sh.toArray(),t}}class Fc extends Mn{constructor(e){super(e),this.textures={}}load(e,t,i,s){const r=this,o=new Ei(r.manager);o.setPath(r.path),o.setRequestHeader(r.requestHeader),o.setWithCredentials(r.withCredentials),o.load(e,function(a){try{t(r.parse(JSON.parse(a)))}catch(l){s?s(l):console.error(l),r.manager.itemError(e)}},i,s)}parse(e){const t=this.textures;function i(r){return t[r]===void 0&&console.warn("THREE.MaterialLoader: Undefined texture",r),t[r]}const s=Fc.createMaterialFromType(e.type);if(e.uuid!==void 0&&(s.uuid=e.uuid),e.name!==void 0&&(s.name=e.name),e.color!==void 0&&s.color!==void 0&&s.color.setHex(e.color),e.roughness!==void 0&&(s.roughness=e.roughness),e.metalness!==void 0&&(s.metalness=e.metalness),e.sheen!==void 0&&(s.sheen=e.sheen),e.sheenColor!==void 0&&(s.sheenColor=new Te().setHex(e.sheenColor)),e.sheenRoughness!==void 0&&(s.sheenRoughness=e.sheenRoughness),e.emissive!==void 0&&s.emissive!==void 0&&s.emissive.setHex(e.emissive),e.specular!==void 0&&s.specular!==void 0&&s.specular.setHex(e.specular),e.specularIntensity!==void 0&&(s.specularIntensity=e.specularIntensity),e.specularColor!==void 0&&s.specularColor!==void 0&&s.specularColor.setHex(e.specularColor),e.shininess!==void 0&&(s.shininess=e.shininess),e.clearcoat!==void 0&&(s.clearcoat=e.clearcoat),e.clearcoatRoughness!==void 0&&(s.clearcoatRoughness=e.clearcoatRoughness),e.iridescence!==void 0&&(s.iridescence=e.iridescence),e.iridescenceIOR!==void 0&&(s.iridescenceIOR=e.iridescenceIOR),e.iridescenceThicknessRange!==void 0&&(s.iridescenceThicknessRange=e.iridescenceThicknessRange),e.transmission!==void 0&&(s.transmission=e.transmission),e.thickness!==void 0&&(s.thickness=e.thickness),e.attenuationDistance!==void 0&&(s.attenuationDistance=e.attenuationDistance),e.attenuationColor!==void 0&&s.attenuationColor!==void 0&&s.attenuationColor.setHex(e.attenuationColor),e.anisotropy!==void 0&&(s.anisotropy=e.anisotropy),e.anisotropyRotation!==void 0&&(s.anisotropyRotation=e.anisotropyRotation),e.fog!==void 0&&(s.fog=e.fog),e.flatShading!==void 0&&(s.flatShading=e.flatShading),e.blending!==void 0&&(s.blending=e.blending),e.combine!==void 0&&(s.combine=e.combine),e.side!==void 0&&(s.side=e.side),e.shadowSide!==void 0&&(s.shadowSide=e.shadowSide),e.opacity!==void 0&&(s.opacity=e.opacity),e.transparent!==void 0&&(s.transparent=e.transparent),e.alphaTest!==void 0&&(s.alphaTest=e.alphaTest),e.alphaHash!==void 0&&(s.alphaHash=e.alphaHash),e.depthFunc!==void 0&&(s.depthFunc=e.depthFunc),e.depthTest!==void 0&&(s.depthTest=e.depthTest),e.depthWrite!==void 0&&(s.depthWrite=e.depthWrite),e.colorWrite!==void 0&&(s.colorWrite=e.colorWrite),e.blendSrc!==void 0&&(s.blendSrc=e.blendSrc),e.blendDst!==void 0&&(s.blendDst=e.blendDst),e.blendEquation!==void 0&&(s.blendEquation=e.blendEquation),e.blendSrcAlpha!==void 0&&(s.blendSrcAlpha=e.blendSrcAlpha),e.blendDstAlpha!==void 0&&(s.blendDstAlpha=e.blendDstAlpha),e.blendEquationAlpha!==void 0&&(s.blendEquationAlpha=e.blendEquationAlpha),e.blendColor!==void 0&&s.blendColor!==void 0&&s.blendColor.setHex(e.blendColor),e.blendAlpha!==void 0&&(s.blendAlpha=e.blendAlpha),e.stencilWriteMask!==void 0&&(s.stencilWriteMask=e.stencilWriteMask),e.stencilFunc!==void 0&&(s.stencilFunc=e.stencilFunc),e.stencilRef!==void 0&&(s.stencilRef=e.stencilRef),e.stencilFuncMask!==void 0&&(s.stencilFuncMask=e.stencilFuncMask),e.stencilFail!==void 0&&(s.stencilFail=e.stencilFail),e.stencilZFail!==void 0&&(s.stencilZFail=e.stencilZFail),e.stencilZPass!==void 0&&(s.stencilZPass=e.stencilZPass),e.stencilWrite!==void 0&&(s.stencilWrite=e.stencilWrite),e.wireframe!==void 0&&(s.wireframe=e.wireframe),e.wireframeLinewidth!==void 0&&(s.wireframeLinewidth=e.wireframeLinewidth),e.wireframeLinecap!==void 0&&(s.wireframeLinecap=e.wireframeLinecap),e.wireframeLinejoin!==void 0&&(s.wireframeLinejoin=e.wireframeLinejoin),e.rotation!==void 0&&(s.rotation=e.rotation),e.linewidth!==void 0&&(s.linewidth=e.linewidth),e.dashSize!==void 0&&(s.dashSize=e.dashSize),e.gapSize!==void 0&&(s.gapSize=e.gapSize),e.scale!==void 0&&(s.scale=e.scale),e.polygonOffset!==void 0&&(s.polygonOffset=e.polygonOffset),e.polygonOffsetFactor!==void 0&&(s.polygonOffsetFactor=e.polygonOffsetFactor),e.polygonOffsetUnits!==void 0&&(s.polygonOffsetUnits=e.polygonOffsetUnits),e.dithering!==void 0&&(s.dithering=e.dithering),e.alphaToCoverage!==void 0&&(s.alphaToCoverage=e.alphaToCoverage),e.premultipliedAlpha!==void 0&&(s.premultipliedAlpha=e.premultipliedAlpha),e.forceSinglePass!==void 0&&(s.forceSinglePass=e.forceSinglePass),e.visible!==void 0&&(s.visible=e.visible),e.toneMapped!==void 0&&(s.toneMapped=e.toneMapped),e.userData!==void 0&&(s.userData=e.userData),e.vertexColors!==void 0&&(typeof e.vertexColors=="number"?s.vertexColors=e.vertexColors>0:s.vertexColors=e.vertexColors),e.uniforms!==void 0)for(const r in e.uniforms){const o=e.uniforms[r];switch(s.uniforms[r]={},o.type){case"t":s.uniforms[r].value=i(o.value);break;case"c":s.uniforms[r].value=new Te().setHex(o.value);break;case"v2":s.uniforms[r].value=new ue().fromArray(o.value);break;case"v3":s.uniforms[r].value=new I().fromArray(o.value);break;case"v4":s.uniforms[r].value=new dt().fromArray(o.value);break;case"m3":s.uniforms[r].value=new Ke().fromArray(o.value);break;case"m4":s.uniforms[r].value=new Oe().fromArray(o.value);break;default:s.uniforms[r].value=o.value}}if(e.defines!==void 0&&(s.defines=e.defines),e.vertexShader!==void 0&&(s.vertexShader=e.vertexShader),e.fragmentShader!==void 0&&(s.fragmentShader=e.fragmentShader),e.glslVersion!==void 0&&(s.glslVersion=e.glslVersion),e.extensions!==void 0)for(const r in e.extensions)s.extensions[r]=e.extensions[r];if(e.lights!==void 0&&(s.lights=e.lights),e.clipping!==void 0&&(s.clipping=e.clipping),e.size!==void 0&&(s.size=e.size),e.sizeAttenuation!==void 0&&(s.sizeAttenuation=e.sizeAttenuation),e.map!==void 0&&(s.map=i(e.map)),e.matcap!==void 0&&(s.matcap=i(e.matcap)),e.alphaMap!==void 0&&(s.alphaMap=i(e.alphaMap)),e.bumpMap!==void 0&&(s.bumpMap=i(e.bumpMap)),e.bumpScale!==void 0&&(s.bumpScale=e.bumpScale),e.normalMap!==void 0&&(s.normalMap=i(e.normalMap)),e.normalMapType!==void 0&&(s.normalMapType=e.normalMapType),e.normalScale!==void 0){let r=e.normalScale;Array.isArray(r)===!1&&(r=[r,r]),s.normalScale=new ue().fromArray(r)}return e.displacementMap!==void 0&&(s.displacementMap=i(e.displacementMap)),e.displacementScale!==void 0&&(s.displacementScale=e.displacementScale),e.displacementBias!==void 0&&(s.displacementBias=e.displacementBias),e.roughnessMap!==void 0&&(s.roughnessMap=i(e.roughnessMap)),e.metalnessMap!==void 0&&(s.metalnessMap=i(e.metalnessMap)),e.emissiveMap!==void 0&&(s.emissiveMap=i(e.emissiveMap)),e.emissiveIntensity!==void 0&&(s.emissiveIntensity=e.emissiveIntensity),e.specularMap!==void 0&&(s.specularMap=i(e.specularMap)),e.specularIntensityMap!==void 0&&(s.specularIntensityMap=i(e.specularIntensityMap)),e.specularColorMap!==void 0&&(s.specularColorMap=i(e.specularColorMap)),e.envMap!==void 0&&(s.envMap=i(e.envMap)),e.envMapIntensity!==void 0&&(s.envMapIntensity=e.envMapIntensity),e.reflectivity!==void 0&&(s.reflectivity=e.reflectivity),e.refractionRatio!==void 0&&(s.refractionRatio=e.refractionRatio),e.lightMap!==void 0&&(s.lightMap=i(e.lightMap)),e.lightMapIntensity!==void 0&&(s.lightMapIntensity=e.lightMapIntensity),e.aoMap!==void 0&&(s.aoMap=i(e.aoMap)),e.aoMapIntensity!==void 0&&(s.aoMapIntensity=e.aoMapIntensity),e.gradientMap!==void 0&&(s.gradientMap=i(e.gradientMap)),e.clearcoatMap!==void 0&&(s.clearcoatMap=i(e.clearcoatMap)),e.clearcoatRoughnessMap!==void 0&&(s.clearcoatRoughnessMap=i(e.clearcoatRoughnessMap)),e.clearcoatNormalMap!==void 0&&(s.clearcoatNormalMap=i(e.clearcoatNormalMap)),e.clearcoatNormalScale!==void 0&&(s.clearcoatNormalScale=new ue().fromArray(e.clearcoatNormalScale)),e.iridescenceMap!==void 0&&(s.iridescenceMap=i(e.iridescenceMap)),e.iridescenceThicknessMap!==void 0&&(s.iridescenceThicknessMap=i(e.iridescenceThicknessMap)),e.transmissionMap!==void 0&&(s.transmissionMap=i(e.transmissionMap)),e.thicknessMap!==void 0&&(s.thicknessMap=i(e.thicknessMap)),e.anisotropyMap!==void 0&&(s.anisotropyMap=i(e.anisotropyMap)),e.sheenColorMap!==void 0&&(s.sheenColorMap=i(e.sheenColorMap)),e.sheenRoughnessMap!==void 0&&(s.sheenRoughnessMap=i(e.sheenRoughnessMap)),s}setTextures(e){return this.textures=e,this}static createMaterialFromType(e){const t={ShadowMaterial:B_,SpriteMaterial:Hd,RawShaderMaterial:z_,ShaderMaterial:oi,PointsMaterial:Wd,MeshPhysicalMaterial:V_,MeshStandardMaterial:Kd,MeshPhongMaterial:H_,MeshToonMaterial:G_,MeshNormalMaterial:W_,MeshLambertMaterial:q_,MeshDepthMaterial:Bd,MeshDistanceMaterial:zd,MeshBasicMaterial:is,MeshMatcapMaterial:X_,LineDashedMaterial:$_,LineBasicMaterial:pn,Material:on};return new t[e]}}class Gu{static decodeText(e){if(typeof TextDecoder<"u")return new TextDecoder().decode(e);let t="";for(let i=0,s=e.length;i<s;i++)t+=String.fromCharCode(e[i]);try{return decodeURIComponent(escape(t))}catch{return t}}static extractUrlBase(e){const t=e.lastIndexOf("/");return t===-1?"./":e.slice(0,t+1)}static resolveURL(e,t){return typeof e!="string"||e===""?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}}class lv extends Je{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(e){return super.copy(e),this.instanceCount=e.instanceCount,this}toJSON(){const e=super.toJSON();return e.instanceCount=this.instanceCount,e.isInstancedBufferGeometry=!0,e}}class cv extends Mn{constructor(e){super(e)}load(e,t,i,s){const r=this,o=new Ei(r.manager);o.setPath(r.path),o.setRequestHeader(r.requestHeader),o.setWithCredentials(r.withCredentials),o.load(e,function(a){try{t(r.parse(JSON.parse(a)))}catch(l){s?s(l):console.error(l),r.manager.itemError(e)}},i,s)}parse(e){const t={},i={};function s(f,m){if(t[m]!==void 0)return t[m];const g=f.interleavedBuffers[m],p=r(f,g.buffer),v=_r(g.type,p),_=new xc(v,g.stride);return _.uuid=g.uuid,t[m]=_,_}function r(f,m){if(i[m]!==void 0)return i[m];const g=f.arrayBuffers[m],p=new Uint32Array(g).buffer;return i[m]=p,p}const o=e.isInstancedBufferGeometry?new lv:new Je,a=e.data.index;if(a!==void 0){const f=_r(a.type,a.array);o.setIndex(new ct(f,1))}const l=e.data.attributes;for(const f in l){const m=l[f];let y;if(m.isInterleavedBufferAttribute){const g=s(e.data,m.data);y=new Vs(g,m.itemSize,m.offset,m.normalized)}else{const g=_r(m.type,m.array),p=m.isInstancedBufferAttribute?kr:ct;y=new p(g,m.itemSize,m.normalized)}m.name!==void 0&&(y.name=m.name),m.usage!==void 0&&y.setUsage(m.usage),o.setAttribute(f,y)}const c=e.data.morphAttributes;if(c)for(const f in c){const m=c[f],y=[];for(let g=0,p=m.length;g<p;g++){const v=m[g];let _;if(v.isInterleavedBufferAttribute){const x=s(e.data,v.data);_=new Vs(x,v.itemSize,v.offset,v.normalized)}else{const x=_r(v.type,v.array);_=new ct(x,v.itemSize,v.normalized)}v.name!==void 0&&(_.name=v.name),y.push(_)}o.morphAttributes[f]=y}e.data.morphTargetsRelative&&(o.morphTargetsRelative=!0);const u=e.data.groups||e.data.drawcalls||e.data.offsets;if(u!==void 0)for(let f=0,m=u.length;f!==m;++f){const y=u[f];o.addGroup(y.start,y.count,y.materialIndex)}const d=e.data.boundingSphere;if(d!==void 0){const f=new I;d.center!==void 0&&f.fromArray(d.center),o.boundingSphere=new rn(f,d.radius)}return e.name&&(o.name=e.name),e.userData&&(o.userData=e.userData),o}}class dP extends Mn{constructor(e){super(e)}load(e,t,i,s){const r=this,o=this.path===""?Gu.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||o;const a=new Ei(this.manager);a.setPath(this.path),a.setRequestHeader(this.requestHeader),a.setWithCredentials(this.withCredentials),a.load(e,function(l){let c=null;try{c=JSON.parse(l)}catch(u){s!==void 0&&s(u),console.error("THREE:ObjectLoader: Can't parse "+e+".",u.message);return}const h=c.metadata;if(h===void 0||h.type===void 0||h.type.toLowerCase()==="geometry"){s!==void 0&&s(new Error("THREE.ObjectLoader: Can't load "+e)),console.error("THREE.ObjectLoader: Can't load "+e);return}r.parse(c,t)},i,s)}async loadAsync(e,t){const i=this,s=this.path===""?Gu.extractUrlBase(e):this.path;this.resourcePath=this.resourcePath||s;const r=new Ei(this.manager);r.setPath(this.path),r.setRequestHeader(this.requestHeader),r.setWithCredentials(this.withCredentials);const o=await r.loadAsync(e,t),a=JSON.parse(o),l=a.metadata;if(l===void 0||l.type===void 0||l.type.toLowerCase()==="geometry")throw new Error("THREE.ObjectLoader: Can't load "+e);return await i.parseAsync(a)}parse(e,t){const i=this.parseAnimations(e.animations),s=this.parseShapes(e.shapes),r=this.parseGeometries(e.geometries,s),o=this.parseImages(e.images,function(){t!==void 0&&t(c)}),a=this.parseTextures(e.textures,o),l=this.parseMaterials(e.materials,a),c=this.parseObject(e.object,r,l,a,i),h=this.parseSkeletons(e.skeletons,c);if(this.bindSkeletons(c,h),t!==void 0){let u=!1;for(const d in o)if(o[d].data instanceof HTMLImageElement){u=!0;break}u===!1&&t(c)}return c}async parseAsync(e){const t=this.parseAnimations(e.animations),i=this.parseShapes(e.shapes),s=this.parseGeometries(e.geometries,i),r=await this.parseImagesAsync(e.images),o=this.parseTextures(e.textures,r),a=this.parseMaterials(e.materials,o),l=this.parseObject(e.object,s,a,o,t),c=this.parseSkeletons(e.skeletons,l);return this.bindSkeletons(l,c),l}parseShapes(e){const t={};if(e!==void 0)for(let i=0,s=e.length;i<s;i++){const r=new ks().fromJSON(e[i]);t[r.uuid]=r}return t}parseSkeletons(e,t){const i={},s={};if(t.traverse(function(r){r.isBone&&(s[r.uuid]=r)}),e!==void 0)for(let r=0,o=e.length;r<o;r++){const a=new bc().fromJSON(e[r],s);i[a.uuid]=a}return i}parseGeometries(e,t){const i={};if(e!==void 0){const s=new cv;for(let r=0,o=e.length;r<o;r++){let a;const l=e[r];switch(l.type){case"BufferGeometry":case"InstancedBufferGeometry":a=s.parse(l);break;default:l.type in Em?a=Em[l.type].fromJSON(l,t):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${l.type}"`)}a.uuid=l.uuid,l.name!==void 0&&(a.name=l.name),l.userData!==void 0&&(a.userData=l.userData),i[l.uuid]=a}}return i}parseMaterials(e,t){const i={},s={};if(e!==void 0){const r=new Fc;r.setTextures(t);for(let o=0,a=e.length;o<a;o++){const l=e[o];i[l.uuid]===void 0&&(i[l.uuid]=r.parse(l)),s[l.uuid]=i[l.uuid]}}return s}parseAnimations(e){const t={};if(e!==void 0)for(let i=0;i<e.length;i++){const s=e[i],r=jo.parse(s);t[r.uuid]=r}return t}parseImages(e,t){const i=this,s={};let r;function o(l){return i.manager.itemStart(l),r.load(l,function(){i.manager.itemEnd(l)},void 0,function(){i.manager.itemError(l),i.manager.itemEnd(l)})}function a(l){if(typeof l=="string"){const c=l,h=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(c)?c:i.resourcePath+c;return o(h)}else return l.data?{data:_r(l.type,l.data),width:l.width,height:l.height}:null}if(e!==void 0&&e.length>0){const l=new tf(t);r=new Zo(l),r.setCrossOrigin(this.crossOrigin);for(let c=0,h=e.length;c<h;c++){const u=e[c],d=u.url;if(Array.isArray(d)){const f=[];for(let m=0,y=d.length;m<y;m++){const g=d[m],p=a(g);p!==null&&(p instanceof HTMLImageElement?f.push(p):f.push(new Fs(p.data,p.width,p.height)))}s[u.uuid]=new Ts(f)}else{const f=a(u.url);s[u.uuid]=new Ts(f)}}}return s}async parseImagesAsync(e){const t=this,i={};let s;async function r(o){if(typeof o=="string"){const a=o,l=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(a)?a:t.resourcePath+a;return await s.loadAsync(l)}else return o.data?{data:_r(o.type,o.data),width:o.width,height:o.height}:null}if(e!==void 0&&e.length>0){s=new Zo(this.manager),s.setCrossOrigin(this.crossOrigin);for(let o=0,a=e.length;o<a;o++){const l=e[o],c=l.url;if(Array.isArray(c)){const h=[];for(let u=0,d=c.length;u<d;u++){const f=c[u],m=await r(f);m!==null&&(m instanceof HTMLImageElement?h.push(m):h.push(new Fs(m.data,m.width,m.height)))}i[l.uuid]=new Ts(h)}else{const h=await r(l.url);i[l.uuid]=new Ts(h)}}}return i}parseTextures(e,t){function i(r,o){return typeof r=="number"?r:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",r),o[r])}const s={};if(e!==void 0)for(let r=0,o=e.length;r<o;r++){const a=e[r];a.image===void 0&&console.warn('THREE.ObjectLoader: No "image" specified for',a.uuid),t[a.image]===void 0&&console.warn("THREE.ObjectLoader: Undefined image",a.image);const l=t[a.image],c=l.data;let h;Array.isArray(c)?(h=new aa,c.length===6&&(h.needsUpdate=!0)):(c&&c.data?h=new Fs:h=new Nt,c&&(h.needsUpdate=!0)),h.source=l,h.uuid=a.uuid,a.name!==void 0&&(h.name=a.name),a.mapping!==void 0&&(h.mapping=i(a.mapping,fP)),a.channel!==void 0&&(h.channel=a.channel),a.offset!==void 0&&h.offset.fromArray(a.offset),a.repeat!==void 0&&h.repeat.fromArray(a.repeat),a.center!==void 0&&h.center.fromArray(a.center),a.rotation!==void 0&&(h.rotation=a.rotation),a.wrap!==void 0&&(h.wrapS=i(a.wrap[0],Rm),h.wrapT=i(a.wrap[1],Rm)),a.format!==void 0&&(h.format=a.format),a.internalFormat!==void 0&&(h.internalFormat=a.internalFormat),a.type!==void 0&&(h.type=a.type),a.colorSpace!==void 0&&(h.colorSpace=a.colorSpace),a.encoding!==void 0&&(h.encoding=a.encoding),a.minFilter!==void 0&&(h.minFilter=i(a.minFilter,Pm)),a.magFilter!==void 0&&(h.magFilter=i(a.magFilter,Pm)),a.anisotropy!==void 0&&(h.anisotropy=a.anisotropy),a.flipY!==void 0&&(h.flipY=a.flipY),a.generateMipmaps!==void 0&&(h.generateMipmaps=a.generateMipmaps),a.premultiplyAlpha!==void 0&&(h.premultiplyAlpha=a.premultiplyAlpha),a.unpackAlignment!==void 0&&(h.unpackAlignment=a.unpackAlignment),a.compareFunction!==void 0&&(h.compareFunction=a.compareFunction),a.userData!==void 0&&(h.userData=a.userData),s[a.uuid]=h}return s}parseObject(e,t,i,s,r){let o;function a(d){return t[d]===void 0&&console.warn("THREE.ObjectLoader: Undefined geometry",d),t[d]}function l(d){if(d!==void 0){if(Array.isArray(d)){const f=[];for(let m=0,y=d.length;m<y;m++){const g=d[m];i[g]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",g),f.push(i[g])}return f}return i[d]===void 0&&console.warn("THREE.ObjectLoader: Undefined material",d),i[d]}}function c(d){return s[d]===void 0&&console.warn("THREE.ObjectLoader: Undefined texture",d),s[d]}let h,u;switch(e.type){case"Scene":o=new Vd,e.background!==void 0&&(Number.isInteger(e.background)?o.background=new Te(e.background):o.background=c(e.background)),e.environment!==void 0&&(o.environment=c(e.environment)),e.fog!==void 0&&(e.fog.type==="Fog"?o.fog=new vc(e.fog.color,e.fog.near,e.fog.far):e.fog.type==="FogExp2"&&(o.fog=new _c(e.fog.color,e.fog.density)),e.fog.name!==""&&(o.fog.name=e.fog.name)),e.backgroundBlurriness!==void 0&&(o.backgroundBlurriness=e.backgroundBlurriness),e.backgroundIntensity!==void 0&&(o.backgroundIntensity=e.backgroundIntensity);break;case"PerspectiveCamera":o=new kt(e.fov,e.aspect,e.near,e.far),e.focus!==void 0&&(o.focus=e.focus),e.zoom!==void 0&&(o.zoom=e.zoom),e.filmGauge!==void 0&&(o.filmGauge=e.filmGauge),e.filmOffset!==void 0&&(o.filmOffset=e.filmOffset),e.view!==void 0&&(o.view=Object.assign({},e.view));break;case"OrthographicCamera":o=new ha(e.left,e.right,e.top,e.bottom,e.near,e.far),e.zoom!==void 0&&(o.zoom=e.zoom),e.view!==void 0&&(o.view=Object.assign({},e.view));break;case"AmbientLight":o=new sv(e.color,e.intensity);break;case"DirectionalLight":o=new iv(e.color,e.intensity);break;case"PointLight":o=new nv(e.color,e.intensity,e.distance,e.decay);break;case"RectAreaLight":o=new rv(e.color,e.intensity,e.width,e.height);break;case"SpotLight":o=new tv(e.color,e.intensity,e.distance,e.angle,e.penumbra,e.decay);break;case"HemisphereLight":o=new ev(e.color,e.groundColor,e.intensity);break;case"LightProbe":o=new av().fromJSON(e);break;case"SkinnedMesh":h=a(e.geometry),u=l(e.material),o=new S_(h,u),e.bindMode!==void 0&&(o.bindMode=e.bindMode),e.bindMatrix!==void 0&&o.bindMatrix.fromArray(e.bindMatrix),e.skeleton!==void 0&&(o.skeleton=e.skeleton);break;case"Mesh":h=a(e.geometry),u=l(e.material),o=new zt(h,u);break;case"InstancedMesh":h=a(e.geometry),u=l(e.material);const d=e.count,f=e.instanceMatrix,m=e.instanceColor;o=new E_(h,u,d),o.instanceMatrix=new kr(new Float32Array(f.array),16),m!==void 0&&(o.instanceColor=new kr(new Float32Array(m.array),m.itemSize));break;case"BatchedMesh":h=a(e.geometry),u=l(e.material),o=new T_(e.maxGeometryCount,e.maxVertexCount,e.maxIndexCount,u),o.geometry=h,o.perObjectFrustumCulled=e.perObjectFrustumCulled,o.sortObjects=e.sortObjects,o._drawRanges=e.drawRanges,o._reservedRanges=e.reservedRanges,o._visibility=e.visibility,o._active=e.active,o._bounds=e.bounds.map(y=>{const g=new fn;g.min.fromArray(y.boxMin),g.max.fromArray(y.boxMax);const p=new rn;return p.radius=y.sphereRadius,p.center.fromArray(y.sphereCenter),{boxInitialized:y.boxInitialized,box:g,sphereInitialized:y.sphereInitialized,sphere:p}}),o._maxGeometryCount=e.maxGeometryCount,o._maxVertexCount=e.maxVertexCount,o._maxIndexCount=e.maxIndexCount,o._geometryInitialized=e.geometryInitialized,o._geometryCount=e.geometryCount,o._matricesTexture=c(e.matricesTexture.uuid);break;case"LOD":o=new M_;break;case"Line":o=new Qi(a(e.geometry),l(e.material));break;case"LineLoop":o=new A_(a(e.geometry),l(e.material));break;case"LineSegments":o=new ai(a(e.geometry),l(e.material));break;case"PointCloud":case"Points":o=new C_(a(e.geometry),l(e.material));break;case"Sprite":o=new w_(l(e.material));break;case"Group":o=new br;break;case"Bone":o=new Gd;break;default:o=new lt}if(o.uuid=e.uuid,e.name!==void 0&&(o.name=e.name),e.matrix!==void 0?(o.matrix.fromArray(e.matrix),e.matrixAutoUpdate!==void 0&&(o.matrixAutoUpdate=e.matrixAutoUpdate),o.matrixAutoUpdate&&o.matrix.decompose(o.position,o.quaternion,o.scale)):(e.position!==void 0&&o.position.fromArray(e.position),e.rotation!==void 0&&o.rotation.fromArray(e.rotation),e.quaternion!==void 0&&o.quaternion.fromArray(e.quaternion),e.scale!==void 0&&o.scale.fromArray(e.scale)),e.up!==void 0&&o.up.fromArray(e.up),e.castShadow!==void 0&&(o.castShadow=e.castShadow),e.receiveShadow!==void 0&&(o.receiveShadow=e.receiveShadow),e.shadow&&(e.shadow.bias!==void 0&&(o.shadow.bias=e.shadow.bias),e.shadow.normalBias!==void 0&&(o.shadow.normalBias=e.shadow.normalBias),e.shadow.radius!==void 0&&(o.shadow.radius=e.shadow.radius),e.shadow.mapSize!==void 0&&o.shadow.mapSize.fromArray(e.shadow.mapSize),e.shadow.camera!==void 0&&(o.shadow.camera=this.parseObject(e.shadow.camera))),e.visible!==void 0&&(o.visible=e.visible),e.frustumCulled!==void 0&&(o.frustumCulled=e.frustumCulled),e.renderOrder!==void 0&&(o.renderOrder=e.renderOrder),e.userData!==void 0&&(o.userData=e.userData),e.layers!==void 0&&(o.layers.mask=e.layers),e.children!==void 0){const d=e.children;for(let f=0;f<d.length;f++)o.add(this.parseObject(d[f],t,i,s,r))}if(e.animations!==void 0){const d=e.animations;for(let f=0;f<d.length;f++){const m=d[f];o.animations.push(r[m])}}if(e.type==="LOD"){e.autoUpdate!==void 0&&(o.autoUpdate=e.autoUpdate);const d=e.levels;for(let f=0;f<d.length;f++){const m=d[f],y=o.getObjectByProperty("uuid",m.object);y!==void 0&&o.addLevel(y,m.distance,m.hysteresis)}}return o}bindSkeletons(e,t){Object.keys(t).length!==0&&e.traverse(function(i){if(i.isSkinnedMesh===!0&&i.skeleton!==void 0){const s=t[i.skeleton];s===void 0?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",i.skeleton):i.bind(s,i.bindMatrix)}})}}const fP={UVMapping:uc,CubeReflectionMapping:Si,CubeRefractionMapping:Ki,EquirectangularReflectionMapping:Io,EquirectangularRefractionMapping:Lo,CubeUVReflectionMapping:Gr},Rm={RepeatWrapping:Do,ClampToEdgeWrapping:nn,MirroredRepeatWrapping:Uo},Pm={NearestFilter:Dt,NearestMipmapNearestFilter:Vl,NearestMipmapLinearFilter:yo,LinearFilter:Ut,LinearMipmapNearestFilter:bd,LinearMipmapLinearFilter:Ji};class pP extends Mn{constructor(e){super(e),this.isImageBitmapLoader=!0,typeof createImageBitmap>"u"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch>"u"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(e){return this.options=e,this}load(e,t,i,s){e===void 0&&(e=""),this.path!==void 0&&(e=this.path+e),e=this.manager.resolveURL(e);const r=this,o=_i.get(e);if(o!==void 0){if(r.manager.itemStart(e),o.then){o.then(c=>{t&&t(c),r.manager.itemEnd(e)}).catch(c=>{s&&s(c)});return}return setTimeout(function(){t&&t(o),r.manager.itemEnd(e)},0),o}const a={};a.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",a.headers=this.requestHeader;const l=fetch(e,a).then(function(c){return c.blob()}).then(function(c){return createImageBitmap(c,Object.assign(r.options,{colorSpaceConversion:"none"}))}).then(function(c){return _i.add(e,c),t&&t(c),r.manager.itemEnd(e),c}).catch(function(c){s&&s(c),_i.remove(e),r.manager.itemError(e),r.manager.itemEnd(e)});_i.add(e,l),r.manager.itemStart(e)}}let ll;class sf{static getContext(){return ll===void 0&&(ll=new(window.AudioContext||window.webkitAudioContext)),ll}static setContext(e){ll=e}}class mP extends Mn{constructor(e){super(e)}load(e,t,i,s){const r=this,o=new Ei(this.manager);o.setResponseType("arraybuffer"),o.setPath(this.path),o.setRequestHeader(this.requestHeader),o.setWithCredentials(this.withCredentials),o.load(e,function(l){try{const c=l.slice(0);sf.getContext().decodeAudioData(c,function(u){t(u)}).catch(a)}catch(c){a(c)}},i,s);function a(l){s?s(l):console.error(l),r.manager.itemError(e)}}}const Im=new Oe,Lm=new Oe,ms=new Oe;class gP{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new kt,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new kt,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(e){const t=this._cache;if(t.focus!==e.focus||t.fov!==e.fov||t.aspect!==e.aspect*this.aspect||t.near!==e.near||t.far!==e.far||t.zoom!==e.zoom||t.eyeSep!==this.eyeSep){t.focus=e.focus,t.fov=e.fov,t.aspect=e.aspect*this.aspect,t.near=e.near,t.far=e.far,t.zoom=e.zoom,t.eyeSep=this.eyeSep,ms.copy(e.projectionMatrix);const s=t.eyeSep/2,r=s*t.near/t.focus,o=t.near*Math.tan(Os*t.fov*.5)/t.zoom;let a,l;Lm.elements[12]=-s,Im.elements[12]=s,a=-o*t.aspect+r,l=o*t.aspect+r,ms.elements[0]=2*t.near/(l-a),ms.elements[8]=(l+a)/(l-a),this.cameraL.projectionMatrix.copy(ms),a=-o*t.aspect-r,l=o*t.aspect-r,ms.elements[0]=2*t.near/(l-a),ms.elements[8]=(l+a)/(l-a),this.cameraR.projectionMatrix.copy(ms)}this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(Lm),this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(Im)}}class rf{constructor(e=!0){this.autoStart=e,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=Dm(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let e=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const t=Dm();e=(t-this.oldTime)/1e3,this.oldTime=t,this.elapsedTime+=e}return e}}function Dm(){return(typeof performance>"u"?Date:performance).now()}const gs=new I,Um=new bn,yP=new I,ys=new I;class _P extends lt{constructor(){super(),this.type="AudioListener",this.context=sf.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new rf}getInput(){return this.gain}removeFilter(){return this.filter!==null&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(e){return this.filter!==null?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=e,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}updateMatrixWorld(e){super.updateMatrixWorld(e);const t=this.context.listener,i=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(gs,Um,yP),ys.set(0,0,-1).applyQuaternion(Um),t.positionX){const s=this.context.currentTime+this.timeDelta;t.positionX.linearRampToValueAtTime(gs.x,s),t.positionY.linearRampToValueAtTime(gs.y,s),t.positionZ.linearRampToValueAtTime(gs.z,s),t.forwardX.linearRampToValueAtTime(ys.x,s),t.forwardY.linearRampToValueAtTime(ys.y,s),t.forwardZ.linearRampToValueAtTime(ys.z,s),t.upX.linearRampToValueAtTime(i.x,s),t.upY.linearRampToValueAtTime(i.y,s),t.upZ.linearRampToValueAtTime(i.z,s)}else t.setPosition(gs.x,gs.y,gs.z),t.setOrientation(ys.x,ys.y,ys.z,i.x,i.y,i.z)}}class hv extends lt{constructor(e){super(),this.type="Audio",this.listener=e,this.context=e.context,this.gain=this.context.createGain(),this.gain.connect(e.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(e){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=e,this.connect(),this}setMediaElementSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(e),this.connect(),this}setMediaStreamSource(e){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(e),this.connect(),this}setBuffer(e){return this.buffer=e,this.sourceType="buffer",this.autoplay&&this.play(),this}play(e=0){if(this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+e;const t=this.context.createBufferSource();return t.buffer=this.buffer,t.loop=this.loop,t.loopStart=this.loopStart,t.loopEnd=this.loopEnd,t.onended=this.onEnded.bind(this),t.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=t,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source!==null&&(this.source.stop(),this.source.onended=null),this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].connect(this.filters[e]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this._connected!==!1){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let e=1,t=this.filters.length;e<t;e++)this.filters[e-1].disconnect(this.filters[e]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}}getFilters(){return this.filters}setFilters(e){return e||(e=[]),this._connected===!0?(this.disconnect(),this.filters=e.slice(),this.connect()):this.filters=e.slice(),this}setDetune(e){if(this.detune=e,this.source.detune!==void 0)return this.isPlaying===!0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(e){return this.setFilters(e?[e]:[])}setPlaybackRate(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=e,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(e){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=e,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(e){return this.loopStart=e,this}setLoopEnd(e){return this.loopEnd=e,this}getVolume(){return this.gain.gain.value}setVolume(e){return this.gain.gain.setTargetAtTime(e,this.context.currentTime,.01),this}}const _s=new I,Nm=new bn,vP=new I,vs=new I;class xP extends hv{constructor(e){super(e),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}connect(){super.connect(),this.panner.connect(this.gain)}disconnect(){super.disconnect(),this.panner.disconnect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(e){return this.panner.refDistance=e,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(e){return this.panner.rolloffFactor=e,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(e){return this.panner.distanceModel=e,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(e){return this.panner.maxDistance=e,this}setDirectionalCone(e,t,i){return this.panner.coneInnerAngle=e,this.panner.coneOuterAngle=t,this.panner.coneOuterGain=i,this}updateMatrixWorld(e){if(super.updateMatrixWorld(e),this.hasPlaybackControl===!0&&this.isPlaying===!1)return;this.matrixWorld.decompose(_s,Nm,vP),vs.set(0,0,1).applyQuaternion(Nm);const t=this.panner;if(t.positionX){const i=this.context.currentTime+this.listener.timeDelta;t.positionX.linearRampToValueAtTime(_s.x,i),t.positionY.linearRampToValueAtTime(_s.y,i),t.positionZ.linearRampToValueAtTime(_s.z,i),t.orientationX.linearRampToValueAtTime(vs.x,i),t.orientationY.linearRampToValueAtTime(vs.y,i),t.orientationZ.linearRampToValueAtTime(vs.z,i)}else t.setPosition(_s.x,_s.y,_s.z),t.setOrientation(vs.x,vs.y,vs.z)}}class bP{constructor(e,t=2048){this.analyser=e.context.createAnalyser(),this.analyser.fftSize=t,this.data=new Uint8Array(this.analyser.frequencyBinCount),e.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let e=0;const t=this.getFrequencyData();for(let i=0;i<t.length;i++)e+=t[i];return e/t.length}}class uv{constructor(e,t,i){this.binding=e,this.valueSize=i;let s,r,o;switch(t){case"quaternion":s=this._slerp,r=this._slerpAdditive,o=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(i*6),this._workIndex=5;break;case"string":case"bool":s=this._select,r=this._select,o=this._setAdditiveIdentityOther,this.buffer=new Array(i*5);break;default:s=this._lerp,r=this._lerpAdditive,o=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(i*5)}this._mixBufferRegion=s,this._mixBufferRegionAdditive=r,this._setIdentity=o,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(e,t){const i=this.buffer,s=this.valueSize,r=e*s+s;let o=this.cumulativeWeight;if(o===0){for(let a=0;a!==s;++a)i[r+a]=i[a];o=t}else{o+=t;const a=t/o;this._mixBufferRegion(i,r,0,a,s)}this.cumulativeWeight=o}accumulateAdditive(e){const t=this.buffer,i=this.valueSize,s=i*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(t,s,0,e,i),this.cumulativeWeightAdditive+=e}apply(e){const t=this.valueSize,i=this.buffer,s=e*t+t,r=this.cumulativeWeight,o=this.cumulativeWeightAdditive,a=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,r<1){const l=t*this._origIndex;this._mixBufferRegion(i,s,l,1-r,t)}o>0&&this._mixBufferRegionAdditive(i,s,this._addIndex*t,1,t);for(let l=t,c=t+t;l!==c;++l)if(i[l]!==i[l+t]){a.setValue(i,s);break}}saveOriginalState(){const e=this.binding,t=this.buffer,i=this.valueSize,s=i*this._origIndex;e.getValue(t,s);for(let r=i,o=s;r!==o;++r)t[r]=t[s+r%i];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const e=this.valueSize*3;this.binding.setValue(this.buffer,e)}_setAdditiveIdentityNumeric(){const e=this._addIndex*this.valueSize,t=e+this.valueSize;for(let i=e;i<t;i++)this.buffer[i]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const e=this._origIndex*this.valueSize,t=this._addIndex*this.valueSize;for(let i=0;i<this.valueSize;i++)this.buffer[t+i]=this.buffer[e+i]}_select(e,t,i,s,r){if(s>=.5)for(let o=0;o!==r;++o)e[t+o]=e[i+o]}_slerp(e,t,i,s){bn.slerpFlat(e,t,e,t,e,i,s)}_slerpAdditive(e,t,i,s,r){const o=this._workIndex*r;bn.multiplyQuaternionsFlat(e,o,e,t,e,i),bn.slerpFlat(e,t,e,t,e,o,s)}_lerp(e,t,i,s,r){const o=1-s;for(let a=0;a!==r;++a){const l=t+a;e[l]=e[l]*o+e[i+a]*s}}_lerpAdditive(e,t,i,s,r){for(let o=0;o!==r;++o){const a=t+o;e[a]=e[a]+e[i+o]*s}}}const of="\\[\\]\\.:\\/",wP=new RegExp("["+of+"]","g"),af="[^"+of+"]",MP="[^"+of.replace("\\.","")+"]",SP=/((?:WC+[\/:])*)/.source.replace("WC",af),EP=/(WCOD+)?/.source.replace("WCOD",MP),TP=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",af),AP=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",af),CP=new RegExp("^"+SP+EP+TP+AP+"$"),RP=["material","materials","bones","map"];class PP{constructor(e,t,i){const s=i||st.parseTrackName(t);this._targetGroup=e,this._bindings=e.subscribe_(t,s)}getValue(e,t){this.bind();const i=this._targetGroup.nCachedObjects_,s=this._bindings[i];s!==void 0&&s.getValue(e,t)}setValue(e,t){const i=this._bindings;for(let s=this._targetGroup.nCachedObjects_,r=i.length;s!==r;++s)i[s].setValue(e,t)}bind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,i=e.length;t!==i;++t)e[t].bind()}unbind(){const e=this._bindings;for(let t=this._targetGroup.nCachedObjects_,i=e.length;t!==i;++t)e[t].unbind()}}class st{constructor(e,t,i){this.path=t,this.parsedPath=i||st.parseTrackName(t),this.node=st.findNode(e,this.parsedPath.nodeName),this.rootNode=e,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(e,t,i){return e&&e.isAnimationObjectGroup?new st.Composite(e,t,i):new st(e,t,i)}static sanitizeNodeName(e){return e.replace(/\s/g,"_").replace(wP,"")}static parseTrackName(e){const t=CP.exec(e);if(t===null)throw new Error("PropertyBinding: Cannot parse trackName: "+e);const i={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},s=i.nodeName&&i.nodeName.lastIndexOf(".");if(s!==void 0&&s!==-1){const r=i.nodeName.substring(s+1);RP.indexOf(r)!==-1&&(i.nodeName=i.nodeName.substring(0,s),i.objectName=r)}if(i.propertyName===null||i.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+e);return i}static findNode(e,t){if(t===void 0||t===""||t==="."||t===-1||t===e.name||t===e.uuid)return e;if(e.skeleton){const i=e.skeleton.getBoneByName(t);if(i!==void 0)return i}if(e.children){const i=function(r){for(let o=0;o<r.length;o++){const a=r[o];if(a.name===t||a.uuid===t)return a;const l=i(a.children);if(l)return l}return null},s=i(e.children);if(s)return s}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(e,t){e[t]=this.targetObject[this.propertyName]}_getValue_array(e,t){const i=this.resolvedProperty;for(let s=0,r=i.length;s!==r;++s)e[t++]=i[s]}_getValue_arrayElement(e,t){e[t]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(e,t){this.resolvedProperty.toArray(e,t)}_setValue_direct(e,t){this.targetObject[this.propertyName]=e[t]}_setValue_direct_setNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(e,t){this.targetObject[this.propertyName]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(e,t){const i=this.resolvedProperty;for(let s=0,r=i.length;s!==r;++s)i[s]=e[t++]}_setValue_array_setNeedsUpdate(e,t){const i=this.resolvedProperty;for(let s=0,r=i.length;s!==r;++s)i[s]=e[t++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(e,t){const i=this.resolvedProperty;for(let s=0,r=i.length;s!==r;++s)i[s]=e[t++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(e,t){this.resolvedProperty[this.propertyIndex]=e[t]}_setValue_arrayElement_setNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty[this.propertyIndex]=e[t],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(e,t){this.resolvedProperty.fromArray(e,t)}_setValue_fromArray_setNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(e,t){this.resolvedProperty.fromArray(e,t),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(e,t){this.bind(),this.getValue(e,t)}_setValue_unbound(e,t){this.bind(),this.setValue(e,t)}bind(){let e=this.node;const t=this.parsedPath,i=t.objectName,s=t.propertyName;let r=t.propertyIndex;if(e||(e=st.findNode(this.rootNode,t.nodeName),this.node=e),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!e){console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");return}if(i){let c=t.objectIndex;switch(i){case"materials":if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}e=e.material.materials;break;case"bones":if(!e.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}e=e.skeleton.bones;for(let h=0;h<e.length;h++)if(e[h].name===c){c=h;break}break;case"map":if("map"in e){e=e.map;break}if(!e.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!e.material.map){console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);return}e=e.material.map;break;default:if(e[i]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}e=e[i]}if(c!==void 0){if(e[c]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,e);return}e=e[c]}}const o=e[s];if(o===void 0){const c=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+c+"."+s+" but it wasn't found.",e);return}let a=this.Versioning.None;this.targetObject=e,e.needsUpdate!==void 0?a=this.Versioning.NeedsUpdate:e.matrixWorldNeedsUpdate!==void 0&&(a=this.Versioning.MatrixWorldNeedsUpdate);let l=this.BindingType.Direct;if(r!==void 0){if(s==="morphTargetInfluences"){if(!e.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(!e.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}e.morphTargetDictionary[r]!==void 0&&(r=e.morphTargetDictionary[r])}l=this.BindingType.ArrayElement,this.resolvedProperty=o,this.propertyIndex=r}else o.fromArray!==void 0&&o.toArray!==void 0?(l=this.BindingType.HasFromToArray,this.resolvedProperty=o):Array.isArray(o)?(l=this.BindingType.EntireArray,this.resolvedProperty=o):this.propertyName=s;this.getValue=this.GetterByBindingType[l],this.setValue=this.SetterByBindingTypeAndVersioning[l][a]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}st.Composite=PP;st.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};st.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};st.prototype.GetterByBindingType=[st.prototype._getValue_direct,st.prototype._getValue_array,st.prototype._getValue_arrayElement,st.prototype._getValue_toArray];st.prototype.SetterByBindingTypeAndVersioning=[[st.prototype._setValue_direct,st.prototype._setValue_direct_setNeedsUpdate,st.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[st.prototype._setValue_array,st.prototype._setValue_array_setNeedsUpdate,st.prototype._setValue_array_setMatrixWorldNeedsUpdate],[st.prototype._setValue_arrayElement,st.prototype._setValue_arrayElement_setNeedsUpdate,st.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[st.prototype._setValue_fromArray,st.prototype._setValue_fromArray_setNeedsUpdate,st.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class IP{constructor(){this.isAnimationObjectGroup=!0,this.uuid=Rn(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const e={};this._indicesByUUID=e;for(let i=0,s=arguments.length;i!==s;++i)e[arguments[i].uuid]=i;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const t=this;this.stats={objects:{get total(){return t._objects.length},get inUse(){return this.total-t.nCachedObjects_}},get bindingsPerObject(){return t._bindings.length}}}add(){const e=this._objects,t=this._indicesByUUID,i=this._paths,s=this._parsedPaths,r=this._bindings,o=r.length;let a,l=e.length,c=this.nCachedObjects_;for(let h=0,u=arguments.length;h!==u;++h){const d=arguments[h],f=d.uuid;let m=t[f];if(m===void 0){m=l++,t[f]=m,e.push(d);for(let y=0,g=o;y!==g;++y)r[y].push(new st(d,i[y],s[y]))}else if(m<c){a=e[m];const y=--c,g=e[y];t[g.uuid]=m,e[m]=g,t[f]=y,e[y]=d;for(let p=0,v=o;p!==v;++p){const _=r[p],x=_[y];let P=_[m];_[m]=x,P===void 0&&(P=new st(d,i[p],s[p])),_[y]=P}}else e[m]!==a&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=c}remove(){const e=this._objects,t=this._indicesByUUID,i=this._bindings,s=i.length;let r=this.nCachedObjects_;for(let o=0,a=arguments.length;o!==a;++o){const l=arguments[o],c=l.uuid,h=t[c];if(h!==void 0&&h>=r){const u=r++,d=e[u];t[d.uuid]=h,e[h]=d,t[c]=u,e[u]=l;for(let f=0,m=s;f!==m;++f){const y=i[f],g=y[u],p=y[h];y[h]=g,y[u]=p}}}this.nCachedObjects_=r}uncache(){const e=this._objects,t=this._indicesByUUID,i=this._bindings,s=i.length;let r=this.nCachedObjects_,o=e.length;for(let a=0,l=arguments.length;a!==l;++a){const c=arguments[a],h=c.uuid,u=t[h];if(u!==void 0)if(delete t[h],u<r){const d=--r,f=e[d],m=--o,y=e[m];t[f.uuid]=u,e[u]=f,t[y.uuid]=d,e[d]=y,e.pop();for(let g=0,p=s;g!==p;++g){const v=i[g],_=v[d],x=v[m];v[u]=_,v[d]=x,v.pop()}}else{const d=--o,f=e[d];d>0&&(t[f.uuid]=u),e[u]=f,e.pop();for(let m=0,y=s;m!==y;++m){const g=i[m];g[u]=g[d],g.pop()}}}this.nCachedObjects_=r}subscribe_(e,t){const i=this._bindingsIndicesByPath;let s=i[e];const r=this._bindings;if(s!==void 0)return r[s];const o=this._paths,a=this._parsedPaths,l=this._objects,c=l.length,h=this.nCachedObjects_,u=new Array(c);s=r.length,i[e]=s,o.push(e),a.push(t),r.push(u);for(let d=h,f=l.length;d!==f;++d){const m=l[d];u[d]=new st(m,e,t)}return u}unsubscribe_(e){const t=this._bindingsIndicesByPath,i=t[e];if(i!==void 0){const s=this._paths,r=this._parsedPaths,o=this._bindings,a=o.length-1,l=o[a],c=e[a];t[c]=i,o[i]=l,o.pop(),r[i]=r[a],r.pop(),s[i]=s[a],s.pop()}}}class dv{constructor(e,t,i=null,s=t.blendMode){this._mixer=e,this._clip=t,this._localRoot=i,this.blendMode=s;const r=t.tracks,o=r.length,a=new Array(o),l={endingStart:Ss,endingEnd:Ss};for(let c=0;c!==o;++c){const h=r[c].createInterpolant(null);a[c]=h,h.settings=l}this._interpolantSettings=l,this._interpolants=a,this._propertyBindings=new Array(o),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Xy,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(e){return this._startTime=e,this}setLoop(e,t){return this.loop=e,this.repetitions=t,this}setEffectiveWeight(e){return this.weight=e,this._effectiveWeight=this.enabled?e:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(e){return this._scheduleFading(e,0,1)}fadeOut(e){return this._scheduleFading(e,1,0)}crossFadeFrom(e,t,i){if(e.fadeOut(t),this.fadeIn(t),i){const s=this._clip.duration,r=e._clip.duration,o=r/s,a=s/r;e.warp(1,o,t),this.warp(a,1,t)}return this}crossFadeTo(e,t,i){return e.crossFadeFrom(this,t,i)}stopFading(){const e=this._weightInterpolant;return e!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}setEffectiveTimeScale(e){return this.timeScale=e,this._effectiveTimeScale=this.paused?0:e,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(e){return this.timeScale=this._clip.duration/e,this.stopWarping()}syncWith(e){return this.time=e.time,this.timeScale=e.timeScale,this.stopWarping()}halt(e){return this.warp(this._effectiveTimeScale,0,e)}warp(e,t,i){const s=this._mixer,r=s.time,o=this.timeScale;let a=this._timeScaleInterpolant;a===null&&(a=s._lendControlInterpolant(),this._timeScaleInterpolant=a);const l=a.parameterPositions,c=a.sampleValues;return l[0]=r,l[1]=r+i,c[0]=e/o,c[1]=t/o,this}stopWarping(){const e=this._timeScaleInterpolant;return e!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(e)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(e,t,i,s){if(!this.enabled){this._updateWeight(e);return}const r=this._startTime;if(r!==null){const l=(e-r)*i;l<0||i===0?t=0:(this._startTime=null,t=i*l)}t*=this._updateTimeScale(e);const o=this._updateTime(t),a=this._updateWeight(e);if(a>0){const l=this._interpolants,c=this._propertyBindings;switch(this.blendMode){case Rd:for(let h=0,u=l.length;h!==u;++h)l[h].evaluate(o),c[h].accumulateAdditive(a);break;case fc:default:for(let h=0,u=l.length;h!==u;++h)l[h].evaluate(o),c[h].accumulate(s,a)}}}_updateWeight(e){let t=0;if(this.enabled){t=this.weight;const i=this._weightInterpolant;if(i!==null){const s=i.evaluate(e)[0];t*=s,e>i.parameterPositions[1]&&(this.stopFading(),s===0&&(this.enabled=!1))}}return this._effectiveWeight=t,t}_updateTimeScale(e){let t=0;if(!this.paused){t=this.timeScale;const i=this._timeScaleInterpolant;if(i!==null){const s=i.evaluate(e)[0];t*=s,e>i.parameterPositions[1]&&(this.stopWarping(),t===0?this.paused=!0:this.timeScale=t)}}return this._effectiveTimeScale=t,t}_updateTime(e){const t=this._clip.duration,i=this.loop;let s=this.time+e,r=this._loopCount;const o=i===$y;if(e===0)return r===-1?s:o&&(r&1)===1?t-s:s;if(i===qy){r===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));e:{if(s>=t)s=t;else if(s<0)s=0;else{this.time=s;break e}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=s,this._mixer.dispatchEvent({type:"finished",action:this,direction:e<0?-1:1})}}else{if(r===-1&&(e>=0?(r=0,this._setEndings(!0,this.repetitions===0,o)):this._setEndings(this.repetitions===0,!0,o)),s>=t||s<0){const a=Math.floor(s/t);s-=t*a,r+=Math.abs(a);const l=this.repetitions-r;if(l<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,s=e>0?t:0,this.time=s,this._mixer.dispatchEvent({type:"finished",action:this,direction:e>0?1:-1});else{if(l===1){const c=e<0;this._setEndings(c,!c,o)}else this._setEndings(!1,!1,o);this._loopCount=r,this.time=s,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:a})}}else this.time=s;if(o&&(r&1)===1)return t-s}return s}_setEndings(e,t,i){const s=this._interpolantSettings;i?(s.endingStart=Es,s.endingEnd=Es):(e?s.endingStart=this.zeroSlopeAtStart?Es:Ss:s.endingStart=Fo,t?s.endingEnd=this.zeroSlopeAtEnd?Es:Ss:s.endingEnd=Fo)}_scheduleFading(e,t,i){const s=this._mixer,r=s.time;let o=this._weightInterpolant;o===null&&(o=s._lendControlInterpolant(),this._weightInterpolant=o);const a=o.parameterPositions,l=o.sampleValues;return a[0]=r,l[0]=t,a[1]=r+e,l[1]=i,this}}const LP=new Float32Array(1);class DP extends Ci{constructor(e){super(),this._root=e,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(e,t){const i=e._localRoot||this._root,s=e._clip.tracks,r=s.length,o=e._propertyBindings,a=e._interpolants,l=i.uuid,c=this._bindingsByRootAndName;let h=c[l];h===void 0&&(h={},c[l]=h);for(let u=0;u!==r;++u){const d=s[u],f=d.name;let m=h[f];if(m!==void 0)++m.referenceCount,o[u]=m;else{if(m=o[u],m!==void 0){m._cacheIndex===null&&(++m.referenceCount,this._addInactiveBinding(m,l,f));continue}const y=t&&t._propertyBindings[u].binding.parsedPath;m=new uv(st.create(i,f,y),d.ValueTypeName,d.getValueSize()),++m.referenceCount,this._addInactiveBinding(m,l,f),o[u]=m}a[u].resultBuffer=m.buffer}}_activateAction(e){if(!this._isActiveAction(e)){if(e._cacheIndex===null){const i=(e._localRoot||this._root).uuid,s=e._clip.uuid,r=this._actionsByClip[s];this._bindAction(e,r&&r.knownActions[0]),this._addInactiveAction(e,s,i)}const t=e._propertyBindings;for(let i=0,s=t.length;i!==s;++i){const r=t[i];r.useCount++===0&&(this._lendBinding(r),r.saveOriginalState())}this._lendAction(e)}}_deactivateAction(e){if(this._isActiveAction(e)){const t=e._propertyBindings;for(let i=0,s=t.length;i!==s;++i){const r=t[i];--r.useCount===0&&(r.restoreOriginalState(),this._takeBackBinding(r))}this._takeBackAction(e)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const e=this;this.stats={actions:{get total(){return e._actions.length},get inUse(){return e._nActiveActions}},bindings:{get total(){return e._bindings.length},get inUse(){return e._nActiveBindings}},controlInterpolants:{get total(){return e._controlInterpolants.length},get inUse(){return e._nActiveControlInterpolants}}}}_isActiveAction(e){const t=e._cacheIndex;return t!==null&&t<this._nActiveActions}_addInactiveAction(e,t,i){const s=this._actions,r=this._actionsByClip;let o=r[t];if(o===void 0)o={knownActions:[e],actionByRoot:{}},e._byClipCacheIndex=0,r[t]=o;else{const a=o.knownActions;e._byClipCacheIndex=a.length,a.push(e)}e._cacheIndex=s.length,s.push(e),o.actionByRoot[i]=e}_removeInactiveAction(e){const t=this._actions,i=t[t.length-1],s=e._cacheIndex;i._cacheIndex=s,t[s]=i,t.pop(),e._cacheIndex=null;const r=e._clip.uuid,o=this._actionsByClip,a=o[r],l=a.knownActions,c=l[l.length-1],h=e._byClipCacheIndex;c._byClipCacheIndex=h,l[h]=c,l.pop(),e._byClipCacheIndex=null;const u=a.actionByRoot,d=(e._localRoot||this._root).uuid;delete u[d],l.length===0&&delete o[r],this._removeInactiveBindingsForAction(e)}_removeInactiveBindingsForAction(e){const t=e._propertyBindings;for(let i=0,s=t.length;i!==s;++i){const r=t[i];--r.referenceCount===0&&this._removeInactiveBinding(r)}}_lendAction(e){const t=this._actions,i=e._cacheIndex,s=this._nActiveActions++,r=t[s];e._cacheIndex=s,t[s]=e,r._cacheIndex=i,t[i]=r}_takeBackAction(e){const t=this._actions,i=e._cacheIndex,s=--this._nActiveActions,r=t[s];e._cacheIndex=s,t[s]=e,r._cacheIndex=i,t[i]=r}_addInactiveBinding(e,t,i){const s=this._bindingsByRootAndName,r=this._bindings;let o=s[t];o===void 0&&(o={},s[t]=o),o[i]=e,e._cacheIndex=r.length,r.push(e)}_removeInactiveBinding(e){const t=this._bindings,i=e.binding,s=i.rootNode.uuid,r=i.path,o=this._bindingsByRootAndName,a=o[s],l=t[t.length-1],c=e._cacheIndex;l._cacheIndex=c,t[c]=l,t.pop(),delete a[r],Object.keys(a).length===0&&delete o[s]}_lendBinding(e){const t=this._bindings,i=e._cacheIndex,s=this._nActiveBindings++,r=t[s];e._cacheIndex=s,t[s]=e,r._cacheIndex=i,t[i]=r}_takeBackBinding(e){const t=this._bindings,i=e._cacheIndex,s=--this._nActiveBindings,r=t[s];e._cacheIndex=s,t[s]=e,r._cacheIndex=i,t[i]=r}_lendControlInterpolant(){const e=this._controlInterpolants,t=this._nActiveControlInterpolants++;let i=e[t];return i===void 0&&(i=new Qd(new Float32Array(2),new Float32Array(2),1,LP),i.__cacheIndex=t,e[t]=i),i}_takeBackControlInterpolant(e){const t=this._controlInterpolants,i=e.__cacheIndex,s=--this._nActiveControlInterpolants,r=t[s];e.__cacheIndex=s,t[s]=e,r.__cacheIndex=i,t[i]=r}clipAction(e,t,i){const s=t||this._root,r=s.uuid;let o=typeof e=="string"?jo.findByName(s,e):e;const a=o!==null?o.uuid:e,l=this._actionsByClip[a];let c=null;if(i===void 0&&(o!==null?i=o.blendMode:i=fc),l!==void 0){const u=l.actionByRoot[r];if(u!==void 0&&u.blendMode===i)return u;c=l.knownActions[0],o===null&&(o=c._clip)}if(o===null)return null;const h=new dv(this,o,t,i);return this._bindAction(h,c),this._addInactiveAction(h,a,r),h}existingAction(e,t){const i=t||this._root,s=i.uuid,r=typeof e=="string"?jo.findByName(i,e):e,o=r?r.uuid:e,a=this._actionsByClip[o];return a!==void 0&&a.actionByRoot[s]||null}stopAllAction(){const e=this._actions,t=this._nActiveActions;for(let i=t-1;i>=0;--i)e[i].stop();return this}update(e){e*=this.timeScale;const t=this._actions,i=this._nActiveActions,s=this.time+=e,r=Math.sign(e),o=this._accuIndex^=1;for(let c=0;c!==i;++c)t[c]._update(s,e,r,o);const a=this._bindings,l=this._nActiveBindings;for(let c=0;c!==l;++c)a[c].apply(o);return this}setTime(e){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(e)}getRoot(){return this._root}uncacheClip(e){const t=this._actions,i=e.uuid,s=this._actionsByClip,r=s[i];if(r!==void 0){const o=r.knownActions;for(let a=0,l=o.length;a!==l;++a){const c=o[a];this._deactivateAction(c);const h=c._cacheIndex,u=t[t.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,u._cacheIndex=h,t[h]=u,t.pop(),this._removeInactiveBindingsForAction(c)}delete s[i]}}uncacheRoot(e){const t=e.uuid,i=this._actionsByClip;for(const o in i){const a=i[o].actionByRoot,l=a[t];l!==void 0&&(this._deactivateAction(l),this._removeInactiveAction(l))}const s=this._bindingsByRootAndName,r=s[t];if(r!==void 0)for(const o in r){const a=r[o];a.restoreOriginalState(),this._removeInactiveBinding(a)}}uncacheAction(e,t){const i=this.existingAction(e,t);i!==null&&(this._deactivateAction(i),this._removeInactiveAction(i))}}class lf{constructor(e){this.value=e}clone(){return new lf(this.value.clone===void 0?this.value:this.value.clone())}}let UP=0;class NP extends Ci{constructor(){super(),this.isUniformsGroup=!0,Object.defineProperty(this,"id",{value:UP++}),this.name="",this.usage=Vo,this.uniforms=[]}add(e){return this.uniforms.push(e),this}remove(e){const t=this.uniforms.indexOf(e);return t!==-1&&this.uniforms.splice(t,1),this}setName(e){return this.name=e,this}setUsage(e){return this.usage=e,this}dispose(){return this.dispatchEvent({type:"dispose"}),this}copy(e){this.name=e.name,this.usage=e.usage;const t=e.uniforms;this.uniforms.length=0;for(let i=0,s=t.length;i<s;i++){const r=Array.isArray(t[i])?t[i]:[t[i]];for(let o=0;o<r.length;o++)this.uniforms.push(r[o].clone())}return this}clone(){return new this.constructor().copy(this)}}class OP extends xc{constructor(e,t,i=1){super(e,t),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=i}copy(e){return super.copy(e),this.meshPerAttribute=e.meshPerAttribute,this}clone(e){const t=super.clone(e);return t.meshPerAttribute=this.meshPerAttribute,t}toJSON(e){const t=super.toJSON(e);return t.isInstancedInterleavedBuffer=!0,t.meshPerAttribute=this.meshPerAttribute,t}}class FP{constructor(e,t,i,s,r){this.isGLBufferAttribute=!0,this.name="",this.buffer=e,this.type=t,this.itemSize=i,this.elementSize=s,this.count=r,this.version=0}set needsUpdate(e){e===!0&&this.version++}setBuffer(e){return this.buffer=e,this}setType(e,t){return this.type=e,this.elementSize=t,this}setItemSize(e){return this.itemSize=e,this}setCount(e){return this.count=e,this}}class fv{constructor(e,t,i=0,s=1/0){this.ray=new Wr(e,t),this.near=i,this.far=s,this.camera=null,this.layers=new gc,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(e,t){this.ray.set(e,t)}setFromCamera(e,t){t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(e.x,e.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t.isOrthographicCamera?(this.ray.origin.set(e.x,e.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type: "+t.type)}intersectObject(e,t=!0,i=[]){return Wu(e,this,i,t),i.sort(Om),i}intersectObjects(e,t=!0,i=[]){for(let s=0,r=e.length;s<r;s++)Wu(e[s],this,i,t);return i.sort(Om),i}}function Om(n,e){return n.distance-e.distance}function Wu(n,e,t,i){if(n.layers.test(e.layers)&&n.raycast(e,t),i===!0){const s=n.children;for(let r=0,o=s.length;r<o;r++)Wu(s[r],e,t,!0)}}class kP{constructor(e=1,t=0,i=0){return this.radius=e,this.phi=t,this.theta=i,this}set(e,t,i){return this.radius=e,this.phi=t,this.theta=i,this}copy(e){return this.radius=e.radius,this.phi=e.phi,this.theta=e.theta,this}makeSafe(){return this.phi=Math.max(1e-6,Math.min(Math.PI-1e-6,this.phi)),this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,i){return this.radius=Math.sqrt(e*e+t*t+i*i),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(e,i),this.phi=Math.acos(Pt(t/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}class BP{constructor(e=1,t=0,i=0){return this.radius=e,this.theta=t,this.y=i,this}set(e,t,i){return this.radius=e,this.theta=t,this.y=i,this}copy(e){return this.radius=e.radius,this.theta=e.theta,this.y=e.y,this}setFromVector3(e){return this.setFromCartesianCoords(e.x,e.y,e.z)}setFromCartesianCoords(e,t,i){return this.radius=Math.sqrt(e*e+i*i),this.theta=Math.atan2(e,i),this.y=t,this}clone(){return new this.constructor().copy(this)}}const Fm=new ue;class zP{constructor(e=new ue(1/0,1/0),t=new ue(-1/0,-1/0)){this.isBox2=!0,this.min=e,this.max=t}set(e,t){return this.min.copy(e),this.max.copy(t),this}setFromPoints(e){this.makeEmpty();for(let t=0,i=e.length;t<i;t++)this.expandByPoint(e[t]);return this}setFromCenterAndSize(e,t){const i=Fm.copy(t).multiplyScalar(.5);return this.min.copy(e).sub(i),this.max.copy(e).add(i),this}clone(){return new this.constructor().copy(this)}copy(e){return this.min.copy(e.min),this.max.copy(e.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(e){return this.isEmpty()?e.set(0,0):e.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(e){return this.isEmpty()?e.set(0,0):e.subVectors(this.max,this.min)}expandByPoint(e){return this.min.min(e),this.max.max(e),this}expandByVector(e){return this.min.sub(e),this.max.add(e),this}expandByScalar(e){return this.min.addScalar(-e),this.max.addScalar(e),this}containsPoint(e){return!(e.x<this.min.x||e.x>this.max.x||e.y<this.min.y||e.y>this.max.y)}containsBox(e){return this.min.x<=e.min.x&&e.max.x<=this.max.x&&this.min.y<=e.min.y&&e.max.y<=this.max.y}getParameter(e,t){return t.set((e.x-this.min.x)/(this.max.x-this.min.x),(e.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(e){return!(e.max.x<this.min.x||e.min.x>this.max.x||e.max.y<this.min.y||e.min.y>this.max.y)}clampPoint(e,t){return t.copy(e).clamp(this.min,this.max)}distanceToPoint(e){return this.clampPoint(e,Fm).distanceTo(e)}intersect(e){return this.min.max(e.min),this.max.min(e.max),this.isEmpty()&&this.makeEmpty(),this}union(e){return this.min.min(e.min),this.max.max(e.max),this}translate(e){return this.min.add(e),this.max.add(e),this}equals(e){return e.min.equals(this.min)&&e.max.equals(this.max)}}const km=new I,cl=new I;class VP{constructor(e=new I,t=new I){this.start=e,this.end=t}set(e,t){return this.start.copy(e),this.end.copy(t),this}copy(e){return this.start.copy(e.start),this.end.copy(e.end),this}getCenter(e){return e.addVectors(this.start,this.end).multiplyScalar(.5)}delta(e){return e.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(e,t){return this.delta(t).multiplyScalar(e).add(this.start)}closestPointToPointParameter(e,t){km.subVectors(e,this.start),cl.subVectors(this.end,this.start);const i=cl.dot(cl);let r=cl.dot(km)/i;return t&&(r=Pt(r,0,1)),r}closestPointToPoint(e,t,i){const s=this.closestPointToPointParameter(e,t);return this.delta(i).multiplyScalar(s).add(this.start)}applyMatrix4(e){return this.start.applyMatrix4(e),this.end.applyMatrix4(e),this}equals(e){return e.start.equals(this.start)&&e.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}const Bm=new I;class HP extends lt{constructor(e,t){super(),this.light=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=t,this.type="SpotLightHelper";const i=new Je,s=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let o=0,a=1,l=32;o<l;o++,a++){const c=o/l*Math.PI*2,h=a/l*Math.PI*2;s.push(Math.cos(c),Math.sin(c),1,Math.cos(h),Math.sin(h),1)}i.setAttribute("position",new Pe(s,3));const r=new pn({fog:!1,toneMapped:!1});this.cone=new ai(i,r),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1);const e=this.light.distance?this.light.distance:1e3,t=e*Math.tan(this.light.angle);this.cone.scale.set(t,t,e),Bm.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(Bm),this.color!==void 0?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const ki=new I,hl=new Oe,Nh=new Oe;class GP extends ai{constructor(e){const t=pv(e),i=new Je,s=[],r=[],o=new Te(0,0,1),a=new Te(0,1,0);for(let c=0;c<t.length;c++){const h=t[c];h.parent&&h.parent.isBone&&(s.push(0,0,0),s.push(0,0,0),r.push(o.r,o.g,o.b),r.push(a.r,a.g,a.b))}i.setAttribute("position",new Pe(s,3)),i.setAttribute("color",new Pe(r,3));const l=new pn({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(i,l),this.isSkeletonHelper=!0,this.type="SkeletonHelper",this.root=e,this.bones=t,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(e){const t=this.bones,i=this.geometry,s=i.getAttribute("position");Nh.copy(this.root.matrixWorld).invert();for(let r=0,o=0;r<t.length;r++){const a=t[r];a.parent&&a.parent.isBone&&(hl.multiplyMatrices(Nh,a.matrixWorld),ki.setFromMatrixPosition(hl),s.setXYZ(o,ki.x,ki.y,ki.z),hl.multiplyMatrices(Nh,a.parent.matrixWorld),ki.setFromMatrixPosition(hl),s.setXYZ(o+1,ki.x,ki.y,ki.z),o+=2)}i.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(e)}dispose(){this.geometry.dispose(),this.material.dispose()}}function pv(n){const e=[];n.isBone===!0&&e.push(n);for(let t=0;t<n.children.length;t++)e.push.apply(e,pv(n.children[t]));return e}class WP extends zt{constructor(e,t,i){const s=new fa(t,4,2),r=new is({wireframe:!0,fog:!1,toneMapped:!1});super(s,r),this.light=e,this.color=i,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.color!==void 0?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const qP=new I,zm=new Te,Vm=new Te;class XP extends lt{constructor(e,t,i){super(),this.light=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=i,this.type="HemisphereLightHelper";const s=new da(t);s.rotateY(Math.PI*.5),this.material=new is({wireframe:!0,fog:!1,toneMapped:!1}),this.color===void 0&&(this.material.vertexColors=!0);const r=s.getAttribute("position"),o=new Float32Array(r.count*3);s.setAttribute("color",new ct(o,3)),this.add(new zt(s,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const e=this.children[0];if(this.color!==void 0)this.material.color.set(this.color);else{const t=e.geometry.getAttribute("color");zm.copy(this.light.color),Vm.copy(this.light.groundColor);for(let i=0,s=t.count;i<s;i++){const r=i<s/2?zm:Vm;t.setXYZ(i,r.r,r.g,r.b)}t.needsUpdate=!0}this.light.updateWorldMatrix(!0,!1),e.lookAt(qP.setFromMatrixPosition(this.light.matrixWorld).negate())}}class $P extends ai{constructor(e=10,t=10,i=4473924,s=8947848){i=new Te(i),s=new Te(s);const r=t/2,o=e/t,a=e/2,l=[],c=[];for(let d=0,f=0,m=-a;d<=t;d++,m+=o){l.push(-a,0,m,a,0,m),l.push(m,0,-a,m,0,a);const y=d===r?i:s;y.toArray(c,f),f+=3,y.toArray(c,f),f+=3,y.toArray(c,f),f+=3,y.toArray(c,f),f+=3}const h=new Je;h.setAttribute("position",new Pe(l,3)),h.setAttribute("color",new Pe(c,3));const u=new pn({vertexColors:!0,toneMapped:!1});super(h,u),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}class YP extends ai{constructor(e=10,t=16,i=8,s=64,r=4473924,o=8947848){r=new Te(r),o=new Te(o);const a=[],l=[];if(t>1)for(let u=0;u<t;u++){const d=u/t*(Math.PI*2),f=Math.sin(d)*e,m=Math.cos(d)*e;a.push(0,0,0),a.push(f,0,m);const y=u&1?r:o;l.push(y.r,y.g,y.b),l.push(y.r,y.g,y.b)}for(let u=0;u<i;u++){const d=u&1?r:o,f=e-e/i*u;for(let m=0;m<s;m++){let y=m/s*(Math.PI*2),g=Math.sin(y)*f,p=Math.cos(y)*f;a.push(g,0,p),l.push(d.r,d.g,d.b),y=(m+1)/s*(Math.PI*2),g=Math.sin(y)*f,p=Math.cos(y)*f,a.push(g,0,p),l.push(d.r,d.g,d.b)}}const c=new Je;c.setAttribute("position",new Pe(a,3)),c.setAttribute("color",new Pe(l,3));const h=new pn({vertexColors:!0,toneMapped:!1});super(c,h),this.type="PolarGridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}const Hm=new I,ul=new I,Gm=new I;class jP extends lt{constructor(e,t,i){super(),this.light=e,this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.color=i,this.type="DirectionalLightHelper",t===void 0&&(t=1);let s=new Je;s.setAttribute("position",new Pe([-t,t,0,t,t,0,t,-t,0,-t,-t,0,-t,t,0],3));const r=new pn({fog:!1,toneMapped:!1});this.lightPlane=new Qi(s,r),this.add(this.lightPlane),s=new Je,s.setAttribute("position",new Pe([0,0,0,0,0,1],3)),this.targetLine=new Qi(s,r),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),Hm.setFromMatrixPosition(this.light.matrixWorld),ul.setFromMatrixPosition(this.light.target.matrixWorld),Gm.subVectors(ul,Hm),this.lightPlane.lookAt(ul),this.color!==void 0?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(ul),this.targetLine.scale.z=Gm.length()}}const dl=new I,At=new oa;class ZP extends ai{constructor(e){const t=new Je,i=new pn({color:16777215,vertexColors:!0,toneMapped:!1}),s=[],r=[],o={};a("n1","n2"),a("n2","n4"),a("n4","n3"),a("n3","n1"),a("f1","f2"),a("f2","f4"),a("f4","f3"),a("f3","f1"),a("n1","f1"),a("n2","f2"),a("n3","f3"),a("n4","f4"),a("p","n1"),a("p","n2"),a("p","n3"),a("p","n4"),a("u1","u2"),a("u2","u3"),a("u3","u1"),a("c","t"),a("p","c"),a("cn1","cn2"),a("cn3","cn4"),a("cf1","cf2"),a("cf3","cf4");function a(m,y){l(m),l(y)}function l(m){s.push(0,0,0),r.push(0,0,0),o[m]===void 0&&(o[m]=[]),o[m].push(s.length/3-1)}t.setAttribute("position",new Pe(s,3)),t.setAttribute("color",new Pe(r,3)),super(t,i),this.type="CameraHelper",this.camera=e,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=e.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=o,this.update();const c=new Te(16755200),h=new Te(16711680),u=new Te(43775),d=new Te(16777215),f=new Te(3355443);this.setColors(c,h,u,d,f)}setColors(e,t,i,s,r){const a=this.geometry.getAttribute("color");a.setXYZ(0,e.r,e.g,e.b),a.setXYZ(1,e.r,e.g,e.b),a.setXYZ(2,e.r,e.g,e.b),a.setXYZ(3,e.r,e.g,e.b),a.setXYZ(4,e.r,e.g,e.b),a.setXYZ(5,e.r,e.g,e.b),a.setXYZ(6,e.r,e.g,e.b),a.setXYZ(7,e.r,e.g,e.b),a.setXYZ(8,e.r,e.g,e.b),a.setXYZ(9,e.r,e.g,e.b),a.setXYZ(10,e.r,e.g,e.b),a.setXYZ(11,e.r,e.g,e.b),a.setXYZ(12,e.r,e.g,e.b),a.setXYZ(13,e.r,e.g,e.b),a.setXYZ(14,e.r,e.g,e.b),a.setXYZ(15,e.r,e.g,e.b),a.setXYZ(16,e.r,e.g,e.b),a.setXYZ(17,e.r,e.g,e.b),a.setXYZ(18,e.r,e.g,e.b),a.setXYZ(19,e.r,e.g,e.b),a.setXYZ(20,e.r,e.g,e.b),a.setXYZ(21,e.r,e.g,e.b),a.setXYZ(22,e.r,e.g,e.b),a.setXYZ(23,e.r,e.g,e.b),a.setXYZ(24,t.r,t.g,t.b),a.setXYZ(25,t.r,t.g,t.b),a.setXYZ(26,t.r,t.g,t.b),a.setXYZ(27,t.r,t.g,t.b),a.setXYZ(28,t.r,t.g,t.b),a.setXYZ(29,t.r,t.g,t.b),a.setXYZ(30,t.r,t.g,t.b),a.setXYZ(31,t.r,t.g,t.b),a.setXYZ(32,i.r,i.g,i.b),a.setXYZ(33,i.r,i.g,i.b),a.setXYZ(34,i.r,i.g,i.b),a.setXYZ(35,i.r,i.g,i.b),a.setXYZ(36,i.r,i.g,i.b),a.setXYZ(37,i.r,i.g,i.b),a.setXYZ(38,s.r,s.g,s.b),a.setXYZ(39,s.r,s.g,s.b),a.setXYZ(40,r.r,r.g,r.b),a.setXYZ(41,r.r,r.g,r.b),a.setXYZ(42,r.r,r.g,r.b),a.setXYZ(43,r.r,r.g,r.b),a.setXYZ(44,r.r,r.g,r.b),a.setXYZ(45,r.r,r.g,r.b),a.setXYZ(46,r.r,r.g,r.b),a.setXYZ(47,r.r,r.g,r.b),a.setXYZ(48,r.r,r.g,r.b),a.setXYZ(49,r.r,r.g,r.b),a.needsUpdate=!0}update(){const e=this.geometry,t=this.pointMap,i=1,s=1;At.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),Lt("c",t,e,At,0,0,-1),Lt("t",t,e,At,0,0,1),Lt("n1",t,e,At,-i,-s,-1),Lt("n2",t,e,At,i,-s,-1),Lt("n3",t,e,At,-i,s,-1),Lt("n4",t,e,At,i,s,-1),Lt("f1",t,e,At,-i,-s,1),Lt("f2",t,e,At,i,-s,1),Lt("f3",t,e,At,-i,s,1),Lt("f4",t,e,At,i,s,1),Lt("u1",t,e,At,i*.7,s*1.1,-1),Lt("u2",t,e,At,-i*.7,s*1.1,-1),Lt("u3",t,e,At,0,s*2,-1),Lt("cf1",t,e,At,-i,0,1),Lt("cf2",t,e,At,i,0,1),Lt("cf3",t,e,At,0,-s,1),Lt("cf4",t,e,At,0,s,1),Lt("cn1",t,e,At,-i,0,-1),Lt("cn2",t,e,At,i,0,-1),Lt("cn3",t,e,At,0,-s,-1),Lt("cn4",t,e,At,0,s,-1),e.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function Lt(n,e,t,i,s,r,o){dl.set(s,r,o).unproject(i);const a=e[n];if(a!==void 0){const l=t.getAttribute("position");for(let c=0,h=a.length;c<h;c++)l.setXYZ(a[c],dl.x,dl.y,dl.z)}}const fl=new fn;class KP extends ai{constructor(e,t=16776960){const i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),s=new Float32Array(8*3),r=new Je;r.setIndex(new ct(i,1)),r.setAttribute("position",new ct(s,3)),super(r,new pn({color:t,toneMapped:!1})),this.object=e,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(e){if(e!==void 0&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),this.object!==void 0&&fl.setFromObject(this.object),fl.isEmpty())return;const t=fl.min,i=fl.max,s=this.geometry.attributes.position,r=s.array;r[0]=i.x,r[1]=i.y,r[2]=i.z,r[3]=t.x,r[4]=i.y,r[5]=i.z,r[6]=t.x,r[7]=t.y,r[8]=i.z,r[9]=i.x,r[10]=t.y,r[11]=i.z,r[12]=i.x,r[13]=i.y,r[14]=t.z,r[15]=t.x,r[16]=i.y,r[17]=t.z,r[18]=t.x,r[19]=t.y,r[20]=t.z,r[21]=i.x,r[22]=t.y,r[23]=t.z,s.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(e){return this.object=e,this.update(),this}copy(e,t){return super.copy(e,t),this.object=e.object,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class JP extends ai{constructor(e,t=16776960){const i=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),s=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],r=new Je;r.setIndex(new ct(i,1)),r.setAttribute("position",new Pe(s,3)),super(r,new pn({color:t,toneMapped:!1})),this.box=e,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(e){const t=this.box;t.isEmpty()||(t.getCenter(this.position),t.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(e))}dispose(){this.geometry.dispose(),this.material.dispose()}}class QP extends Qi{constructor(e,t=1,i=16776960){const s=i,r=[1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],o=new Je;o.setAttribute("position",new Pe(r,3)),o.computeBoundingSphere(),super(o,new pn({color:s,toneMapped:!1})),this.type="PlaneHelper",this.plane=e,this.size=t;const a=[1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],l=new Je;l.setAttribute("position",new Pe(a,3)),l.computeBoundingSphere(),this.add(new zt(l,new is({color:s,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(e){this.position.set(0,0,0),this.scale.set(.5*this.size,.5*this.size,1),this.lookAt(this.plane.normal),this.translateZ(-this.plane.constant),super.updateMatrixWorld(e)}dispose(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()}}const Wm=new I;let pl,Oh;class eI extends lt{constructor(e=new I(0,0,1),t=new I(0,0,0),i=1,s=16776960,r=i*.2,o=r*.2){super(),this.type="ArrowHelper",pl===void 0&&(pl=new Je,pl.setAttribute("position",new Pe([0,0,0,0,1,0],3)),Oh=new Xr(0,.5,1,5,1),Oh.translate(0,-.5,0)),this.position.copy(t),this.line=new Qi(pl,new pn({color:s,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new zt(Oh,new is({color:s,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(e),this.setLength(i,r,o)}setDirection(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{Wm.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(Wm,t)}}setLength(e,t=e*.2,i=t*.2){this.line.scale.set(1,Math.max(1e-4,e-t),1),this.line.updateMatrix(),this.cone.scale.set(i,t,i),this.cone.position.y=e,this.cone.updateMatrix()}setColor(e){this.line.material.color.set(e),this.cone.material.color.set(e)}copy(e){return super.copy(e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class tI extends ai{constructor(e=1){const t=[0,0,0,e,0,0,0,0,0,0,e,0,0,0,0,0,0,e],i=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],s=new Je;s.setAttribute("position",new Pe(t,3)),s.setAttribute("color",new Pe(i,3));const r=new pn({vertexColors:!0,toneMapped:!1});super(s,r),this.type="AxesHelper"}setColors(e,t,i){const s=new Te,r=this.geometry.attributes.color.array;return s.set(e),s.toArray(r,0),s.toArray(r,3),s.set(t),s.toArray(r,6),s.toArray(r,9),s.set(i),s.toArray(r,12),s.toArray(r,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class nI{constructor(){this.type="ShapePath",this.color=new Te,this.subPaths=[],this.currentPath=null}moveTo(e,t){return this.currentPath=new Go,this.subPaths.push(this.currentPath),this.currentPath.moveTo(e,t),this}lineTo(e,t){return this.currentPath.lineTo(e,t),this}quadraticCurveTo(e,t,i,s){return this.currentPath.quadraticCurveTo(e,t,i,s),this}bezierCurveTo(e,t,i,s,r,o){return this.currentPath.bezierCurveTo(e,t,i,s,r,o),this}splineThru(e){return this.currentPath.splineThru(e),this}toShapes(e){function t(p){const v=[];for(let _=0,x=p.length;_<x;_++){const P=p[_],M=new ks;M.curves=P.curves,v.push(M)}return v}function i(p,v){const _=v.length;let x=!1;for(let P=_-1,M=0;M<_;P=M++){let A=v[P],O=v[M],S=O.x-A.x,C=O.y-A.y;if(Math.abs(C)>Number.EPSILON){if(C<0&&(A=v[M],S=-S,O=v[P],C=-C),p.y<A.y||p.y>O.y)continue;if(p.y===A.y){if(p.x===A.x)return!0}else{const G=C*(p.x-A.x)-S*(p.y-A.y);if(G===0)return!0;if(G<0)continue;x=!x}}else{if(p.y!==A.y)continue;if(O.x<=p.x&&p.x<=A.x||A.x<=p.x&&p.x<=O.x)return!0}}return x}const s=ii.isClockWise,r=this.subPaths;if(r.length===0)return[];let o,a,l;const c=[];if(r.length===1)return a=r[0],l=new ks,l.curves=a.curves,c.push(l),c;let h=!s(r[0].getPoints());h=e?!h:h;const u=[],d=[];let f=[],m=0,y;d[m]=void 0,f[m]=[];for(let p=0,v=r.length;p<v;p++)a=r[p],y=a.getPoints(),o=s(y),o=e?!o:o,o?(!h&&d[m]&&m++,d[m]={s:new ks,p:y},d[m].s.curves=a.curves,h&&m++,f[m]=[]):f[m].push({h:a,p:y[0]});if(!d[0])return t(r);if(d.length>1){let p=!1,v=0;for(let _=0,x=d.length;_<x;_++)u[_]=[];for(let _=0,x=d.length;_<x;_++){const P=f[_];for(let M=0;M<P.length;M++){const A=P[M];let O=!0;for(let S=0;S<d.length;S++)i(A.p,d[S].p)&&(_!==S&&v++,O?(O=!1,u[S].push(A)):p=!0);O&&u[_].push(A)}}v>0&&p===!1&&(f=u)}let g;for(let p=0,v=d.length;p<v;p++){l=d[p].s,c.push(l),g=f[p];for(let _=0,x=g.length;_<x;_++)l.holes.push(g[_].h)}return c}}typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:na}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=na);const iI=Object.freeze(Object.defineProperty({__proto__:null,ACESFilmicToneMapping:xd,AddEquation:Wi,AddOperation:Py,AdditiveAnimationBlendMode:Rd,AdditiveBlending:iu,AgXToneMapping:Ny,AlphaFormat:By,AlwaysCompare:i_,AlwaysDepth:My,AlwaysStencilFunc:Uu,AmbientLight:sv,AnimationAction:dv,AnimationClip:jo,AnimationLoader:sP,AnimationMixer:DP,AnimationObjectGroup:IP,AnimationUtils:eP,ArcCurve:R_,ArrayCamera:v_,ArrowHelper:eI,AttachedBindMode:lu,Audio:hv,AudioAnalyser:bP,AudioContext:sf,AudioListener:_P,AudioLoader:mP,AxesHelper:tI,BackSide:dn,BasicDepthPacking:Yy,BasicShadowMap:uS,BatchedMesh:T_,Bone:Gd,BooleanKeyframeTrack:$s,Box2:zP,Box3:fn,Box3Helper:JP,BoxGeometry:Xs,BoxHelper:KP,BufferAttribute:ct,BufferGeometry:Je,BufferGeometryLoader:cv,ByteType:Fy,Cache:_i,Camera:oa,CameraHelper:ZP,CanvasTexture:SR,CapsuleGeometry:Sc,CatmullRomCurve3:P_,CineonToneMapping:Dy,CircleGeometry:Ec,ClampToEdgeWrapping:nn,Clock:rf,Color:Te,ColorKeyframeTrack:ef,ColorManagement:ut,CompressedArrayTexture:wR,CompressedCubeTexture:MR,CompressedTexture:wc,CompressedTextureLoader:rP,ConeGeometry:Tc,ConstantAlphaFactor:xy,ConstantColorFactor:_y,CubeCamera:h_,CubeReflectionMapping:Si,CubeRefractionMapping:Ki,CubeTexture:aa,CubeTextureLoader:oP,CubeUVReflectionMapping:Gr,CubicBezierCurve:Xd,CubicBezierCurve3:I_,CubicInterpolant:Z_,CullFaceBack:nu,CullFaceFront:ry,CullFaceFrontBack:hS,CullFaceNone:sy,Curve:Yn,CurvePath:D_,CustomBlending:oy,CustomToneMapping:Uy,CylinderGeometry:Xr,Cylindrical:BP,Data3DTexture:Ud,DataArrayTexture:mc,DataTexture:Fs,DataTextureLoader:aP,DataUtils:bE,DecrementStencilOp:MS,DecrementWrapStencilOp:ES,DefaultLoadingManager:Q_,DepthFormat:Yi,DepthStencilFormat:zs,DepthTexture:kd,DetachedBindMode:Oy,DirectionalLight:iv,DirectionalLightHelper:jP,DiscreteInterpolant:K_,DisplayP3ColorSpace:pc,DodecahedronGeometry:Ac,DoubleSide:ti,DstAlphaFactor:fy,DstColorFactor:my,DynamicCopyUsage:zS,DynamicDrawUsage:US,DynamicReadUsage:FS,EdgesGeometry:U_,EllipseCurve:Mc,EqualCompare:Qy,EqualDepth:Ey,EqualStencilFunc:RS,EquirectangularReflectionMapping:Io,EquirectangularRefractionMapping:Lo,Euler:ra,EventDispatcher:Ci,ExtrudeGeometry:Rc,FileLoader:Ei,Float16BufferAttribute:AE,Float32BufferAttribute:Pe,Float64BufferAttribute:CE,FloatType:Vn,Fog:vc,FogExp2:_c,FramebufferTexture:bR,FrontSide:Mi,Frustum:la,GLBufferAttribute:FP,GLSL1:HS,GLSL3:Nu,GreaterCompare:e_,GreaterDepth:Ay,GreaterEqualCompare:n_,GreaterEqualDepth:Ty,GreaterEqualStencilFunc:DS,GreaterStencilFunc:IS,GridHelper:$P,Group:br,HalfFloatType:Ur,HemisphereLight:ev,HemisphereLightHelper:XP,IcosahedronGeometry:Pc,ImageBitmapLoader:pP,ImageLoader:Zo,ImageUtils:Dd,IncrementStencilOp:wS,IncrementWrapStencilOp:SS,InstancedBufferAttribute:kr,InstancedBufferGeometry:lv,InstancedInterleavedBuffer:OP,InstancedMesh:E_,Int16BufferAttribute:EE,Int32BufferAttribute:TE,Int8BufferAttribute:wE,IntType:wd,InterleavedBuffer:xc,InterleavedBufferAttribute:Vs,Interpolant:pa,InterpolateDiscrete:No,InterpolateLinear:Oo,InterpolateSmooth:El,InvertStencilOp:TS,KeepStencilOp:xs,KeyframeTrack:jn,LOD:M_,LatheGeometry:ua,Layers:gc,LessCompare:Jy,LessDepth:Sy,LessEqualCompare:Id,LessEqualDepth:Po,LessEqualStencilFunc:PS,LessStencilFunc:CS,Light:rs,LightProbe:av,Line:Qi,Line3:VP,LineBasicMaterial:pn,LineCurve:$d,LineCurve3:L_,LineDashedMaterial:$_,LineLoop:A_,LineSegments:ai,LinearDisplayP3ColorSpace:sa,LinearEncoding:Pd,LinearFilter:Ut,LinearInterpolant:Qd,LinearMipMapLinearFilter:gS,LinearMipMapNearestFilter:mS,LinearMipmapLinearFilter:Ji,LinearMipmapNearestFilter:bd,LinearSRGBColorSpace:ri,LinearToneMapping:Iy,LinearTransfer:ko,Loader:Mn,LoaderUtils:Gu,LoadingManager:tf,LoopOnce:qy,LoopPingPong:$y,LoopRepeat:Xy,LuminanceAlphaFormat:Vy,LuminanceFormat:zy,MOUSE:lS,Material:on,MaterialLoader:Fc,MathUtils:iE,Matrix3:Ke,Matrix4:Oe,MaxEquation:au,Mesh:zt,MeshBasicMaterial:is,MeshDepthMaterial:Bd,MeshDistanceMaterial:zd,MeshLambertMaterial:q_,MeshMatcapMaterial:X_,MeshNormalMaterial:W_,MeshPhongMaterial:H_,MeshPhysicalMaterial:V_,MeshStandardMaterial:Kd,MeshToonMaterial:G_,MinEquation:ou,MirroredRepeatWrapping:Uo,MixOperation:Ry,MultiplyBlending:ru,MultiplyOperation:ia,NearestFilter:Dt,NearestMipMapLinearFilter:pS,NearestMipMapNearestFilter:fS,NearestMipmapLinearFilter:yo,NearestMipmapNearestFilter:Vl,NeverCompare:Ky,NeverDepth:wy,NeverStencilFunc:AS,NoBlending:xi,NoColorSpace:Cn,NoToneMapping:bi,NormalAnimationBlendMode:fc,NormalBlending:Ns,NotEqualCompare:t_,NotEqualDepth:Cy,NotEqualStencilFunc:LS,NumberKeyframeTrack:$o,Object3D:lt,ObjectLoader:dP,ObjectSpaceNormalMap:Zy,OctahedronGeometry:da,OneFactor:hy,OneMinusConstantAlphaFactor:by,OneMinusConstantColorFactor:vy,OneMinusDstAlphaFactor:py,OneMinusDstColorFactor:gy,OneMinusSrcAlphaFactor:zl,OneMinusSrcColorFactor:dy,OrthographicCamera:ha,P3Primaries:zo,PCFShadowMap:_d,PCFSoftShadowMap:vd,PMREMGenerator:Fu,Path:Go,PerspectiveCamera:kt,Plane:Gi,PlaneGeometry:ca,PlaneHelper:QP,PointLight:nv,PointLightHelper:WP,Points:C_,PointsMaterial:Wd,PolarGridHelper:YP,PolyhedronGeometry:ss,PositionalAudio:xP,PropertyBinding:st,PropertyMixer:uv,QuadraticBezierCurve:Yd,QuadraticBezierCurve3:jd,Quaternion:bn,QuaternionKeyframeTrack:$r,QuaternionLinearInterpolant:J_,RED_GREEN_RGTC2_Format:Lu,RED_RGTC1_Format:Wy,REVISION:na,RGBADepthPacking:jy,RGBAFormat:vn,RGBAIntegerFormat:Ad,RGBA_ASTC_10x10_Format:Tu,RGBA_ASTC_10x5_Format:Mu,RGBA_ASTC_10x6_Format:Su,RGBA_ASTC_10x8_Format:Eu,RGBA_ASTC_12x10_Format:Au,RGBA_ASTC_12x12_Format:Cu,RGBA_ASTC_4x4_Format:mu,RGBA_ASTC_5x4_Format:gu,RGBA_ASTC_5x5_Format:yu,RGBA_ASTC_6x5_Format:_u,RGBA_ASTC_6x6_Format:vu,RGBA_ASTC_8x5_Format:xu,RGBA_ASTC_8x6_Format:bu,RGBA_ASTC_8x8_Format:wu,RGBA_BPTC_Format:Sl,RGBA_ETC2_EAC_Format:pu,RGBA_PVRTC_2BPPV1_Format:du,RGBA_PVRTC_4BPPV1_Format:uu,RGBA_S3TC_DXT1_Format:bl,RGBA_S3TC_DXT3_Format:wl,RGBA_S3TC_DXT5_Format:Ml,RGB_BPTC_SIGNED_Format:Ru,RGB_BPTC_UNSIGNED_Format:Pu,RGB_ETC1_Format:Cd,RGB_ETC2_Format:fu,RGB_PVRTC_2BPPV1_Format:hu,RGB_PVRTC_4BPPV1_Format:cu,RGB_S3TC_DXT1_Format:xl,RGFormat:Gy,RGIntegerFormat:Td,RawShaderMaterial:z_,Ray:Wr,Raycaster:fv,Rec709Primaries:Bo,RectAreaLight:rv,RedFormat:Hy,RedIntegerFormat:Ed,ReinhardToneMapping:Ly,RenderTarget:o_,RepeatWrapping:Do,ReplaceStencilOp:bS,ReverseSubtractEquation:ly,RingGeometry:Ic,SIGNED_RED_GREEN_RGTC2_Format:Du,SIGNED_RED_RGTC1_Format:Iu,SRGBColorSpace:Ft,SRGBTransfer:yt,Scene:Vd,ShaderChunk:$e,ShaderLib:Bn,ShaderMaterial:oi,ShadowMaterial:B_,Shape:ks,ShapeGeometry:Lc,ShapePath:nI,ShapeUtils:ii,ShortType:ky,Skeleton:bc,SkeletonHelper:GP,SkinnedMesh:S_,Source:Ts,Sphere:rn,SphereGeometry:fa,Spherical:kP,SphericalHarmonics3:ov,SplineCurve:Zd,SpotLight:tv,SpotLightHelper:HP,Sprite:w_,SpriteMaterial:Hd,SrcAlphaFactor:Bl,SrcAlphaSaturateFactor:yy,SrcColorFactor:uy,StaticCopyUsage:BS,StaticDrawUsage:Vo,StaticReadUsage:OS,StereoCamera:gP,StreamCopyUsage:VS,StreamDrawUsage:NS,StreamReadUsage:kS,StringKeyframeTrack:Ys,SubtractEquation:ay,SubtractiveBlending:su,TOUCH:cS,TangentSpaceNormalMap:ns,TetrahedronGeometry:Dc,Texture:Nt,TextureLoader:lP,TorusGeometry:Uc,TorusKnotGeometry:Nc,Triangle:_n,TriangleFanDrawMode:vS,TriangleStripDrawMode:_S,TrianglesDrawMode:yS,TubeGeometry:Oc,TwoPassDoubleSide:dS,UVMapping:uc,Uint16BufferAttribute:Nd,Uint32BufferAttribute:Od,Uint8BufferAttribute:ME,Uint8ClampedBufferAttribute:SE,Uniform:lf,UniformsGroup:NP,UniformsLib:_e,UniformsUtils:c_,UnsignedByteType:wi,UnsignedInt248Type:$i,UnsignedIntType:yi,UnsignedShort4444Type:Md,UnsignedShort5551Type:Sd,UnsignedShortType:dc,VSMShadowMap:Jn,Vector2:ue,Vector3:I,Vector4:dt,VectorKeyframeTrack:Yo,VideoTexture:xR,WebGL1Renderer:x_,WebGL3DRenderTarget:cE,WebGLArrayRenderTarget:lE,WebGLCoordinateSystem:Hn,WebGLCubeRenderTarget:u_,WebGLMultipleRenderTargets:hE,WebGLRenderTarget:$n,WebGLRenderer:xo,WebGLUtils:__,WebGPUCoordinateSystem:Nr,WireframeGeometry:k_,WrapAroundEnding:Fo,ZeroCurvatureEnding:Ss,ZeroFactor:cy,ZeroSlopeEnding:Es,ZeroStencilOp:xS,_SRGBAFormat:Hl,createCanvasElement:r_,sRGBEncoding:ji},Symbol.toStringTag,{value:"Module"}));function Ti(n){return sg()?(Vv(n),!0):!1}function Ko(){const n=new Set,e=s=>{n.delete(s)};return{on:s=>{n.add(s);const r=()=>e(s);return Ti(r),{off:r}},off:e,trigger:(...s)=>Promise.all(Array.from(n).map(r=>r(...s)))}}function xt(n){return typeof n=="function"?n():j(n)}const qu=typeof window<"u"&&typeof document<"u";typeof WorkerGlobalScope<"u"&&globalThis instanceof WorkerGlobalScope;const sI=Object.prototype.toString,rI=n=>sI.call(n)==="[object Object]",Xu=()=>{};function oI(n,e){function t(...i){return new Promise((s,r)=>{Promise.resolve(n(()=>e.apply(this,i),{fn:e,thisArg:this,args:i})).then(s).catch(r)})}return t}function aI(n,e={}){let t,i,s=Xu;const r=a=>{clearTimeout(a),s(),s=Xu};return a=>{const l=xt(n),c=xt(e.maxWait);return t&&r(t),l<=0||c!==void 0&&c<=0?(i&&(r(i),i=null),Promise.resolve(a())):new Promise((h,u)=>{s=e.rejectOnCancel?u:h,c&&!i&&(i=setTimeout(()=>{t&&r(t),i=null,h(a())},c)),t=setTimeout(()=>{i&&r(i),i=null,h(a())},l)})}}function lI(n,e,t=!1){return e.reduce((i,s)=>(s in n&&(!t||n[s]!==void 0)&&(i[s]=n[s]),i),{})}function cI(n){return n||Ir()}function hI(n,e=200,t={}){return oI(aI(e,t),n)}function uI(n,e=200,t={}){const i=et(n.value),s=hI(()=>{i.value=n.value},e,t);return sn(n,()=>s()),i}function dI(n,e={}){if(!Zt(n))return f0(n);const t=Array.isArray(n.value)?Array.from({length:n.value.length}):{};for(const i in n.value)t[i]=d0(()=>({get(){return n.value[i]},set(s){var r;if((r=xt(e.replaceRef))!=null?r:!0)if(Array.isArray(n.value)){const a=[...n.value];a[i]=s,n.value=a}else{const a={...n.value,[i]:s};Object.setPrototypeOf(a,Object.getPrototypeOf(n.value)),n.value=a}else n.value[i]=s}}));return t}function cf(n,e=!0,t){cI()?Qo(n,t):e?n():ld(n)}function fI(n,e=1e3,t={}){const{immediate:i=!0,immediateCallback:s=!1}=t;let r=null;const o=et(!1);function a(){r&&(clearInterval(r),r=null)}function l(){o.value=!1,a()}function c(){const h=xt(e);h<=0||(o.value=!0,s&&n(),a(),r=setInterval(n,h))}if(i&&qu&&c(),Zt(e)||typeof e=="function"){const h=sn(e,()=>{o.value&&qu&&c()});Ti(h)}return Ti(l),{isActive:o,pause:l,resume:c}}function Gn(n){var e;const t=xt(n);return(e=t==null?void 0:t.$el)!=null?e:t}const Ri=qu?window:void 0;function Jo(...n){let e,t,i,s;if(typeof n[0]=="string"||Array.isArray(n[0])?([t,i,s]=n,e=Ri):[e,t,i,s]=n,!e)return Xu;Array.isArray(t)||(t=[t]),Array.isArray(i)||(i=[i]);const r=[],o=()=>{r.forEach(h=>h()),r.length=0},a=(h,u,d,f)=>(h.addEventListener(u,d,f),()=>h.removeEventListener(u,d,f)),l=sn(()=>[Gn(e),xt(s)],([h,u])=>{if(o(),!h)return;const d=rI(u)?{...u}:u;r.push(...t.flatMap(f=>i.map(m=>a(h,f,m,d))))},{immediate:!0,flush:"post"}),c=()=>{l(),o()};return Ti(c),c}function pI(){const n=et(!1);return Ir()&&Qo(()=>{n.value=!0}),n}function kc(n){const e=pI();return wt(()=>(e.value,!!n()))}function hf(n,e={}){const{immediate:t=!0,fpsLimit:i=void 0,window:s=Ri}=e,r=et(!1),o=i?1e3/i:null;let a=0,l=null;function c(d){if(!r.value||!s)return;const f=d-(a||d);if(o&&f<o){l=s.requestAnimationFrame(c);return}n({delta:f,timestamp:d}),a=d,l=s.requestAnimationFrame(c)}function h(){!r.value&&s&&(r.value=!0,l=s.requestAnimationFrame(c))}function u(){r.value=!1,l!=null&&s&&(s.cancelAnimationFrame(l),l=null)}return t&&h(),Ti(u),{isActive:Jl(r),pause:u,resume:h}}function mI(n,e={}){const{window:t=Ri}=e,i=kc(()=>t&&"matchMedia"in t&&typeof t.matchMedia=="function");let s;const r=et(!1),o=c=>{r.value=c.matches},a=()=>{s&&("removeEventListener"in s?s.removeEventListener("change",o):s.removeListener(o))},l=Is(()=>{i.value&&(a(),s=t.matchMedia(xt(n)),"addEventListener"in s?s.addEventListener("change",o):s.addListener(o),r.value=s.matches)});return Ti(()=>{l(),a(),s=void 0}),r}function gI(n,e,t={}){const{window:i=Ri,...s}=t;let r;const o=kc(()=>i&&"MutationObserver"in i),a=()=>{r&&(r.disconnect(),r=void 0)},l=sn(()=>Gn(n),u=>{a(),o.value&&i&&u&&(r=new MutationObserver(e),r.observe(u,s))},{immediate:!0}),c=()=>r==null?void 0:r.takeRecords(),h=()=>{a(),l()};return Ti(h),{isSupported:o,stop:h,takeRecords:c}}function yI(n={}){const{window:e=Ri}=n,t=et(1);if(e){let i=function(){t.value=e.devicePixelRatio,s(),r=e.matchMedia(`(resolution: ${t.value}dppx)`),r.addEventListener("change",i,{once:!0})},s=function(){r==null||r.removeEventListener("change",i)},r;i(),Ti(s)}return{pixelRatio:t}}function mv(n,e,t={}){const{window:i=Ri,...s}=t;let r;const o=kc(()=>i&&"ResizeObserver"in i),a=()=>{r&&(r.disconnect(),r=void 0)},l=wt(()=>Array.isArray(n)?n.map(u=>Gn(u)):[Gn(n)]),c=sn(l,u=>{if(a(),o.value&&i){r=new ResizeObserver(e);for(const d of u)d&&r.observe(d,s)}},{immediate:!0,flush:"post",deep:!0}),h=()=>{a(),c()};return Ti(h),{isSupported:o,stop:h}}function _I(n,e={}){const{reset:t=!0,windowResize:i=!0,windowScroll:s=!0,immediate:r=!0}=e,o=et(0),a=et(0),l=et(0),c=et(0),h=et(0),u=et(0),d=et(0),f=et(0);function m(){const y=Gn(n);if(!y){t&&(o.value=0,a.value=0,l.value=0,c.value=0,h.value=0,u.value=0,d.value=0,f.value=0);return}const g=y.getBoundingClientRect();o.value=g.height,a.value=g.bottom,l.value=g.left,c.value=g.right,h.value=g.top,u.value=g.width,d.value=g.x,f.value=g.y}return mv(n,m),sn(()=>Gn(n),y=>!y&&m()),gI(n,m,{attributeFilter:["style","class"]}),s&&Jo("scroll",m,{capture:!0,passive:!0}),i&&Jo("resize",m,{passive:!0}),cf(()=>{r&&m()}),{height:o,bottom:a,left:l,right:c,top:h,width:u,x:d,y:f,update:m}}function vI(n,e={width:0,height:0},t={}){const{window:i=Ri,box:s="content-box"}=t,r=wt(()=>{var u,d;return(d=(u=Gn(n))==null?void 0:u.namespaceURI)==null?void 0:d.includes("svg")}),o=et(e.width),a=et(e.height),{stop:l}=mv(n,([u])=>{const d=s==="border-box"?u.borderBoxSize:s==="content-box"?u.contentBoxSize:u.devicePixelContentBoxSize;if(i&&r.value){const f=Gn(n);if(f){const m=i.getComputedStyle(f);o.value=Number.parseFloat(m.width),a.value=Number.parseFloat(m.height)}}else if(d){const f=Array.isArray(d)?d:[d];o.value=f.reduce((m,{inlineSize:y})=>m+y,0),a.value=f.reduce((m,{blockSize:y})=>m+y,0)}else o.value=u.contentRect.width,a.value=u.contentRect.height},t);cf(()=>{const u=Gn(n);u&&(o.value="offsetWidth"in u?u.offsetWidth:e.width,a.value="offsetHeight"in u?u.offsetHeight:e.height)});const c=sn(()=>Gn(n),u=>{o.value=u?e.width:0,a.value=u?e.height:0});function h(){l(),c()}return{width:o,height:a,stop:h}}function xI(n){var e;const t=et(0);if(typeof performance>"u")return t;const i=(e=n==null?void 0:n.every)!=null?e:10;let s=performance.now(),r=0;return hf(()=>{if(r+=1,r>=i){const o=performance.now(),a=o-s;t.value=Math.round(1e3/(a/r)),s=o,r=0}}),t}function bI(n={}){const e=et(),t=kc(()=>typeof performance<"u"&&"memory"in performance);if(t.value){const{interval:i=1e3}=n;fI(()=>{e.value=performance.memory},i,{immediate:n.immediate,immediateCallback:n.immediateCallback})}return{isSupported:t,memory:e}}const gv={x:0,y:0,pointerId:0,pressure:0,tiltX:0,tiltY:0,width:0,height:0,twist:0,pointerType:null},wI=Object.keys(gv);function MI(n={}){const{target:e=Ri}=n,t=et(!1),i=et(n.initialValue||{});Object.assign(i.value,gv,i.value);const s=r=>{t.value=!0,!(n.pointerTypes&&!n.pointerTypes.includes(r.pointerType))&&(i.value=lI(r,wI,!1))};if(e){const r={passive:!0};Jo(e,["pointerdown","pointermove","pointerup"],s,r),Jo(e,"pointerleave",()=>t.value=!1,r)}return{...dI(i),isInside:t}}function SI(n={}){const{window:e=Ri,initialWidth:t=Number.POSITIVE_INFINITY,initialHeight:i=Number.POSITIVE_INFINITY,listenOrientation:s=!0,includeScrollbar:r=!0}=n,o=et(t),a=et(i),l=()=>{e&&(r?(o.value=e.innerWidth,a.value=e.innerHeight):(o.value=e.document.documentElement.clientWidth,a.value=e.document.documentElement.clientHeight))};if(l(),cf(l),Jo("resize",l,{passive:!0}),s){const c=mI("(orientation: portrait)");sn(c,()=>l())}return{width:o,height:a}}const EI="@tresjs/core",TI="module",AI="3.6.1",CI="pnpm@8.10.2",RI="Declarative ThreeJS using Vue Components",PI="Alvaro Saburido <hola@alvarosaburido.dev> (https://github.com/alvarosabu/)",II="MIT",LI=["vue","3d","threejs","three","threejs-vue"],DI=!1,UI={".":{types:"./dist/index.d.ts",require:"./dist/tres.umd.cjs",import:"./dist/tres.js"},"./components":{types:"./dist/components/index.d.ts"},"./composables":{types:"./dist/composables/index.d.ts"},"./types":{types:"./dist/types/index.d.ts"},"./utils":{types:"./dist/utils/index.d.ts"},"./*":"./*"},NI="./dist/tres.js",OI="./dist/tres.js",FI="./dist/index.d.ts",kI=["dist","*.d.ts"],BI={access:"public"},zI={dev:"cd playground && npm run dev",build:"vite build",playground:"cd playground && npm run dev",test:"vitest","test:ci":"vitest run","test:ui":"vitest --ui",release:"release-it",coverage:"vitest run --coverage",lint:"eslint . --ext .js,.jsx,.ts,.tsx,.vue","docs:dev":"vitepress dev docs","docs:build":"vitepress build docs","docs:serve":"vitepress serve docs","docs:preview":"vitepress preview docs","docs:contributors":"esno scripts/update-contributors.ts"},VI={three:">=0.133",vue:">=3.3"},HI={"@alvarosabu/utils":"^3.1.1","@vueuse/core":"^10.7.0"},GI={"@release-it/conventional-changelog":"^8.0.1","@stackblitz/sdk":"^1.9.0","@tresjs/cientos":"3.6.0","@tresjs/eslint-config-vue":"^0.2.1","@types/three":"^0.159.0","@typescript-eslint/eslint-plugin":"^6.14.0","@typescript-eslint/parser":"^6.14.0","@vitejs/plugin-vue":"^4.5.2","@vitest/coverage-c8":"^0.33.0","@vitest/ui":"^1.0.4","@vue/test-utils":"^2.4.3",eslint:"^8.55.0","eslint-plugin-vue":"^9.19.2",esno:"^4.0.0",gsap:"^3.12.3",jsdom:"^23.0.1",kolorist:"^1.8.0",ohmyfetch:"^0.4.21",pathe:"^1.1.1","release-it":"^17.0.1","rollup-plugin-analyzer":"^4.0.0","rollup-plugin-copy":"^3.5.0","rollup-plugin-visualizer":"^5.11.0",three:"^0.159.0",unocss:"^0.58.0",unplugin:"^1.5.1","unplugin-vue-components":"^0.26.0",vite:"^5.0.8","vite-plugin-banner":"^0.7.1","vite-plugin-dts":"3.6.4","vite-plugin-inspect":"^0.8.1","vite-plugin-require-transform":"^1.0.21","vite-svg-loader":"^5.1.0",vitepress:"1.0.0-rc.31",vitest:"^1.0.4",vue:"^3.3.11","vue-demi":"^0.14.6"},WI={name:EI,type:TI,version:AI,packageManager:CI,description:RI,author:PI,license:II,keywords:LI,sideEffects:DI,exports:UI,main:NI,module:OI,types:FI,files:kI,publishConfig:BI,scripts:zI,peerDependencies:VI,dependencies:HI,devDependencies:GI},qI=({sizes:n,scene:e})=>{const t=et([]),i=wt(()=>t.value[0]),s=(a,l=!1)=>{t.value.some(({uuid:c})=>c===a.uuid)||(l?o(a):t.value.push(a))},r=a=>{t.value=t.value.filter(({uuid:l})=>l!==a.uuid)},o=a=>{const l=a instanceof oa?a:t.value.find(h=>h.uuid===a);if(!l)return;const c=t.value.filter(({uuid:h})=>h!==l.uuid);t.value=[l,...c]};return Is(()=>{n.aspectRatio.value&&t.value.forEach(a=>{a instanceof kt&&(a.aspect=n.aspectRatio.value),(a instanceof kt||a instanceof ha)&&a.updateProjectionMatrix()})}),e.userData.tres__registerCamera=s,e.userData.tres__deregisterCamera=r,qs(()=>{t.value=[]}),{camera:i,cameras:t,registerCamera:s,deregisterCamera:r,setCameraActive:o}},yv=Ko(),_v=Ko(),uf=Ko(),Mo=new rf;let Al=0,Cl=0;const{pause:XI,resume:$I,isActive:YI}=hf(()=>{yv.trigger({delta:Al,elapsed:Cl,clock:Mo}),_v.trigger({delta:Al,elapsed:Cl,clock:Mo}),uf.trigger({delta:Al,elapsed:Cl,clock:Mo})},{immediate:!1});uf.on(()=>{Al=Mo.getDelta(),Cl=Mo.getElapsedTime()});const vv=()=>({onBeforeLoop:yv.on,onLoop:_v.on,onAfterLoop:uf.on,pause:XI,resume:$I,isActive:YI}),qm="[TresJS ▲ ■ ●] ";function df(){function n(i,s){console.error(`${qm} ${i}`,s||"")}function e(i){console.warn(`${qm} ${i}`)}function t(i,s){}return{logError:n,logWarning:e,logMessage:t}}function jI(n){return n instanceof Te?n:Array.isArray(n)?new Te(...n):new Te(n)}const xv=(n,e)=>{for(const t of Object.keys(e))e[t]instanceof Object&&Object.assign(e[t],xv(n[t],e[t]));return Object.assign(n||{},e),n},ZI="html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot",KI=JI(ZI);function Xm(n){return n&&n.nodeType===1}function ml(n){return n.replace(/-([a-z])/g,(e,t)=>t.toUpperCase())}function JI(n,e){const t=Object.create(null),i=n.split(",");for(let s=0;s<i.length;s++)t[i[s]]=!0;return e?s=>!!t[s.toLowerCase()]:s=>!!t[s]}const QI=(n,e)=>{const t=new Set,i=[];for(const s of n){const r=e(s);t.has(r)||(t.add(r),i.push(s))}return i},$m=(n,e)=>{if(!e)return;const t=Array.isArray(e)?e:e.match(/([^[.\]])+/g);return t==null?void 0:t.reduce((i,s)=>i&&i[s],n)},e2=(n,e,t)=>{const i=Array.isArray(e)?e:e.match(/([^[.\]])+/g);i&&i.reduce((s,r,o)=>(s[r]===void 0&&(s[r]={}),o===i.length-1&&(s[r]=t),s[r]),n)};function bv(n,e){if(Xm(n)&&Xm(e)){const s=n.attributes,r=e.attributes;return s.length!==r.length?!1:Array.from(s).every(({name:o,value:a})=>e.getAttribute(o)===a)}if(n===e)return!0;if(n===null||typeof n!="object"||e===null||typeof e!="object")return!1;const t=Object.keys(n),i=Object.keys(e);if(t.length!==i.length)return!1;for(const s of t)if(!i.includes(s)||!bv(n[s],e[s]))return!1;return!0}function t2(n,e){if(!Array.isArray(n)||!Array.isArray(e)||n.length!==e.length)return!1;for(let t=0;t<n.length;t++)if(!bv(n[t],e[t]))return!1;return!0}const n2=Number.parseInt(na.replace("dev","")),gl={realistic:{shadows:!0,physicallyCorrectLights:!0,outputColorSpace:Ft,toneMapping:xd,toneMappingExposure:3,shadowMap:{enabled:!0,type:vd}}};function i2({scene:n,canvas:e,options:t,disableRender:i,contextParts:{sizes:s,camera:r}}){const o=wt(()=>({alpha:xt(t.alpha),depth:xt(t.depth),canvas:Gn(e),context:xt(t.context),stencil:xt(t.stencil),antialias:xt(t.antialias)===void 0?!0:xt(t.antialias),precision:xt(t.precision),powerPreference:xt(t.powerPreference),premultipliedAlpha:xt(t.premultipliedAlpha),preserveDrawingBuffer:xt(t.preserveDrawingBuffer),logarithmicDepthBuffer:xt(t.logarithmicDepthBuffer),failIfMajorPerformanceCaveat:xt(t.failIfMajorPerformanceCaveat)})),a=Ps(new xo(o.value));sn(o,()=>{a.value.dispose(),a.value=new xo(o.value)}),Is(()=>{a.value.setSize(s.width.value,s.height.value)});const{pixelRatio:l}=yI();Is(()=>{a.value.setPixelRatio(l.value)});const{logError:c}=df(),h=(()=>{const m=new xo,y={shadowMap:{enabled:m.shadowMap.enabled,type:m.shadowMap.type},toneMapping:m.toneMapping,toneMappingExposure:m.toneMappingExposure,outputColorSpace:m.outputColorSpace};return m.dispose(),y})();Is(()=>{const m=xt(t.preset);m&&(m in gl||c(`Renderer Preset must be one of these: ${Object.keys(gl).join(", ")}`),xv(a.value,gl[m]));const y=(v,_)=>{const x=xt(v),P=()=>{if(m)return $m(gl[m],_)};if(x!==void 0)return x;const M=P();return M!==void 0?M:$m(h,_)},g=(v,_)=>e2(a.value,_,y(v,_));g(t.shadows,"shadowMap.enabled"),g(t.toneMapping,"toneMapping"),g(t.shadowMapType,"shadowMap.type"),n2<150&&g(!t.useLegacyLights,"physicallyCorrectLights"),g(t.outputColorSpace,"outputColorSpace"),g(t.toneMappingExposure,"toneMappingExposure");const p=y(t.clearColor,"clearColor");p&&a.value.setClearColor(p?jI(p):new Te(0))});const{pause:u,resume:d,onLoop:f}=vv();return f(()=>{r.value&&!xt(i)&&a.value.render(n,r.value)}),d(),qs(()=>{u(),a.value.dispose(),a.value.forceContextLoss()}),{renderer:a}}const Ym=n=>typeof n=="function",s2=(n,{renderer:e,camera:t,raycaster:i})=>{const s=wt(()=>e.value.domElement),{x:r,y:o}=MI({target:s}),{width:a,height:l,top:c,left:h}=_I(s),u=({x:A,y:O})=>{if(s.value)return{x:(A-h.value)/a.value*2-1,y:-((O-c.value)/l.value)*2+1}},d=({x:A,y:O})=>{if(t.value)return i.value.setFromCamera(new ue(A,O),t.value),i.value.intersectObjects(n.value,!1)},f=A=>{const O=u({x:(A==null?void 0:A.clientX)??r.value,y:(A==null?void 0:A.clientY)??o.value});return O?d(O)||[]:[]},m=wt(()=>f()),y=Ko(),g=Ko(),p=(A,O)=>{A.trigger({event:O,intersects:f(O)})},v=A=>{p(g,A)};let _;const x=A=>{var O;_=(O=f(A)[0])==null?void 0:O.object},P=A=>{var O;A instanceof PointerEvent&&_===((O=f(A)[0])==null?void 0:O.object)&&p(y,A)},M=A=>g.trigger({event:A,intersects:[]});return s.value.addEventListener("pointerup",P),s.value.addEventListener("pointerdown",x),s.value.addEventListener("pointermove",v),s.value.addEventListener("pointerleave",M),qs(()=>{s!=null&&s.value&&(s.value.removeEventListener("pointerup",P),s.value.removeEventListener("pointerdown",x),s.value.removeEventListener("pointermove",v),s.value.removeEventListener("pointerleave",M))}),{intersects:m,onClick:A=>y.on(A).off,onPointerMove:A=>g.on(A).off}},r2=({scene:n,contextParts:e})=>{const t=Vr({click:new Map,pointerMove:new Map,pointerEnter:new Map,pointerLeave:new Map}),i=et(new Set),s=d=>{i.value.add(d)},r=d=>{i.value.delete(d)},o=d=>{Object.values(t).forEach(f=>f.delete(d)),r(d)},a=d=>{const{onClick:f,onPointerMove:m,onPointerEnter:y,onPointerLeave:g}=d;f&&t.click.set(d,f),m&&t.pointerMove.set(d,m),y&&t.pointerEnter.set(d,y),g&&t.pointerLeave.set(d,g)};n.userData.tres__registerAtPointerEventHandler=a,n.userData.tres__deregisterAtPointerEventHandler=o,n.userData.tres__registerBlockingObjectAtPointerEventHandler=s,n.userData.tres__deregisterBlockingObjectAtPointerEventHandler=r;const l=wt(()=>QI([...Array.from(i.value),...Object.values(t).map(d=>Array.from(d.keys())).flat()],({uuid:d})=>d)),{onClick:c,onPointerMove:h}=s2(l,e);c(({intersects:d,event:f})=>{var m;d.length&&((m=t.click.get(d[0].object))==null||m(d[0],f))});let u;return h(({intersects:d,event:f})=>{var m,y,g,p;const v=(m=d==null?void 0:d[0])==null?void 0:m.object,{pointerLeave:_,pointerEnter:x,pointerMove:P}=t;u&&u!==v&&((y=_.get(u))==null||y(u,f)),v&&(u!==v&&((g=x.get(v))==null||g(d[0],f)),(p=P.get(v))==null||p(d[0],f)),u=v||null}),{registerObject:a,deregisterObject:o}};function o2(n){let e=0;return n.traverse(t=>{if(t.isMesh&&t.geometry){const i=t.geometry,s=i.attributes.position.count*3*Float32Array.BYTES_PER_ELEMENT,r=i.index?i.index.count*Uint32Array.BYTES_PER_ELEMENT:0,o=i.attributes.normal?i.attributes.normal.count*3*Float32Array.BYTES_PER_ELEMENT:0,a=i.attributes.uv?i.attributes.uv.count*2*Float32Array.BYTES_PER_ELEMENT:0,l=s+r+o+a;e+=l}}),e}const $u=et({}),ff=n=>Object.assign($u.value,n);function a2({scene:n,canvas:e,windowSize:t,disableRender:i,rendererOptions:s}){const r=wt(()=>xt(t)?SI():vI(xt(e).parentElement)),o=Ps({width:0,height:0}),a=uI(o,10),l=Is(()=>{o.value={width:r.value.width.value,height:r.value.height.value}}),c=wt(()=>a.value.width/a.value.height),h={height:wt(()=>a.value.height),width:wt(()=>a.value.width),aspectRatio:c},u=Ps(n),{camera:d,cameras:f,registerCamera:m,deregisterCamera:y,setCameraActive:g}=qI({sizes:h,scene:n}),{renderer:p}=i2({scene:n,canvas:e,options:s,contextParts:{sizes:h,camera:d},disableRender:i}),v={sizes:h,scene:u,camera:d,cameras:Jl(f),renderer:p,raycaster:Ps(new fv),controls:et(null),perf:{maxFrames:160,fps:{value:0,accumulator:[]},memory:{currentMem:0,allocatedMem:0,accumulator:[]}},extend:ff,registerCamera:m,setCameraActive:g,deregisterCamera:y};Ls("useTres",v);const _=100,x=xI({every:_}),{isSupported:P,memory:M}=bI({interval:_}),A=160;let O=performance.now();const S=({timestamp:F})=>{v.scene.value&&(v.perf.memory.allocatedMem=o2(v.scene.value)),F-O>=_&&(O=F,v.perf.fps.accumulator.push(x.value),v.perf.fps.accumulator.length>A&&v.perf.fps.accumulator.shift(),v.perf.fps.value=x.value,P.value&&M.value&&(v.perf.memory.accumulator.push(M.value.usedJSHeapSize/1024/1024),v.perf.memory.accumulator.length>A&&v.perf.memory.accumulator.shift(),v.perf.memory.currentMem=v.perf.memory.accumulator.reduce((q,X)=>q+X,0)/v.perf.memory.accumulator.length))};let C=0;const G=1,{pause:J,resume:de}=hf(({delta:F})=>{window.__TRES__DEVTOOLS__&&(S({timestamp:performance.now()}),C+=F,C>=G&&(window.__TRES__DEVTOOLS__.cb(v),C=0))},{immediate:!0});return qs(()=>{l(),J()}),v}let Ct=null;const{logError:jm}=df(),Fh=["onClick","onPointerMove","onPointerEnter","onPointerLeave"],l2={createElement(n,e,t,i){var s,r;if(i||(i={}),i.args||(i.args=[]),n==="template"||KI(n))return null;let o=n.replace("Tres",""),a;if(n==="primitive"){(i==null?void 0:i.object)===void 0&&jm("Tres primitives need a prop 'object'");const l=i.object;o=l.type,a=Object.assign(l,{type:o,attach:i.attach,primitive:!0})}else{const l=$u.value[o];l||jm(`${o} is not defined on the THREE namespace. Use extend to add it to the catalog.`),a=new l(...i.args)}return a.isCamera&&(i!=null&&i.position||a.position.set(3,3,3),i!=null&&i.lookAt||a.lookAt(0,0,0)),(i==null?void 0:i.attach)===void 0&&(a.isMaterial?a.attach="material":a.isBufferGeometry&&(a.attach="geometry")),a.isObject3D&&((s=i==null?void 0:i.material)!=null&&s.isMaterial&&(a.userData.tres__materialViaProp=!0),(r=i==null?void 0:i.geometry)!=null&&r.isBufferGeometry&&(a.userData.tres__geometryViaProp=!0)),a.userData={...a.userData,tres__name:o},a},insert(n,e){var t,i,s,r;e&&e.isScene&&(Ct=e);const o=e||Ct;if(n!=null&&n.isObject3D){if(n!=null&&n.isCamera){if(!(Ct!=null&&Ct.userData.tres__registerCamera))throw"could not find tres__registerCamera on scene's userData";(i=Ct==null?void 0:(t=Ct.userData).tres__registerCamera)==null||i.call(t,n)}if(n&&Fh.some(a=>n[a])){if(!(Ct!=null&&Ct.userData.tres__registerAtPointerEventHandler))throw"could not find tres__registerAtPointerEventHandler on scene's userData";(r=Ct==null?void 0:(s=Ct.userData).tres__registerAtPointerEventHandler)==null||r.call(s,n)}}n!=null&&n.isObject3D&&o!=null&&o.isObject3D?(o.add(n),n.dispatchEvent({type:"added"})):n!=null&&n.isFog?o.fog=n:typeof(n==null?void 0:n.attach)=="string"&&(n.__previousAttach=n[o==null?void 0:o.attach],o&&(o[n.attach]=n))},remove(n){var e,t;if(n){if(n.isObject3D){const i=n,s=c=>{var h,u;const d=c;c.userData.tres__materialViaProp||((h=d.material)==null||h.dispose(),d.material=void 0),c.userData.tres__geometryViaProp||((u=d.geometry)==null||u.dispose(),d.geometry=void 0)},r=Ct==null?void 0:Ct.userData.tres__deregisterAtPointerEventHandler,o=Ct==null?void 0:Ct.userData.tres__deregisterBlockingObjectAtPointerEventHandler,a=c=>{var h,u;if(!o)throw"could not find tres__deregisterBlockingObjectAtPointerEventHandler on scene's userData";if((u=Ct==null?void 0:(h=Ct.userData).tres__deregisterBlockingObjectAtPointerEventHandler)==null||u.call(h,c),!r)throw"could not find tres__deregisterAtPointerEventHandler on scene's userData";c&&Fh.some(d=>c[d])&&(r==null||r(c))},l=c=>{const h=Ct==null?void 0:Ct.userData.tres__deregisterCamera;if(!h)throw"could not find tres__deregisterCamera on scene's userData";c.isCamera&&(h==null||h(c))};(e=n.removeFromParent)==null||e.call(n),i.traverse(c=>{s(c),l(c),a==null||a(c)}),s(i),l(i),a==null||a(i)}(t=n.dispose)==null||t.call(n)}},patchProp(n,e,t,i){var s,r,o,a;if(n){let l=n,c=e;if(n.isObject3D&&c==="blocks-pointer-events"){i||i===""?(r=Ct==null?void 0:(s=Ct.userData).tres__registerBlockingObjectAtPointerEventHandler)==null||r.call(s,n):(a=Ct==null?void 0:(o=Ct.userData).tres__deregisterBlockingObjectAtPointerEventHandler)==null||a.call(o,n);return}let h=ml(c),u=l==null?void 0:l[h];if(c==="args"){const f=n,m=t??[],y=i??[],g=n.userData.tres__name||n.type;g&&m.length&&!t2(m,y)&&(l=Object.assign(f,new $u.value[g](...i)));return}if(l.type==="BufferGeometry"){if(c==="args")return;l.setAttribute(ml(c),new ct(...i));return}if(c.includes("-")&&u===void 0){const f=c.split("-");u=f.reduce((m,y)=>m[ml(y)],l),c=f.pop(),h=c.toLowerCase(),u!=null&&u.set||(l=f.reduce((m,y)=>m[ml(y)],l))}let d=i;if(d===""&&(d=!0),Ym(u)){Fh.includes(e)||(Array.isArray(d)?n[h](...d):n[h](d));return}!(u!=null&&u.set)&&!Ym(u)?l[h]=d:u.constructor===d.constructor&&u!=null&&u.copy?u==null||u.copy(d):Array.isArray(d)?u.set(...d):!u.isColor&&u.setScalar?u.setScalar(d):u.set(d)}},parentNode(n){return(n==null?void 0:n.parent)||null},createText:()=>{},createComment:()=>{},setText:()=>{},setElementText:()=>{},nextSibling:()=>{},querySelector:()=>{},setScopeId:()=>{},cloneNode:()=>{},insertStaticContent:()=>{}},{render:c2}=Fg(l2);ff(iI);const h2=["data-scene","data-tres"],u2=$t({__name:"TresCanvas",props:{shadows:{type:Boolean,default:void 0},clearColor:{},toneMapping:{},shadowMapType:{},useLegacyLights:{type:Boolean,default:void 0},outputColorSpace:{},toneMappingExposure:{},camera:{},preset:{},windowSize:{type:Boolean,default:void 0},disableRender:{type:Boolean,default:void 0},context:{},precision:{},alpha:{type:Boolean,default:void 0},premultipliedAlpha:{type:Boolean},antialias:{type:Boolean,default:void 0},stencil:{type:Boolean,default:void 0},preserveDrawingBuffer:{type:Boolean,default:void 0},powerPreference:{},depth:{type:Boolean,default:void 0},logarithmicDepthBuffer:{type:Boolean,default:void 0},failIfMajorPerformanceCaveat:{type:Boolean,default:void 0}},setup(n,{expose:e}){var t;const i=n,{logWarning:s}=df(),r=et(),o=Ps(new Vd),{resume:a}=vv(),l=X0(),c=(t=Ir())==null?void 0:t.appContext.app,h=y=>$t({setup(){var g;const p=(g=Ir())==null?void 0:g.appContext;return p&&(p.app=c),Ls("useTres",y),Ls("extend",ff),()=>Fl(Bt,null,l!=null&&l.default?l.default():[])}}),u=y=>{const g=h(y);c2(Fl(g),o.value)},d=(y,g=!1)=>{o.value.children=[],g&&(y.renderer.value.dispose(),y.renderer.value.renderLists.dispose(),y.renderer.value.forceContextLoss()),u(y),a()},f=wt(()=>i.disableRender),m=Ps(null);return e({context:m,dispose:()=>d(m.value,!0)}),Qo(()=>{const y=r;m.value=a2({scene:o.value,canvas:y,windowSize:i.windowSize,disableRender:f,rendererOptions:i}),r2({scene:o.value,contextParts:m.value});const{registerCamera:g,camera:p,cameras:v,deregisterCamera:_}=m.value;u(m.value);const x=()=>{const P=new kt(45,window.innerWidth/window.innerHeight,.1,1e3);P.position.set(3,3,3),P.lookAt(0,0,0),g(P);const M=Is(()=>{v.value.length>=2&&(P.removeFromParent(),_(P),M==null||M())})};sn(()=>i.camera,(P,M)=>{P&&g(P),M&&(M.removeFromParent(),_(M))},{immediate:!0}),p.value||(s("No camera found. Creating a default perspective camera. To have full control over a camera, please add one to the scene."),x())}),(y,g)=>(rt(),ot("canvas",{ref_key:"canvas",ref:r,"data-scene":o.value.uuid,class:Zl(y.$attrs.class),"data-tres":`tresjs ${j(WI).version}`,style:jl({display:"block",width:"100%",height:"100%",position:y.windowSize?"fixed":"relative",top:0,left:0,pointerEvents:"auto",touchAction:"none",...y.$attrs.style})},null,14,h2))}}),d2=n=>(es("data-v-825d26aa"),n=n(),ts(),n),f2={class:"three-dee"},p2=d2(()=>ye("p",null,"3D test",-1)),m2={class:"container"},g2=$t({__name:"ThreeDee",setup(n){const e=et(null);return(t,i)=>{const s=lo("TresPerspectiveCamera"),r=lo("TresTorusGeometry"),o=lo("TresMeshBasicMaterial"),a=lo("TresMesh");return rt(),ot("div",f2,[p2,ye("div",m2,[vt(j(u2),{ref_key:"canvas",ref:e,class:"canvas"},{default:Hh(()=>[vt(s),vt(a,null,{default:Hh(()=>[vt(r,{args:[1,.4,20,100]}),vt(o,{color:"orange"})]),_:1})]),_:1},512)])])}}}),y2=Nn(g2,[["__scopeId","data-v-825d26aa"]]),_2=[{path:"/home",component:_M},{path:"/about",component:rM},{path:"/blog",component:VM},{path:"/blog_post/:id",component:tS},{path:"/3d_stuff",component:y2},{path:"/",redirect:"/home"},{path:"/oops",component:mp},{path:"/:pathMatch(.*)*",component:mp}],v2=nw({history:_b(),routes:_2}),pf=Yx(eM);pf.use(Qx());pf.use(v2);pf.mount("#app");
